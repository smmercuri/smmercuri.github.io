{"name":"Mathlib.Probability.Process.Stopping","instances":[{"typeNames":["MeasureTheory.Measure.trim"],"name":"MeasureTheory.IsStoppingTime.sigmaFinite_stopping_time","className":"MeasureTheory.SigmaFinite"},{"typeNames":["MeasureTheory.Measure.trim"],"name":"MeasureTheory.IsStoppingTime.sigmaFinite_stopping_time_of_le","className":"MeasureTheory.SigmaFinite"}],"imports":["Init","Mathlib.Probability.Process.Adapted","Mathlib.MeasureTheory.Constructions.BorelSpace.Order"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L1096-L1108","name":"MeasureTheory.condexp_min_stopping_time_ae_eq_restrict_le","line":1096,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_min_stopping_time_ae_eq_restrict_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_min_stopping_time_ae_eq_restrict_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">condexp_min_stopping_time_ae_eq_restrict_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Filter.atTop</span>.IsCountablyGenerated</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hσ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">⋯</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.restrict</span> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">x</span></span></span>}</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L1088-L1094","name":"MeasureTheory.condexp_stopping_time_ae_eq_restrict_eq","line":1088,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_stopping_time_ae_eq_restrict_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_stopping_time_ae_eq_restrict_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">condexp_stopping_time_ae_eq_restrict_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Filter.atTop</span>.IsCountablyGenerated</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.restrict</span> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">ℱ</span></span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L1074-L1084","name":"MeasureTheory.condexp_min_stopping_time_ae_eq_restrict_le_const","line":1074,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_min_stopping_time_ae_eq_restrict_le_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_min_stopping_time_ae_eq_restrict_le_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">condexp_min_stopping_time_ae_eq_restrict_le_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Filter.atTop</span>.IsCountablyGenerated</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">⋯</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.restrict</span> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>}</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L1066-L1070","name":"MeasureTheory.condexp_stopping_time_ae_eq_restrict_eq_of_countable","line":1066,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_stopping_time_ae_eq_restrict_eq_of_countable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_stopping_time_ae_eq_restrict_eq_of_countable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">condexp_stopping_time_ae_eq_restrict_eq_of_countable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.restrict</span> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">ℱ</span></span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L1057-L1064","name":"MeasureTheory.condexp_stopping_time_ae_eq_restrict_eq_of_countable_range","line":1057,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_stopping_time_ae_eq_restrict_eq_of_countable_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.condexp_stopping_time_ae_eq_restrict_eq_of_countable_range\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">condexp_stopping_time_ae_eq_restrict_eq_of_countable_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">ℱ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_countable : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᵐ[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.restrict</span> <span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condexp\">MeasureTheory.condexp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">ℱ</span></span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L1042-L1045","name":"MeasureTheory.stoppedValue_piecewise_const'","line":1042,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_piecewise_const'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_piecewise_const'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue_piecewise_const'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.piecewise</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\">j</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L1038-L1040","name":"MeasureTheory.stoppedValue_piecewise_const","line":1038,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_piecewise_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_piecewise_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue_piecewise_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.piecewise</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\">j</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.piecewise</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L1033-L1036","name":"MeasureTheory.isStoppingTime_piecewise_const","line":1033,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.isStoppingTime_piecewise_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.isStoppingTime_piecewise_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">isStoppingTime_piecewise_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝒢 : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">𝒢</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.piecewise</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\">j</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L1017-L1031","name":"MeasureTheory.IsStoppingTime.piecewise_of_le","line":1017,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.piecewise_of_le","doc":"Given stopping times `τ` and `η` which are bounded below, `Set.piecewise s τ η` is also\na stopping time with respect to the same filtration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.piecewise_of_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">piecewise_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝒢 : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ_st : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">𝒢</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hη_st : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">𝒢</span> <span class=\"fn\">η</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hη : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">η</span> <span class=\"fn\">ω</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">𝒢</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.piecewise</span> <span class=\"fn\">τ</span> <span class=\"fn\">η</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L994-L1004","name":"MeasureTheory.stoppedProcess_eq'","line":994,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedProcess_eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">a</span></span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L988-L992","name":"MeasureTheory.stoppedProcess_eq","line":988,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedProcess_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">a</span></span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.range\">Finset.range</a> <span class=\"fn\">n</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L984-L986","name":"MeasureTheory.stoppedValue_eq","line":984,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L969-L978","name":"MeasureTheory.stoppedValue_sub_eq_sum'","line":969,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_sub_eq_sum'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_sub_eq_sum'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue_sub_eq_sum'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hle : <span class=\"fn\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt;\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span></span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span></span>)</span></span></span>)</span> <span class=\"fn\">ω</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L962-L967","name":"MeasureTheory.stoppedValue_sub_eq_sum","line":962,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_sub_eq_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_sub_eq_sum\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue_sub_eq_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hle : <span class=\"fn\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt;\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span>)</span></span>, <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span></span>)</span></span>)</span> <span class=\"fn\">ω</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L946-L949","name":"MeasureTheory.Adapted.stronglyMeasurable_stoppedProcess_of_discrete","line":946,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.Adapted.stronglyMeasurable_stoppedProcess_of_discrete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.Adapted.stronglyMeasurable_stoppedProcess_of_discrete\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Adapted</span>.<span class=\"name\">stronglyMeasurable_stoppedProcess_of_discrete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.PseudoMetrizableSpace\">TopologicalSpace.PseudoMetrizableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.Adapted\">MeasureTheory.Adapted</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.StronglyMeasurable\">MeasureTheory.StronglyMeasurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L941-L944","name":"MeasureTheory.Adapted.stronglyMeasurable_stoppedProcess","line":941,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.Adapted.stronglyMeasurable_stoppedProcess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.Adapted.stronglyMeasurable_stoppedProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Adapted</span>.<span class=\"name\">stronglyMeasurable_stoppedProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.PseudoMetrizableSpace\">TopologicalSpace.PseudoMetrizableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.Adapted\">MeasureTheory.Adapted</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu_cont : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span> <span class=\"fn\">ω</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.StronglyMeasurable\">MeasureTheory.StronglyMeasurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L937-L939","name":"MeasureTheory.Adapted.stoppedProcess_of_discrete","line":937,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.Adapted.stoppedProcess_of_discrete","doc":"If the indexing order has the discrete topology, then the stopped process of an adapted process\nis adapted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.Adapted.stoppedProcess_of_discrete\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Adapted</span>.<span class=\"name\">stoppedProcess_of_discrete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.PseudoMetrizableSpace\">TopologicalSpace.PseudoMetrizableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.Adapted\">MeasureTheory.Adapted</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.Adapted\">MeasureTheory.Adapted</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L930-L933","name":"MeasureTheory.Adapted.stoppedProcess","line":930,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.Adapted.stoppedProcess","doc":"The stopped process of an adapted process with continuous paths is adapted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.Adapted.stoppedProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Adapted</span>.<span class=\"name\">stoppedProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.PseudoMetrizableSpace\">TopologicalSpace.PseudoMetrizableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.Adapted\">MeasureTheory.Adapted</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu_cont : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span> <span class=\"fn\">ω</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.Adapted\">MeasureTheory.Adapted</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L915-L917","name":"MeasureTheory.integrable_stoppedProcess","line":915,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.integrable_stoppedProcess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.integrable_stoppedProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">integrable_stoppedProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">μ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L909-L913","name":"MeasureTheory.integrable_stoppedProcess_of_mem_finset","line":909,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.integrable_stoppedProcess_of_mem_finset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.integrable_stoppedProcess_of_mem_finset\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">integrable_stoppedProcess_of_mem_finset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">μ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L905-L907","name":"MeasureTheory.memℒp_stoppedProcess","line":905,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.memℒp_stoppedProcess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.memℒp_stoppedProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">memℒp_stoppedProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L895-L903","name":"MeasureTheory.memℒp_stoppedProcess_of_mem_finset","line":895,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.memℒp_stoppedProcess_of_mem_finset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.memℒp_stoppedProcess_of_mem_finset\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">memℒp_stoppedProcess_of_mem_finset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L883-L886","name":"MeasureTheory.integrable_stoppedValue","line":883,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.integrable_stoppedValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.integrable_stoppedValue\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">integrable_stoppedValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">μ</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L875-L879","name":"MeasureTheory.integrable_stoppedValue_of_mem_finset","line":875,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.integrable_stoppedValue_of_mem_finset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.integrable_stoppedValue_of_mem_finset\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">integrable_stoppedValue_of_mem_finset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">μ</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L871-L873","name":"MeasureTheory.memℒp_stoppedValue","line":871,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.memℒp_stoppedValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.memℒp_stoppedValue\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">memℒp_stoppedValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L862-L869","name":"MeasureTheory.memℒp_stoppedValue_of_mem_finset","line":862,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.memℒp_stoppedValue_of_mem_finset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.memℒp_stoppedValue_of_mem_finset\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">memℒp_stoppedValue_of_mem_finset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ℱ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">ℱ</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L850-L856","name":"MeasureTheory.stoppedProcess_eq''","line":850,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq''\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedProcess_eq''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">a</span></span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Iio\">Finset.Iio</a> <span class=\"fn\">n</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L828-L848","name":"MeasureTheory.stoppedProcess_eq_of_mem_finset","line":828,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq_of_mem_finset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq_of_mem_finset\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedProcess_eq_of_mem_finset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">a</span></span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.filter\">Finset.filter</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span></span>)</span> <span class=\"fn\">s</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L823-L826","name":"MeasureTheory.stoppedValue_eq'","line":823,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_eq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_eq'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue_eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Iic\">Finset.Iic</a> <span class=\"fn\">N</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L811-L821","name":"MeasureTheory.stoppedValue_eq_of_mem_finset","line":811,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_eq_of_mem_finset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_eq_of_mem_finset\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue_eq_of_mem_finset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hbdd : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span>.indicator</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L788-L801","name":"MeasureTheory.measurable_stoppedValue","line":788,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.measurable_stoppedValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.measurable_stoppedValue\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurable_stoppedValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf_prog : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.ProgMeasurable\">MeasureTheory.ProgMeasurable</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L779-L786","name":"MeasureTheory.stronglyMeasurable_stoppedValue_of_le","line":779,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stronglyMeasurable_stoppedValue_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stronglyMeasurable_stoppedValue_of_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stronglyMeasurable_stoppedValue_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.ProgMeasurable\">MeasureTheory.ProgMeasurable</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.StronglyMeasurable\">MeasureTheory.StronglyMeasurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L774-L777","name":"MeasureTheory.ProgMeasurable.stronglyMeasurable_stoppedProcess","line":774,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.ProgMeasurable.stronglyMeasurable_stoppedProcess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.ProgMeasurable.stronglyMeasurable_stoppedProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProgMeasurable</span>.<span class=\"name\">stronglyMeasurable_stoppedProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.ProgMeasurable\">MeasureTheory.ProgMeasurable</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.StronglyMeasurable\">MeasureTheory.StronglyMeasurable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L770-L772","name":"MeasureTheory.ProgMeasurable.adapted_stoppedProcess","line":770,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.ProgMeasurable.adapted_stoppedProcess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.ProgMeasurable.adapted_stoppedProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProgMeasurable</span>.<span class=\"name\">adapted_stoppedProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.ProgMeasurable\">MeasureTheory.ProgMeasurable</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.Adapted\">MeasureTheory.Adapted</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L766-L768","name":"MeasureTheory.ProgMeasurable.stoppedProcess","line":766,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.ProgMeasurable.stoppedProcess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.ProgMeasurable.stoppedProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProgMeasurable</span>.<span class=\"name\">stoppedProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.ProgMeasurable\">MeasureTheory.ProgMeasurable</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.ProgMeasurable\">MeasureTheory.ProgMeasurable</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L729-L764","name":"MeasureTheory.progMeasurable_min_stopping_time","line":729,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.progMeasurable_min_stopping_time","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.progMeasurable_min_stopping_time\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">progMeasurable_min_stopping_time</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Adapted.html#MeasureTheory.ProgMeasurable\">MeasureTheory.ProgMeasurable</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L721-L722","name":"MeasureTheory.stoppedProcess_eq_of_ge","line":721,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq_of_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq_of_ge\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedProcess_eq_of_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <span class=\"fn\">Ω</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">i</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span>)</span> <span class=\"fn\">ω</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L718-L719","name":"MeasureTheory.stoppedProcess_eq_of_le","line":718,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq_of_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedProcess_eq_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <span class=\"fn\">Ω</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span> <span class=\"fn\">i</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span> <span class=\"fn\">ω</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L714-L716","name":"MeasureTheory.stoppedValue_stoppedProcess","line":714,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_stoppedProcess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_stoppedProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue_stoppedProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">σ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">ω</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L710-L712","name":"MeasureTheory.stoppedProcess_eq_stoppedValue","line":710,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq_stoppedValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess_eq_stoppedValue\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedProcess_eq_stoppedValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\">MeasureTheory.stoppedProcess</a> <span class=\"fn\">u</span> <span class=\"fn\">τ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L708-L708","name":"MeasureTheory.stoppedProcess","line":708,"kind":"def","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess","doc":"Given a map `u : ι → Ω → E`, the stopped process with respect to `τ` is `u i ω` if\n`i ≤ τ ω`, and `u (τ ω) ω` otherwise.\n\nIntuitively, the stopped process stops evolving once the stopping time has occured. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L699-L700","name":"MeasureTheory.stoppedValue_const","line":699,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\">MeasureTheory.stoppedValue</a> <span class=\"fn\">u</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\">i</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L697-L697","name":"MeasureTheory.stoppedValue","line":697,"kind":"def","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue","doc":"Given a map `u : ι → Ω → E`, its stopped value with respect to the stopping\ntime `τ` is the map `x ↦ u (τ ω) ω`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.stoppedValue\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">stoppedValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L663-L684","name":"MeasureTheory.IsStoppingTime.measurableSet_eq_stopping_time_of_countable","line":663,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_stopping_time_of_countable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_stopping_time_of_countable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_eq_stopping_time_of_countable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSingletonClass\">MeasurableSingletonClass</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L640-L661","name":"MeasureTheory.IsStoppingTime.measurableSet_eq_stopping_time","line":640,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_stopping_time","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_stopping_time\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_eq_stopping_time</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSingletonClass\">MeasurableSingletonClass</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableSub₂\">MeasurableSub₂</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L632-L638","name":"MeasureTheory.IsStoppingTime.measurableSet_stopping_time_le","line":632,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_stopping_time_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_stopping_time_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_stopping_time_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L613-L630","name":"MeasureTheory.IsStoppingTime.measurableSet_le_stopping_time","line":613,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_le_stopping_time","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_le_stopping_time\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_le_stopping_time</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L604-L611","name":"MeasureTheory.IsStoppingTime.measurableSet_inter_le_const_iff","line":604,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_inter_le_const_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_inter_le_const_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_inter_le_const_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>}</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>}</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L591-L602","name":"MeasureTheory.IsStoppingTime.measurableSet_inter_le_iff","line":591,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_inter_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_inter_le_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_inter_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span></span>}</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span></span>}</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L560-L589","name":"MeasureTheory.IsStoppingTime.measurableSet_inter_le","line":560,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_inter_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_inter_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_inter_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span></span>}</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L555-L558","name":"MeasureTheory.IsStoppingTime.measurableSet_min_const_iff","line":555,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_min_const_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_min_const_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_min_const_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L551-L553","name":"MeasureTheory.IsStoppingTime.measurableSpace_min_const","line":551,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_min_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_min_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_min_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⋯</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L546-L549","name":"MeasureTheory.IsStoppingTime.measurableSet_min_iff","line":546,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_min_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_min_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_min_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L532-L544","name":"MeasureTheory.IsStoppingTime.measurableSpace_min","line":532,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_min\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⋯</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\"><span class=\"fn\">hπ</span>.measurableSpace</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L527-L530","name":"MeasureTheory.IsStoppingTime.measurable_of_le","line":527,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurable_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurable_of_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurable_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L522-L525","name":"MeasureTheory.IsStoppingTime.measurable","line":522,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L506-L518","name":"MeasureTheory.IsStoppingTime.measurableSpace_le_of_countable_range","line":506,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le_of_countable_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le_of_countable_range\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_le_of_countable_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_countable : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L502-L504","name":"MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable'","line":502,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_lt_of_countable'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L493-L500","name":"MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable_range'","line":493,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable_range'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_lt_of_countable_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_countable : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L489-L491","name":"MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable'","line":489,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_ge_of_countable'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L479-L487","name":"MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable_range'","line":479,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable_range'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_ge_of_countable_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_countable : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L475-L477","name":"MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable'","line":475,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_eq_of_countable'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L469-L473","name":"MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable_range'","line":469,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable_range'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_eq_of_countable_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_countable : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L458-L465","name":"MeasureTheory.IsStoppingTime.measurableSet_lt'","line":458,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_lt'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L448-L456","name":"MeasureTheory.IsStoppingTime.measurableSet_ge'","line":448,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_ge'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L442-L446","name":"MeasureTheory.IsStoppingTime.measurableSet_eq'","line":442,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L436-L440","name":"MeasureTheory.IsStoppingTime.measurableSet_gt'","line":436,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_gt'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_gt'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_gt'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L428-L434","name":"MeasureTheory.IsStoppingTime.measurableSet_le'","line":428,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_le'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_le'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L416-L422","name":"MeasureTheory.IsStoppingTime.sigmaFinite_stopping_time_of_le","line":416,"kind":"instance","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.sigmaFinite_stopping_time_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.sigmaFinite_stopping_time_of_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">sigmaFinite_stopping_time_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeSup\">SemilatticeSup</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderBot\">OrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L407-L414","name":"MeasureTheory.IsStoppingTime.sigmaFinite_stopping_time","line":407,"kind":"instance","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.sigmaFinite_stopping_time","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.sigmaFinite_stopping_time\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">sigmaFinite_stopping_time</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeSup\">SemilatticeSup</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderBot\">OrderBot</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Filter.atTop</span>.IsCountablyGenerated</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.SigmaFiniteFiltration\">MeasureTheory.SigmaFiniteFiltration</a> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.SigmaFinite\">MeasureTheory.SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.trim</span> <span class=\"fn\">⋯</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L401-L403","name":"MeasureTheory.IsStoppingTime.le_measurableSpace_of_const_le","line":401,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.le_measurableSpace_of_const_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.le_measurableSpace_of_const_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">le_measurableSpace_of_const_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L397-L399","name":"MeasureTheory.IsStoppingTime.measurableSpace_le_of_le","line":397,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le_of_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L393-L395","name":"MeasureTheory.IsStoppingTime.measurableSpace_le_of_le_const","line":393,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le_of_le_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le_of_le_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_le_of_le_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ_le : <span class=\"fn\">∀ (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L373-L391","name":"MeasureTheory.IsStoppingTime.measurableSet_inter_eq_iff","line":373,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_inter_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_inter_eq_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_inter_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L359-L371","name":"MeasureTheory.IsStoppingTime.measurableSpace_const","line":359,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⋯</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L341-L350","name":"MeasureTheory.IsStoppingTime.measurableSpace_le","line":341,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeSup\">SemilatticeSup</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Filter.atTop</span>.IsCountablyGenerated</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L326-L339","name":"MeasureTheory.IsStoppingTime.measurableSpace_le'","line":326,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Filter.atTop</span>.IsCountablyGenerated</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Filter.atTop</span>.NeBot</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L315-L324","name":"MeasureTheory.IsStoppingTime.measurableSpace_le_of_countable","line":315,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le_of_countable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_le_of_countable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_le_of_countable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L305-L313","name":"MeasureTheory.IsStoppingTime.measurableSpace_mono","line":305,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace_mono\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hle : <span class=\"fn\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hτ</span>.measurableSpace</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">hπ</span>.measurableSpace</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L301-L303","name":"MeasureTheory.IsStoppingTime.measurableSet","line":301,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>}</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L285-L299","name":"MeasureTheory.IsStoppingTime.measurableSpace","line":285,"kind":"def","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace","doc":"The associated σ-algebra with a stopping time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSpace\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L268-L278","name":"MeasureTheory.IsStoppingTime.add","line":268,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.add\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">π</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L255-L265","name":"MeasureTheory.IsStoppingTime.add_const_nat","line":255,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.add_const_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.add_const_nat\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">add_const_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L248-L253","name":"MeasureTheory.IsStoppingTime.add_const","line":248,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.add_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.add_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">add_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">ι</span> <span class=\"fn\">ι</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">ι</span> <span class=\"fn\">ι</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L244-L246","name":"MeasureTheory.IsStoppingTime.min_const","line":244,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.min_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.min_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">min_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span>)</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L238-L242","name":"MeasureTheory.IsStoppingTime.min","line":238,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.min\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L234-L236","name":"MeasureTheory.IsStoppingTime.max_const","line":234,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.max_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.max_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">max_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span>)</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L228-L232","name":"MeasureTheory.IsStoppingTime.max","line":228,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.max\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">ω</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L215-L220","name":"MeasureTheory.isStoppingTime_of_measurableSet_eq","line":215,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.isStoppingTime_of_measurableSet_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.isStoppingTime_of_measurableSet_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">isStoppingTime_of_measurableSet_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L205-L207","name":"MeasureTheory.IsStoppingTime.measurableSet_lt_le","line":205,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_lt_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hle : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L201-L203","name":"MeasureTheory.IsStoppingTime.measurableSet_eq_le","line":201,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_eq_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hle : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L194-L199","name":"MeasureTheory.IsStoppingTime.measurableSet_eq","line":194,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L187-L192","name":"MeasureTheory.IsStoppingTime.measurableSet_ge","line":187,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L177-L185","name":"MeasureTheory.IsStoppingTime.measurableSet_lt","line":177,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L150-L175","name":"MeasureTheory.IsStoppingTime.measurableSet_lt_of_isLUB","line":150,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_isLUB","doc":"Auxiliary lemma for `MeasureTheory.IsStoppingTime.measurableSet_lt`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_isLUB\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_lt_of_isLUB</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order/Basic.html#OrderTopology\">OrderTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#FirstCountableTopology\">FirstCountableTopology</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_lub : <span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#IsLUB\">IsLUB</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Basic.html#Set.Iio\">Set.Iio</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L138-L143","name":"MeasureTheory.IsStoppingTime.measurableSet_gt","line":138,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_gt\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L126-L128","name":"MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable","line":126,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_ge_of_countable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L118-L124","name":"MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable_range","line":118,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_ge_of_countable_range\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_ge_of_countable_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_countable : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L114-L116","name":"MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable","line":114,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_lt_of_countable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L108-L112","name":"MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable_range","line":108,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable_range\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_lt_of_countable_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_countable : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L104-L106","name":"MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable","line":104,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_eq_of_countable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L87-L102","name":"MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable_range","line":87,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_eq_of_countable_range\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_eq_of_countable_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_countable : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">τ</span></span>)</span>.Countable</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L67-L77","name":"MeasureTheory.IsStoppingTime.measurableSet_lt_of_pred","line":67,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_pred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_lt_of_pred\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_lt_of_pred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#PredOrder\">PredOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L63-L65","name":"MeasureTheory.IsStoppingTime.measurableSet_le","line":63,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime.measurableSet_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span>.<span class=\"name\">measurableSet_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hτ : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">{<span class=\"fn\">ω</span> : <span class=\"fn\">Ω</span> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">τ</span> <span class=\"fn\">ω</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L54-L55","name":"MeasureTheory.isStoppingTime_const","line":54,"kind":"theorem","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.isStoppingTime_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.isStoppingTime_const\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">isStoppingTime_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\">MeasureTheory.IsStoppingTime</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">Ω</span>) =&gt; <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Probability/Process/Stopping.lean#L51-L52","name":"MeasureTheory.IsStoppingTime","line":51,"kind":"def","docLink":"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime","doc":"A stopping time with respect to some filtration `f` is a function\n`τ` such that for all `i`, the preimage of `{j | j ≤ i}` along `τ` is measurable\nwith respect to `f i`.\n\nIntuitively, the stopping time `τ` describes some stopping rule such that at time\n`i`, we may determine it with the information we have at time `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Process/Stopping.html#MeasureTheory.IsStoppingTime\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsStoppingTime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">MeasureTheory.Filtration</a> <span class=\"fn\">ι</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}