{"name":"Mathlib.RepresentationTheory.Action.Concrete","instances":[{"typeNames":["CategoryTheory.Bundled.α","Prefunctor.obj"],"name":"Action.instMulAction","className":"MulAction"},{"typeNames":["CategoryTheory.Bundled.α","CategoryTheory.Bundled.α"],"name":"Action.instMulActionαMonoidFintypeVFintypeCatInstCategoryFintypeCatInstMonoidα","className":"MulAction"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"Action.instMulActionαFintypeVFintypeCatInstCategoryFintypeCatOfToMonoidToDivInvMonoid","className":"MulAction"}],"imports":["Init","Mathlib.CategoryTheory.FintypeCat","Mathlib.RepresentationTheory.Action.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L113-L114","name":"Action.instMulActionαFintypeVFintypeCatInstCategoryFintypeCatOfToMonoidToDivInvMonoid","line":113,"kind":"instance","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.instMulActionαFintypeVFintypeCatInstCategoryFintypeCatOfToMonoidToDivInvMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.instMulActionαFintypeVFintypeCatInstCategoryFintypeCatOfToMonoidToDivInvMonoid\"><span class=\"name\">Action</span>.<span class=\"name\">instMulActionαFintypeVFintypeCatInstCategoryFintypeCatOfToMonoidToDivInvMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat.of\">MonCat.of</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L112-L112","name":"Action.instMulActionαMonoidFintypeVFintypeCatInstCategoryFintypeCatInstMonoidα","line":112,"kind":"instance","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.instMulActionαMonoidFintypeVFintypeCatInstCategoryFintypeCatInstMonoidα","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.instMulActionαMonoidFintypeVFintypeCatInstCategoryFintypeCatInstMonoidα\"><span class=\"name\">Action</span>.<span class=\"name\">instMulActionαMonoidFintypeVFintypeCatInstCategoryFintypeCatInstMonoidα</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat\">MonCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">↑<span class=\"fn\">G</span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L99-L109","name":"Action.instMulAction","line":99,"kind":"instance","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.instMulAction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.instMulAction\"><span class=\"name\">Action</span>.<span class=\"name\">instMulAction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> (u + 1)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.LargeCategory\">CategoryTheory.LargeCategory</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat\">MonCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <span class=\"fn\">V</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <span class=\"fn\">V</span> <span class=\"fn\">G</span></span>)</span></span>)</span>.obj</span> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L89-L91","name":"Action.FintypeCat.ofMulAction_apply","line":89,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.FintypeCat.ofMulAction_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.FintypeCat.ofMulAction_apply\"><span class=\"name\">Action</span>.<span class=\"name\">FintypeCat</span>.<span class=\"name\">ofMulAction_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.FintypeCat.ofMulAction\">Action.FintypeCat.ofMulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>)</span>.ρ</span> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L83-L86","name":"Action.FintypeCat.ofMulAction","line":83,"kind":"def","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.FintypeCat.ofMulAction","doc":"Bundles a finite type `H` with a multiplicative action of `G` as an `Action`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.FintypeCat.ofMulAction\"><span class=\"name\">Action</span>.<span class=\"name\">FintypeCat</span>.<span class=\"name\">ofMulAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">↑<span class=\"fn\">H</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat.of\">MonCat.of</a> <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L75-L76","name":"Action.diagonalOneIsoLeftRegular","line":75,"kind":"def","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonalOneIsoLeftRegular","doc":"We have `fin 1 → G ≅ G` as `G`-sets, with `G` acting by left multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonalOneIsoLeftRegular\"><span class=\"name\">Action</span>.<span class=\"name\">diagonalOneIsoLeftRegular</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal\">Action.diagonal</a> <span class=\"fn\">G</span> <span class=\"fn\">1</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular\">Action.leftRegular</a> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L69-L70","name":"Action.diagonal","line":69,"kind":"def","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal","doc":"The `G`-set `Gⁿ`, acting on itself by left multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal\"><span class=\"name\">Action</span>.<span class=\"name\">diagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat.of\">MonCat.of</a> <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L68-L68","name":"Action.diagonal_V","line":68,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal_V","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal_V\"><span class=\"name\">Action</span>.<span class=\"name\">diagonal_V</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal\">Action.diagonal</a> <span class=\"fn\">G</span> <span class=\"fn\">n</span></span>)</span>.V</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L68-L68","name":"Action.diagonal_ρ_apply","line":68,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal_ρ_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal_ρ_apply\"><span class=\"name\">Action</span>.<span class=\"name\">diagonal_ρ_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat.of\">MonCat.of</a> <span class=\"fn\">G</span></span>)</span></span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal\">Action.diagonal</a> <span class=\"fn\">G</span> <span class=\"fn\">n</span></span>)</span>.ρ</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x_1</span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L62-L63","name":"Action.leftRegular","line":62,"kind":"def","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular","doc":"The `G`-set `G`, acting on itself by left multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular\"><span class=\"name\">Action</span>.<span class=\"name\">leftRegular</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat.of\">MonCat.of</a> <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L61-L61","name":"Action.leftRegular_V","line":61,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular_V","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular_V\"><span class=\"name\">Action</span>.<span class=\"name\">leftRegular_V</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular\">Action.leftRegular</a> <span class=\"fn\">G</span></span>)</span>.V</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L61-L61","name":"Action.leftRegular_ρ_apply","line":61,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular_ρ_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular_ρ_apply\"><span class=\"name\">Action</span>.<span class=\"name\">leftRegular_ρ_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat.of\">MonCat.of</a> <span class=\"fn\">G</span></span>)</span></span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular\">Action.leftRegular</a> <span class=\"fn\">G</span></span>)</span>.ρ</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L37-L56","name":"Action.ofMulActionLimitCone","line":37,"kind":"def","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.ofMulActionLimitCone","doc":"Given a family `F` of types with `G`-actions, this is the limit cone demonstrating that the\nproduct of `F` as types is a product in the category of `G`-sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.ofMulActionLimitCone\"><span class=\"name\">Action</span>.<span class=\"name\">ofMulActionLimitCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> (max v u))</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> (max v u)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.LimitCone\">CategoryTheory.Limits.LimitCone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functor\">CategoryTheory.Discrete.functor</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.ofMulAction\">Action.ofMulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L29-L31","name":"Action.ofMulAction_apply","line":29,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.ofMulAction_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.ofMulAction_apply\"><span class=\"name\">Action</span>.<span class=\"name\">ofMulAction_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.ofMulAction\">Action.ofMulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>)</span>.ρ</span> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/RepresentationTheory/Action/Concrete.lean#L22-L24","name":"Action.ofMulAction","line":22,"kind":"def","docLink":"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.ofMulAction","doc":"Bundles a type `H` with a multiplicative action of `G` as an `Action`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.ofMulAction\"><span class=\"name\">Action</span>.<span class=\"name\">ofMulAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat.of\">MonCat.of</a> <span class=\"fn\">G</span></span>)</span></span></div></div>"}]}