{"name":"Mathlib.RepresentationTheory.GroupCohomology.Resolution","instances":[{"typeNames":["HomologicalComplex.X"],"name":"groupCohomology.resolution.x_projective","className":"CategoryTheory.Projective"},{"typeNames":["groupCohomology.resolution.εToSingle₀"],"name":"groupCohomology.resolution.instQuasiIsoNatRepεToSingle₀","className":"QuasiIso"},{"typeNames":["Rep"],"name":"instEnoughProjectivesRep","className":"CategoryTheory.EnoughProjectives"}],"imports":["Init","Mathlib.Algebra.Category.ModuleCat.Projective","Mathlib.AlgebraicTopology.ExtraDegeneracy","Mathlib.CategoryTheory.Abelian.Ext","Mathlib.RepresentationTheory.Rep"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L655-L661","name":"groupCohomology.extIso","line":655,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.extIso","doc":"Given a `k`-linear `G`-representation `V`, `Extⁿ(k, V)` (where `k` is a trivial `k`-linear\n`G`-representation) is isomorphic to the `n`th cohomology group of `Hom(P, V)`, where `P` is the\nstandard resolution of `k` called `groupCohomology.resolution k G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.extIso\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">extIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(V : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Ext.html#Ext\">Ext</a> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">n</span></span>)</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span></span>)</span></span>)</span></span>)</span>.obj</span> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/HomologicalComplex.html#HomologicalComplex.homology\">HomologicalComplex.homology</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">groupCohomology.resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span>.linearYonedaObj</span> <span class=\"fn\">k</span> <span class=\"fn\">V</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L651-L653","name":"instEnoughProjectivesRep","line":651,"kind":"instance","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#instEnoughProjectivesRep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#instEnoughProjectivesRep\"><span class=\"name\">instEnoughProjectivesRep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.EnoughProjectives\">CategoryTheory.EnoughProjectives</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L647-L649","name":"groupCohomology.projectiveResolution","line":647,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.projectiveResolution","doc":"The standard projective resolution of `k` as a trivial `k`-linear `G`-representation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.projectiveResolution\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">projectiveResolution</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/ProjectiveResolution.html#CategoryTheory.ProjectiveResolution\">CategoryTheory.ProjectiveResolution</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L635-L637","name":"groupCohomology.resolution.instQuasiIsoNatRepεToSingle₀","line":635,"kind":"instance","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.instQuasiIsoNatRepεToSingle₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.instQuasiIsoNatRepεToSingle₀\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">instQuasiIsoNatRepεToSingle₀</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/QuasiIso.html#QuasiIso\">QuasiIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀\">groupCohomology.resolution.εToSingle₀</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L629-L633","name":"groupCohomology.resolution.quasiIso_forget₂_εToSingle₀","line":629,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.quasiIso_forget₂_εToSingle₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.quasiIso_forget₂_εToSingle₀\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">quasiIso_forget₂_εToSingle₀</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/QuasiIso.html#QuasiIso\">QuasiIso</a>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span></span>)</span></span>)</span>.mapHomologicalComplex</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.down\">ComplexShape.down</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>)</span>.map</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀\">groupCohomology.resolution.εToSingle₀</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L620-L627","name":"groupCohomology.resolution.εToSingle₀_comp_eq","line":620,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀_comp_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀_comp_eq\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">εToSingle₀_comp_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span></span>)</span></span>)</span>.mapHomologicalComplex</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.down\">ComplexShape.down</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>)</span>.map</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀\">groupCohomology.resolution.εToSingle₀</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/Additive.html#HomologicalComplex.singleMapHomologicalComplex\">HomologicalComplex.singleMapHomologicalComplex</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span></span>)</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.down\">ComplexShape.down</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span> <span class=\"fn\">0</span></span>)</span>.hom</span>.app</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv\">groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L614-L618","name":"groupCohomology.resolution.εToSingle₀","line":614,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀","doc":"The chain map from the standard resolution of `k` to `k[0]` given by `∑ nᵢgᵢ ↦ ∑ nᵢ` in\ndegree zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">εToSingle₀</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">groupCohomology.resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/Single.html#ChainComplex.single₀\">ChainComplex.single₀</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span>)</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L604-L612","name":"groupCohomology.resolution.d_comp_ε","line":604,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_comp_ε","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_comp_ε\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">d_comp_ε</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">groupCohomology.resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span>.d</span> <span class=\"fn\">1</span> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ε\">groupCohomology.resolution.ε</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L578-L602","name":"groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv_f_0_eq","line":578,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv_f_0_eq","doc":"The homotopy equivalence of complexes of `k`-modules between the standard resolution of `k` as\na trivial `G`-representation, and the complex which is `k` at 0 and 0 everywhere else, acts as\n`∑ nᵢgᵢ ↦ ∑ nᵢ : k[G¹] → k` at 0. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv_f_0_eq\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">forget₂ToModuleCatHomotopyEquiv_f_0_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv\">groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span>.hom</span>.f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span></span>)</span></span>)</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ε\">groupCohomology.resolution.ε</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L566-L573","name":"groupCohomology.resolution.ε","line":566,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ε","doc":"The hom of `k`-linear `G`-representations `k[G¹] → k` sending `∑ nᵢgᵢ ↦ ∑ nᵢ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ε\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">ε</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.ofMulAction\">Rep.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span> → <span class=\"fn\">G</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L553-L564","name":"groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv","line":553,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv","doc":"As a complex of `k`-modules, the standard resolution of the trivial `G`-representation `k` is\nhomotopy equivalent to the complex which is `k` at 0 and 0 elsewhere. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">forget₂ToModuleCatHomotopyEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/Homotopy.html#HomotopyEquiv\">HomotopyEquiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCat\">groupCohomology.resolution.forget₂ToModuleCat</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/Single.html#ChainComplex.single₀\">ChainComplex.single₀</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span></span>)</span></span>)</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span></span>)</span></span>)</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L541-L551","name":"groupCohomology.resolution.compForgetAugmentedIso","line":541,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.compForgetAugmentedIso","doc":"If we apply the free functor `Type u ⥤ ModuleCat.{u} k` to the universal cover of the\nclassifying space of `G` as a simplicial set, then take the alternating face map complex, the result\nis isomorphic to the standard resolution of the trivial `G`-representation `k` as a complex of\n`k`-modules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.compForgetAugmentedIso\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">compForgetAugmentedIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/AlternatingFaceMapComplex.html#AlgebraicTopology.AlternatingFaceMapComplex.obj\">AlgebraicTopology.AlternatingFaceMapComplex.obj</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.SimplicialObject.Augmented.drop</span>.obj</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented.toModule\">classifyingSpaceUniversalCover.compForgetAugmented.toModule</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCat\">groupCohomology.resolution.forget₂ToModuleCat</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L536-L539","name":"groupCohomology.resolution.forget₂ToModuleCat","line":536,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCat","doc":"The standard resolution of `k` as a trivial representation as a complex of `k`-modules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCat\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">forget₂ToModuleCat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#HomologicalComplex\">HomologicalComplex</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.down\">ComplexShape.down</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L517-L532","name":"groupCohomology.resolution.d_eq","line":517,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_eq","doc":"Simpler expression for the differential in the standard resolution of `k` as a\n`G`-representation. It sends `(g₀, ..., gₙ₊₁) ↦ ∑ (-1)ⁱ • (g₀, ..., ĝᵢ, ..., gₙ₊₁)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_eq\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">d_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">groupCohomology.resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span>.d</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">n</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d\">groupCohomology.resolution.d</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L508-L513","name":"groupCohomology.resolution.x_projective","line":508,"kind":"instance","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.x_projective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.x_projective\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">x_projective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">groupCohomology.resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span>.X</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L503-L506","name":"groupCohomology.resolution.xIso","line":503,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.xIso","doc":"The `n`th object of the standard resolution of `k` is definitionally isomorphic to `k[Gⁿ⁺¹]`\nequipped with the representation induced by the diagonal action of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.xIso\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">xIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">groupCohomology.resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span>.X</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.ofMulAction\">Rep.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L495-L499","name":"groupCohomology.resolution.d_of","line":495,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_of\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">d_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d\">groupCohomology.resolution.d</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">c</span> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">∑ <span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">p</span>.succAbove</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">-<span class=\"fn\">1</span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L485-L490","name":"groupCohomology.resolution.d","line":485,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d","doc":"The `k`-linear map underlying the differential in the standard resolution of `k` as a trivial\n`k`-linear `G`-representation. It sends `(g₀, ..., gₙ) ↦ ∑ (-1)ⁱ • (g₀, ..., ĝᵢ, ..., gₙ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">d</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L473-L477","name":"groupCohomology.resolution","line":473,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution","doc":"The standard resolution of `k` as a trivial representation, defined as the alternating\nface map complex of a simplicial `k`-linear `G`-representation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#ChainComplex\">ChainComplex</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L461-L467","name":"classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmentedToModule","line":461,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmentedToModule","doc":"If we augment the universal cover of the classifying space of `G` as a simplicial set by the\nmap from `Fin 1 → G` to the terminal object in `Type u`, then apply the free functor\n`Type u ⥤ ModuleCat.{u} k`, the resulting augmented simplicial `k`-module has an extra\ndegeneracy. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmentedToModule\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">extraDegeneracyCompForgetAugmentedToModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/ExtraDegeneracy.html#SimplicialObject.Augmented.ExtraDegeneracy\">SimplicialObject.Augmented.ExtraDegeneracy</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented.toModule\">classifyingSpaceUniversalCover.compForgetAugmented.toModule</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L455-L459","name":"classifyingSpaceUniversalCover.compForgetAugmented.toModule","line":455,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented.toModule","doc":"The free functor `Type u ⥤ ModuleCat.{u} k` applied to the universal cover of the classifying\nspace of `G` as a simplicial set, augmented by the map from `Fin 1 → G` to the terminal object\nin `Type u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented.toModule\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">compForgetAugmented</span>.<span class=\"name\">toModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L445-L453","name":"classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmented","line":445,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmented","doc":"The universal cover of the classifying space of `G` as a simplicial set, augmented by the map\nfrom `Fin 1 → G` to the terminal object in `Type u`, has an extra degeneracy. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmented\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">extraDegeneracyCompForgetAugmented</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/ExtraDegeneracy.html#SimplicialObject.Augmented.ExtraDegeneracy\">SimplicialObject.Augmented.ExtraDegeneracy</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented\">classifyingSpaceUniversalCover.compForgetAugmented</a> <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L437-L443","name":"classifyingSpaceUniversalCover.extraDegeneracyAugmentedCechNerve","line":437,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyAugmentedCechNerve","doc":"The augmented Čech nerve of the map from `Fin 1 → G` to the terminal object in `Type u` has an\nextra degeneracy. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyAugmentedCechNerve\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">extraDegeneracyAugmentedCechNerve</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/ExtraDegeneracy.html#SimplicialObject.Augmented.ExtraDegeneracy\">SimplicialObject.Augmented.ExtraDegeneracy</a>\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow.mk\">CategoryTheory.Arrow.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">G</span></span>)</span></span>)</span>.augmentedCechNerve</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L431-L435","name":"classifyingSpaceUniversalCover.compForgetAugmented","line":431,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented","doc":"The universal cover of the classifying space of `G` as a simplicial set, augmented by the map\nfrom `Fin 1 → G` to the terminal object in `Type u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">compForgetAugmented</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L420-L425","name":"classifyingSpaceUniversalCover.cechNerveTerminalFromIsoCompForget","line":420,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.cechNerveTerminalFromIsoCompForget","doc":"As a simplicial set, `cechNerveTerminalFrom` of a monoid `G` is isomorphic to the universal\ncover of the classifying space of `G` as a simplicial set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.cechNerveTerminalFromIsoCompForget\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">cechNerveTerminalFromIsoCompForget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.cechNerveTerminalFrom\">CategoryTheory.cechNerveTerminalFrom</a> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover\">classifyingSpaceUniversalCover</a> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat.of\">MonCat.of</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L410-L418","name":"classifyingSpaceUniversalCover.cechNerveTerminalFromIso","line":410,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.cechNerveTerminalFromIso","doc":"When the category is `G`-Set, `cechNerveTerminalFrom` of `G` with the left regular action is\nisomorphic to `EG`, the universal cover of the classifying space of `G` as a simplicial `G`-set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.cechNerveTerminalFromIso\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">cechNerveTerminalFromIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.cechNerveTerminalFrom\">CategoryTheory.cechNerveTerminalFrom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.ofMulAction\">Action.ofMulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">G</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover\">classifyingSpaceUniversalCover</a> <span class=\"fn\">G</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L394-L402","name":"classifyingSpaceUniversalCover","line":394,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover","doc":"The simplicial `G`-set sending `[n]` to `Gⁿ⁺¹` equipped with the diagonal action of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover\"><span class=\"name\">classifyingSpaceUniversalCover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Basic.html#Action\">Action</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/MonCat/Basic.html#MonCat.of\">MonCat.of</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L379-L388","name":"Rep.diagonalHomEquiv_symm_partialProd_succ","line":379,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_symm_partialProd_succ","doc":"Auxiliary lemma for defining group cohomology, used to show that the isomorphism\n`diagonalHomEquiv` commutes with the differentials in two complexes which compute\ngroup cohomology. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_symm_partialProd_succ\"><span class=\"name\">Rep</span>.<span class=\"name\">diagonalHomEquiv_symm_partialProd_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">A</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv\">Rep.diagonalHomEquiv</a> <span class=\"fn\">n</span> <span class=\"fn\">A</span></span>)</span>.symm</span> <span class=\"fn\">f</span></span>)</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.succ</span>.succAbove</span></span>)</span> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.contractNth</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">g</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L343-L374","name":"Rep.diagonalHomEquiv_symm_apply","line":343,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_symm_apply","doc":"Given a `k`-linear `G`-representation `A`, `diagonalHomEquiv` is a `k`-linear isomorphism of\nthe set of representation morphisms `Hom(k[Gⁿ⁺¹], A)` with `Fun(Gⁿ, A)`. This lemma says that the\ninverse map sends a function `f : Gⁿ → A` to the representation morphism sending\n`(g₀, ... gₙ) ↦ ρ(g₀)(f(g₀⁻¹g₁, g₁⁻¹g₂, ..., gₙ₋₁⁻¹gₙ))`, where `ρ` is the representation attached\nto `A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_symm_apply\"><span class=\"name\">Rep</span>.<span class=\"name\">diagonalHomEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">A</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv\">Rep.diagonalHomEquiv</a> <span class=\"fn\">n</span> <span class=\"fn\">A</span></span>)</span>.symm</span> <span class=\"fn\">f</span></span>)</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">x</span> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.ρ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">0</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">i</span>.castSucc</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">i</span>.succ</span></span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L326-L336","name":"Rep.diagonalHomEquiv_apply","line":326,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_apply","doc":"Given a `k`-linear `G`-representation `A`, `diagonalHomEquiv` is a `k`-linear isomorphism of\nthe set of representation morphisms `Hom(k[Gⁿ⁺¹], A)` with `Fun(Gⁿ, A)`. This lemma says that this\nsends a morphism of representations `f : k[Gⁿ⁺¹] ⟶ A` to the function\n`(g₁, ..., gₙ) ↦ f(1, g₁, g₁g₂, ..., g₁g₂...gₙ).` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_apply\"><span class=\"name\">Rep</span>.<span class=\"name\">diagonalHomEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.ofMulAction\">Rep.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv\">Rep.diagonalHomEquiv</a> <span class=\"fn\">n</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L310-L318","name":"Rep.diagonalHomEquiv","line":310,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv","doc":"Given a `k`-linear `G`-representation `A`, the set of representation morphisms\n`Hom(k[Gⁿ⁺¹], A)` is `k`-linearly isomorphic to the set of functions `Gⁿ → A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv\"><span class=\"name\">Rep</span>.<span class=\"name\">diagonalHomEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.ofMulAction\">Rep.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">A</span></span>)</span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">A</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L296-L298","name":"groupCohomology.resolution.ofMulAction_free","line":296,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulAction_free","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulAction_free\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">ofMulAction_free</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/FreeModule/Basic.html#Module.Free\">Module.Free</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/MonoidAlgebra/Basic.html#MonoidAlgebra\">MonoidAlgebra</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Basic.html#Representation.ofMulAction\">Representation.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span>)</span>.asModule</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L287-L294","name":"groupCohomology.resolution.ofMulActionBasis","line":287,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulActionBasis","doc":"A `k[G]`-basis of `k[Gⁿ⁺¹]`, coming from the `k[G]`-linear isomorphism\n`k[G] ⊗ₖ k[Gⁿ] ≃ k[Gⁿ⁺¹].` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulActionBasis\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">ofMulActionBasis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/MonoidAlgebra/Basic.html#MonoidAlgebra\">MonoidAlgebra</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Basic.html#Representation.ofMulAction\">Representation.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span>)</span>.asModule</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L260-L285","name":"groupCohomology.resolution.ofMulActionBasisAux","line":260,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulActionBasisAux","doc":"The `k[G]`-linear isomorphism `k[G] ⊗ₖ k[Gⁿ] ≃ k[Gⁿ⁺¹]`, where the `k[G]`-module structure on\nthe lefthand side is `TensorProduct.leftModule`, whilst that of the righthand side comes from\n`Representation.asModule`. Allows us to use `Algebra.TensorProduct.basis` to get a `k[G]`-basis\nof the righthand side. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulActionBasisAux\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">ofMulActionBasisAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct\">TensorProduct</a> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/MonoidAlgebra/Basic.html#MonoidAlgebra\">MonoidAlgebra</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/MonoidAlgebra/Basic.html#MonoidAlgebra\">MonoidAlgebra</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Basic.html#Representation.ofMulAction\">Representation.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span>)</span>.asModule</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L234-L252","name":"groupCohomology.resolution.diagonalSucc_inv_single_right","line":234,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_right\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc_inv_single_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\">groupCohomology.resolution.diagonalSucc</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span></span>)</span>.inv</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">⊗ₜ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">f</span> <span class=\"fn\">r</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.lift\">Finsupp.lift</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">f</span></span></span>)</span> <span class=\"fn\">r</span></span></span></span>)</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L213-L232","name":"groupCohomology.resolution.diagonalSucc_inv_single_left","line":213,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_left\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc_inv_single_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\">groupCohomology.resolution.diagonalSucc</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span></span>)</span>.inv</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">g</span> <span class=\"fn\">r</span></span> <a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">⊗ₜ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">]</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Finsupp.html#Finsupp.lift\">Finsupp.lift</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">f</span></span></span>)</span> <span class=\"fn\">r</span></span></span></span>)</span>\n    <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L193-L211","name":"groupCohomology.resolution.diagonalSucc_inv_single_single","line":193,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_single","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_single\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc_inv_single_single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\">groupCohomology.resolution.diagonalSucc</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span></span>)</span>.inv</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">⊗ₜ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">f</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L170-L191","name":"groupCohomology.resolution.diagonalSucc_hom_single","line":170,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_hom_single","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_hom_single\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc_hom_single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\">groupCohomology.resolution.diagonalSucc</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span></span>)</span>.hom</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">1</span></span> <a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">⊗ₜ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.castSucc</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.succ</span></span></span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L158-L166","name":"groupCohomology.resolution.diagonalSucc","line":158,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc","doc":"An isomorphism of `k`-linear representations of `G` from `k[Gⁿ⁺¹]` to `k[G] ⊗ₖ k[Gⁿ]` (on\nwhich `G` acts by `ρ(g₁)(g₂ ⊗ x) = (g₁ * g₂) ⊗ x`) sending `(g₀, ..., gₙ)` to\n`g₀ ⊗ (g₀⁻¹g₁, g₁⁻¹g₂, ..., gₙ₋₁⁻¹gₙ)`. The inverse sends `g₀ ⊗ (g₁, ..., gₙ)` to\n`(g₀, g₀g₁, ..., g₀g₁...gₙ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.diagonal\">Rep.diagonal</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.leftRegular\">Rep.leftRegular</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L125-L150","name":"groupCohomology.resolution.actionDiagonalSucc_inv_apply","line":125,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc_inv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc_inv_apply\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">actionDiagonalSucc_inv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc\">groupCohomology.resolution.actionDiagonalSucc</a> <span class=\"fn\">G</span> <span class=\"fn\">n</span></span>)</span>.inv</span>.hom</span> <span class=\"fn\">(<span class=\"fn\">g</span>, <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L107-L123","name":"groupCohomology.resolution.actionDiagonalSucc_hom_apply","line":107,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc_hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc_hom_apply\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">actionDiagonalSucc_hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc\">groupCohomology.resolution.actionDiagonalSucc</a> <span class=\"fn\">G</span> <span class=\"fn\">n</span></span>)</span>.hom</span>.hom</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span>, <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.castSucc</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.succ</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L92-L105","name":"groupCohomology.resolution.actionDiagonalSucc","line":92,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc","doc":"An isomorphism of `G`-sets `Gⁿ⁺¹ ≅ G × Gⁿ`, where `G` acts by left multiplication on `Gⁿ⁺¹` and\n`G` but trivially on `Gⁿ`. The map sends `(g₀, ..., gₙ) ↦ (g₀, (g₀⁻¹g₁, g₁⁻¹g₂, ..., gₙ₋₁⁻¹gₙ))`,\nand the inverse is `(g₀, (g₁, ..., gₙ)) ↦ (g₀, g₀g₁, g₀g₁g₂, ..., g₀g₁...gₙ).` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">actionDiagonalSucc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.diagonal\">Action.diagonal</a> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Action/Concrete.html#Action.leftRegular\">Action.leftRegular</a> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">V</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>, <span class=\"fn\">ρ</span> := <span class=\"fn\">1</span> }</span></span></span></div></div>"}]}