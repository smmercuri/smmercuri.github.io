{"name":"Mathlib.RingTheory.Regular.RegularSequence","instances":[],"imports":["Init","Mathlib.RingTheory.Regular.IsSMulRegular","Mathlib.RingTheory.Artinian","Mathlib.Logic.Equiv.TransferInstance","Mathlib.RingTheory.LocalRing.MaximalIdeal.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L661-L670","name":"LocalRing.isRegular_of_perm","line":661,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#LocalRing.isRegular_of_perm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#LocalRing.isRegular_of_perm\"><span class=\"name\">LocalRing</span>.<span class=\"name\">isRegular_of_perm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/Defs.html#LocalRing\">LocalRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Noetherian.html#IsNoetherian\">IsNoetherian</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rs</span>.Perm</span> <span class=\"fn\">rs'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L654-L659","name":"LocalRing.isWeaklyRegular_of_perm_of_subset_maximalIdeal","line":654,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#LocalRing.isWeaklyRegular_of_perm_of_subset_maximalIdeal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#LocalRing.isWeaklyRegular_of_perm_of_subset_maximalIdeal\"><span class=\"name\">LocalRing</span>.<span class=\"name\">isWeaklyRegular_of_perm_of_subset_maximalIdeal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/Defs.html#LocalRing\">LocalRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Noetherian.html#IsNoetherian\">IsNoetherian</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rs</span>.Perm</span> <span class=\"fn\">rs'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h3 : <span class=\"fn\">∀ <span class=\"fn\">r</span> ∈ <span class=\"fn\">rs</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/MaximalIdeal/Defs.html#LocalRing.maximalIdeal\">LocalRing.maximalIdeal</a> <span class=\"fn\">R</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L646-L652","name":"RingTheory.Sequence.IsRegular.of_perm_of_subset_jacobson_annihilator","line":646,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.of_perm_of_subset_jacobson_annihilator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.of_perm_of_subset_jacobson_annihilator\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">of_perm_of_subset_jacobson_annihilator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Noetherian.html#IsNoetherian\">IsNoetherian</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rs</span>.Perm</span> <span class=\"fn\">rs'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h3 : <span class=\"fn\">∀ <span class=\"fn\">r</span> ∈ <span class=\"fn\">rs</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Operations.html#Module.annihilator\">Module.annihilator</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span>.jacobson</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L629-L642","name":"RingTheory.Sequence.IsWeaklyRegular.of_perm_of_subset_jacobson_annihilator","line":629,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.of_perm_of_subset_jacobson_annihilator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.of_perm_of_subset_jacobson_annihilator\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">of_perm_of_subset_jacobson_annihilator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Noetherian.html#IsNoetherian\">IsNoetherian</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rs</span>.Perm</span> <span class=\"fn\">rs'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h3 : <span class=\"fn\">∀ <span class=\"fn\">r</span> ∈ <span class=\"fn\">rs</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Operations.html#Module.annihilator\">Module.annihilator</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span>.jacobson</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L602-L625","name":"RingTheory.Sequence.IsWeaklyRegular.prototype_perm.aux","line":602,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.prototype_perm.aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.prototype_perm.aux\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">prototype_perm</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">R</span>) (<span class=\"fn\">rs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs'</span></span></span>)</span>.Subperm</span> <span class=\"fn\">rs</span></span> →\n    <span class=\"fn\">let <span class=\"fn\">K</span> := <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Torsion.html#Submodule.torsionBy\">Submodule.torsionBy</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs'</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <span class=\"fn\">b</span></span>;\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">K</span></span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs₀ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rs₁</span>.Perm</span> <span class=\"fn\">rs₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">rs₀</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rs₁</span></span>)</span>.Subperm</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H₃ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">rs₀</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rs₂</span></span>)</span>.Subperm</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs₀</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <span class=\"fn\">rs₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs₀</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <span class=\"fn\">rs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L595-L625","name":"RingTheory.Sequence.IsWeaklyRegular.prototype_perm","line":595,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.prototype_perm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.prototype_perm\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">prototype_perm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h'' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rs</span>.Perm</span> <span class=\"fn\">rs'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">R</span>) (<span class=\"fn\">rs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs'</span></span></span>)</span>.Subperm</span> <span class=\"fn\">rs</span></span> →\n    <span class=\"fn\">let <span class=\"fn\">K</span> := <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Torsion.html#Submodule.torsionBy\">Submodule.torsionBy</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs'</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <span class=\"fn\">b</span></span>;\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">K</span></span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L552-L568","name":"RingTheory.Sequence.map_first_exact_on_four_term_right_exact_of_isSMulRegular_last","line":552,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.map_first_exact_on_four_term_right_exact_of_isSMulRegular_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.map_first_exact_on_four_term_right_exact_of_isSMulRegular_last\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">map_first_exact_on_four_term_right_exact_of_isSMulRegular_last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₄ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₄</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₄</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₁ : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₂ : <span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f₃ : <span class=\"fn\"><span class=\"fn\">M₃</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\">M₄</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Exact.html#Function.Exact\">Function.Exact</a> <span class=\"fn\">⇑<span class=\"fn\">f₁</span></span> <span class=\"fn\">⇑<span class=\"fn\">f₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂₃ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Exact.html#Function.Exact\">Function.Exact</a> <span class=\"fn\">⇑<span class=\"fn\">f₂</span></span> <span class=\"fn\">⇑<span class=\"fn\">f₃</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₃ : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">f₃</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₄ : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M₄</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Exact.html#Function.Exact\">Function.Exact</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span>.mapQ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span> <span class=\"fn\">f₁</span> <span class=\"fn\">⋯</span></span>)</span></span>\n  <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span>.mapQ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span> <span class=\"fn\">f₂</span> <span class=\"fn\">⋯</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L542-L549","name":"RingTheory.Sequence.IsWeaklyRegular.isWeaklyRegular_rTensor","line":542,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.isWeaklyRegular_rTensor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.isWeaklyRegular_rTensor\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">isWeaklyRegular_rTensor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Flat/Basic.html#Module.Flat\">Module.Flat</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct\">TensorProduct</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">rs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L533-L540","name":"RingTheory.Sequence.IsWeaklyRegular.isWeaklyRegular_lTensor","line":533,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.isWeaklyRegular_lTensor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.isWeaklyRegular_lTensor\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">isWeaklyRegular_lTensor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Flat/Basic.html#Module.Flat\">Module.Flat</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct\">TensorProduct</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L523-L531","name":"RingTheory.Sequence.eq_nil_of_isRegular_on_artinian","line":523,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.eq_nil_of_isRegular_on_artinian","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.eq_nil_of_isRegular_on_artinian\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">eq_nil_of_isRegular_on_artinian</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Artinian.html#IsArtinian\">IsArtinian</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> → <span class=\"fn\"><span class=\"fn\">rs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L513-L520","name":"LocalRing.isRegular_iff_isWeaklyRegular_of_subset_maximalIdeal","line":513,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#LocalRing.isRegular_iff_isWeaklyRegular_of_subset_maximalIdeal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#LocalRing.isRegular_iff_isWeaklyRegular_of_subset_maximalIdeal\"><span class=\"name\">LocalRing</span>.<span class=\"name\">isRegular_iff_isWeaklyRegular_of_subset_maximalIdeal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/Defs.html#LocalRing\">LocalRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ <span class=\"fn\">r</span> ∈ <span class=\"fn\">rs</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/MaximalIdeal/Defs.html#LocalRing.maximalIdeal\">LocalRing.maximalIdeal</a> <span class=\"fn\">R</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L506-L511","name":"RingTheory.Sequence.isRegular_iff_isWeaklyRegular_of_subset_jacobson_annihilator","line":506,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isRegular_iff_isWeaklyRegular_of_subset_jacobson_annihilator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isRegular_iff_isWeaklyRegular_of_subset_jacobson_annihilator\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isRegular_iff_isWeaklyRegular_of_subset_jacobson_annihilator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Finiteness.html#Module.Finite\">Module.Finite</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ <span class=\"fn\">r</span> ∈ <span class=\"fn\">rs</span>, <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Operations.html#Module.annihilator\">Module.annihilator</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span>.jacobson</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L500-L502","name":"RingTheory.Sequence.IsRegular.nontrivial","line":500,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.nontrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.nontrivial\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">nontrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L495-L498","name":"RingTheory.Sequence.IsRegular.quot_ofList_smul_nontrivial","line":495,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.quot_ofList_smul_nontrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.quot_ofList_smul_nontrivial\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">quot_ofList_smul_nontrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">N</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L477-L493","name":"RingTheory.Sequence.IsRegular.ndrecIterModByRegularWithRing","line":477,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.ndrecIterModByRegularWithRing","doc":"A simplified version of `IsRegular.recIterModByRegularWithRing` where the\nmotive is not allowed to depend on the proof of `IsRegular`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.ndrecIterModByRegularWithRing\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">ndrecIterModByRegularWithRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] → <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_7</span></span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u) →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] →\n    <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_3</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">[]</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u} →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] →\n    <span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v} →\n      <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] →\n        <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] →\n          <span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) →\n            <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) →\n              <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span> →\n                <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span> →\n                  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span> →\n                    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span></span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L452-L473","name":"RingTheory.Sequence.IsRegular.recIterModByRegularWithRing","line":452,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.recIterModByRegularWithRing","doc":"An alternate induction principle from `IsRegular.recIterModByRegular` where\nwe mod out by successive elements in both the module and the base ring. This is\nuseful for propogating certain properties of the initial `M`, e.g. faithfulness\nor freeness, throughout the induction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.recIterModByRegularWithRing\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">recIterModByRegularWithRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u) →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] →\n    <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) →\n      <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_7</span></span></span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u) →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] →\n    <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_3</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">[]</span> <span class=\"fn\">⋯</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u} →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] →\n    <span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v} →\n      <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] →\n        <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] →\n          <span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) →\n            <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) →\n              <span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span>) →\n                <span class=\"fn\">(<span class=\"fn\">h2</span> :\n                    <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span>\n                      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span>) →\n                  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span>\n                      <span class=\"fn\">h2</span></span> →\n                    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span> <span class=\"fn\">⋯</span></span></span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">rs</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L439-L446","name":"RingTheory.Sequence.IsRegular.ndrecIterModByRegular","line":439,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.ndrecIterModByRegular","doc":"A simplified version of `IsRegular.recIterModByRegular` where the motive is\nnot allowed to depend on the proof of `IsRegular`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.ndrecIterModByRegular\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">ndrecIterModByRegular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_7</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">[]</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v} →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] →\n    <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] →\n      <span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) →\n        <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) →\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span> →\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L419-L435","name":"RingTheory.Sequence.IsRegular.recIterModByRegular","line":419,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.recIterModByRegular","doc":"Regular sequences can be inductively characterized by:\n* The empty sequence is regular on any nonzero module.\n* If `r` is regular on `M` and `rs` is a regular sequence on `M⧸rM` then the\nsequence obtained from `rs` by prepending `r` is regular on `M`.\n\nThis is the induction principle produced by the inductive definition above.\nThe motive will usually be valued in `Prop`, but `Sort*` works too. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.recIterModByRegular\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">recIterModByRegular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_7</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">[]</span> <span class=\"fn\">⋯</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v} →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] →\n    <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] →\n      <span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) →\n        <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) →\n          <span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span>) →\n            <span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span>) →\n              <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span> <span class=\"fn\">h2</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span> <span class=\"fn\">⋯</span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">rs</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L406-L409","name":"RingTheory.Sequence.IsRegular.cons'","line":406,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.cons'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.cons'\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">cons'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L402-L404","name":"RingTheory.Sequence.IsRegular.cons","line":402,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.cons\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L396-L400","name":"RingTheory.Sequence.IsRegular.nil","line":396,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.nil\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L383-L389","name":"RingTheory.Sequence.isWeaklyRegular_append_iff'","line":383,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_append_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_append_iff'\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isWeaklyRegular_append_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">rs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rs₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs₁</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs₁</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs₂</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L369-L381","name":"RingTheory.Sequence.isWeaklyRegular_append_iff","line":369,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_append_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_append_iff\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isWeaklyRegular_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">rs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rs₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs₁</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <span class=\"fn\">rs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L365-L367","name":"RingTheory.Sequence.isWeaklyRegular_singleton_iff","line":365,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_singleton_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_singleton_iff\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isWeaklyRegular_singleton_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">[<span class=\"fn\">r</span>]</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L343-L357","name":"RingTheory.Sequence.IsWeaklyRegular.ndrecWithRing","line":343,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.ndrecWithRing","doc":"A simplified version of `IsWeaklyRegular.recIterModByRegularWithRing` where\nthe motive is not allowed to depend on the proof of `IsWeaklyRegular`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.ndrecWithRing\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">ndrecWithRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] → <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_7</span></span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] → <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">[]</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u} →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] →\n    <span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v} →\n      <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] →\n        <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] →\n          <span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) →\n            <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) →\n              <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span> →\n                <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span>\n                    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span> →\n                  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span> →\n                    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span></span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L321-L339","name":"RingTheory.Sequence.IsWeaklyRegular.recIterModByRegularWithRing","line":321,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.recIterModByRegularWithRing","doc":"An alternate induction principle from `IsWeaklyRegular.recIterModByRegular`\nwhere we mod out by successive elements in both the module and the base ring.\nThis is useful for propogating certain properties of the initial `M`, e.g.\nfaithfulness or freeness, throughout the induction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.recIterModByRegularWithRing\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">recIterModByRegularWithRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u) →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] →\n    <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) →\n      <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] →\n        <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_7</span></span></span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] → <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">[]</span> <span class=\"fn\">⋯</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u} →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] →\n    <span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v} →\n      <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] →\n        <span class=\"fn\">[<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] →\n          <span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) →\n            <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) →\n              <span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span>) →\n                <span class=\"fn\">(<span class=\"fn\">h2</span> :\n                    <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span>\n                      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span>) →\n                  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span>\n                      <span class=\"fn\">h2</span></span> →\n                    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span> <span class=\"fn\">⋯</span></span></span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">rs</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L307-L315","name":"RingTheory.Sequence.IsWeaklyRegular.ndrecIterModByRegular","line":307,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.ndrecIterModByRegular","doc":"A simplified version of `IsWeaklyRegular.recIterModByRegular` where the\nmotive is not allowed to depend on the proof of `IsWeaklyRegular`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.ndrecIterModByRegular\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">ndrecIterModByRegular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_7</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">[]</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v} →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] →\n    <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] →\n      <span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) →\n        <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) →\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span> →\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L290-L303","name":"RingTheory.Sequence.IsWeaklyRegular.recIterModByRegular","line":290,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.recIterModByRegular","doc":"Weakly regular sequences can be inductively characterized by:\n* The empty sequence is weakly regular on any module.\n* If `r` is regular on `M` and `rs` is a weakly regular sequence on `M⧸rM` then\nthe sequence obtained from `rs` by prepending `r` is weakly regular on `M`.\n\nThis is the induction principle produced by the inductive definition above.\nThe motive will usually be valued in `Prop`, but `Sort*` works too. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.recIterModByRegular\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">recIterModByRegular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_7</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">[]</span> <span class=\"fn\">⋯</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> v} →\n  <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>] →\n    <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>] →\n      <span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) →\n        <span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>) →\n          <span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span>) →\n            <span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span>) →\n              <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span> <span class=\"fn\">h2</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span> <span class=\"fn\">⋯</span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">M</span> <span class=\"fn\">rs</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L276-L280","name":"RingTheory.Sequence.IsWeaklyRegular.cons'","line":276,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.cons'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.cons'\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">cons'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L272-L274","name":"RingTheory.Sequence.IsWeaklyRegular.cons","line":272,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.cons\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L269-L270","name":"RingTheory.Sequence.IsWeaklyRegular.nil","line":269,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.nil\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L255-L262","name":"RingTheory.Sequence.isRegular_cons_iff'","line":255,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isRegular_cons_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isRegular_cons_iff'\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isRegular_cons_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L249-L253","name":"RingTheory.Sequence.isRegular_cons_iff","line":249,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isRegular_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isRegular_cons_iff\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isRegular_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L240-L246","name":"RingTheory.Sequence.isWeaklyRegular_cons_iff'","line":240,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_cons_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_cons_iff'\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isWeaklyRegular_cons_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Quotient.html#Ideal.Quotient.mk\">Ideal.Quotient.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L230-L238","name":"RingTheory.Sequence.isWeaklyRegular_cons_iff","line":230,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_cons_iff\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isWeaklyRegular_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">rs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L219-L224","name":"RingTheory.Sequence.isWeaklyRegular_map_algebraMap_iff","line":219,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_map_algebraMap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_map_algebraMap_iff\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isWeaklyRegular_map_algebraMap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#algebraMap\">algebraMap</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span></span>)</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L213-L215","name":"LinearEquiv.isRegular_congr","line":213,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#LinearEquiv.isRegular_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#LinearEquiv.isRegular_congr\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">isRegular_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M₂</span> <span class=\"fn\">rs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L208-L211","name":"LinearEquiv.isRegular_congr'","line":208,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#LinearEquiv.isRegular_congr'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#LinearEquiv.isRegular_congr'\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">isRegular_congr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">S</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ' : <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/CompTypeclasses.html#RingHomInvPair\">RingHomInvPair</a> <span class=\"fn\">σ</span> <span class=\"fn\">σ'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/CompTypeclasses.html#RingHomInvPair\">RingHomInvPair</a> <span class=\"fn\">σ'</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₛₗ[</a><span class=\"fn\">σ</span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">σ</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L199-L206","name":"AddEquiv.isRegular_congr","line":199,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#AddEquiv.isRegular_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#AddEquiv.isRegular_congr\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">isRegular_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">S</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Forall₂\">List.Forall₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">S</span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">x</span></span></span></span></span></span>)</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">as</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M₂</span> <span class=\"fn\">bs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L195-L197","name":"LinearEquiv.isWeaklyRegular_congr","line":195,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#LinearEquiv.isWeaklyRegular_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#LinearEquiv.isWeaklyRegular_congr\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">isWeaklyRegular_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M₂</span> <span class=\"fn\">rs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L190-L193","name":"LinearEquiv.isWeaklyRegular_congr'","line":190,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#LinearEquiv.isWeaklyRegular_congr'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#LinearEquiv.isWeaklyRegular_congr'\"><span class=\"name\">LinearEquiv</span>.<span class=\"name\">isWeaklyRegular_congr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">S</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ' : <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/CompTypeclasses.html#RingHomInvPair\">RingHomInvPair</a> <span class=\"fn\">σ</span> <span class=\"fn\">σ'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/CompTypeclasses.html#RingHomInvPair\">RingHomInvPair</a> <span class=\"fn\">σ'</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₛₗ[</a><span class=\"fn\">σ</span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">σ</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L178-L188","name":"AddEquiv.isWeaklyRegular_congr","line":178,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#AddEquiv.isWeaklyRegular_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#AddEquiv.isWeaklyRegular_congr\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">isWeaklyRegular_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">S</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Forall₂\">List.Forall₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">R</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">S</span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">x</span></span></span></span></span></span>)</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">as</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M₂</span> <span class=\"fn\">bs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L149-L149","name":"RingTheory.Sequence.IsRegular.top_ne_smul","line":149,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.top_ne_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.top_ne_smul\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">top_ne_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L148-L148","name":"RingTheory.Sequence.IsRegular.mk","line":148,"kind":"ctor","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular.mk\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toIsWeaklyRegular : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top_ne_smul : <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L148-L149","name":"RingTheory.Sequence.IsRegular","line":148,"kind":"structure","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular","doc":"A weakly regular sequence `rs` on `M` is regular if also `M/rsM ≠ 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsRegular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L147-L147","name":"RingTheory.Sequence.isRegular_iff","line":147,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isRegular_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isRegular_iff\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isRegular_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsRegular\">RingTheory.Sequence.IsRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L141-L144","name":"RingTheory.Sequence.isWeaklyRegular_iff_Fin","line":141,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_iff_Fin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_iff_Fin\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isWeaklyRegular_iff_Fin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">rs</span>.length</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">i</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rs</span>.get</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L138-L138","name":"RingTheory.Sequence.IsWeaklyRegular.regular_mod_prev","line":138,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.regular_mod_prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.regular_mod_prev\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">regular_mod_prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">rs</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <span class=\"fn\"><span class=\"fn\">rs</span>[<span class=\"fn\">i</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L137-L137","name":"RingTheory.Sequence.IsWeaklyRegular.mk","line":137,"kind":"ctor","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular.mk\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(regular_mod_prev : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">rs</span>.length</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <span class=\"fn\"><span class=\"fn\">rs</span>[<span class=\"fn\">i</span>]</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L137-L139","name":"RingTheory.Sequence.IsWeaklyRegular","line":137,"kind":"structure","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular","doc":"A sequence `[r₁, …, rₙ]` is weakly regular on `M` iff `rᵢ` is regular on\n`M⧸(r₁, …, rᵢ₋₁)M` for all `1 ≤ i ≤ n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">IsWeaklyRegular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L136-L136","name":"RingTheory.Sequence.isWeaklyRegular_iff","line":136,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.isWeaklyRegular_iff\"><span class=\"name\">RingTheory</span>.<span class=\"name\">Sequence</span>.<span class=\"name\">isWeaklyRegular_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#RingTheory.Sequence.IsWeaklyRegular\">RingTheory.Sequence.IsWeaklyRegular</a> <span class=\"fn\">M</span> <span class=\"fn\">rs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">rs</span>.length</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Regular/SMul.html#IsSMulRegular\">IsSMulRegular</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <span class=\"fn\"><span class=\"fn\">rs</span>[<span class=\"fn\">i</span>]</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L103-L107","name":"Submodule.top_eq_ofList_cons_smul_iff","line":103,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.top_eq_ofList_cons_smul_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.top_eq_ofList_cons_smul_iff\"><span class=\"name\">Submodule</span>.<span class=\"name\">top_eq_ofList_cons_smul_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L96-L101","name":"Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner_naturality","line":96,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner_naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner_naturality\"><span class=\"name\">Submodule</span>.<span class=\"name\">quotOfListConsSMulTopEquivQuotSMulTopInner_naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner\">Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner</a> <span class=\"fn\">M₂</span> <span class=\"fn\">r</span> <span class=\"fn\">rs</span></span>)</span></span> ∘ₗ\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span>.mapQ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">⋯</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span>.mapQ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop.map\">QuotSMulTop.map</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">⋯</span></span> ∘ₗ\n    <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner\">Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner</a> <span class=\"fn\">M</span> <span class=\"fn\">r</span> <span class=\"fn\">rs</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L87-L92","name":"Submodule.quotOfListConsSMulTopEquivQuotSMulTopOuter","line":87,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.quotOfListConsSMulTopEquivQuotSMulTopOuter","doc":"The equivalence between M ⧸ (r₀, r₁, …, rₙ)M and (M ⧸ (r₁, …, rₙ)) ⧸ r₀ (M ⧸ (r₁, …, rₙ)). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.quotOfListConsSMulTopEquivQuotSMulTopOuter\"><span class=\"name\">Submodule</span>.<span class=\"name\">quotOfListConsSMulTopEquivQuotSMulTopOuter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L79-L84","name":"Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner","line":79,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner","doc":"The equivalence between M ⧸ (r₀, r₁, …, rₙ)M and (M ⧸ r₀M) ⧸ (r₁, …, rₙ) (M ⧸ r₀M). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.quotOfListConsSMulTopEquivQuotSMulTopInner\"><span class=\"name\">Submodule</span>.<span class=\"name\">quotOfListConsSMulTopEquivQuotSMulTopInner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span>)</span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/QuotSMulTop.html#QuotSMulTop\">QuotSMulTop</a> <span class=\"fn\">r</span> <span class=\"fn\">M</span></span> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L69-L73","name":"Submodule.smul_top_le_comap_smul_top","line":69,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.smul_top_le_comap_smul_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Submodule.smul_top_le_comap_smul_top\"><span class=\"name\">Submodule</span>.<span class=\"name\">smul_top_le_comap_smul_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal\">Ideal</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Map.html#Submodule.comap\">Submodule.comap</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L60-L63","name":"Ideal.ofList_cons_smul","line":60,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_cons_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_cons_smul\"><span class=\"name\">Ideal</span>.<span class=\"name\">ofList_cons_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">N</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">N</span></span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">N</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L55-L58","name":"Ideal.map_ofList","line":55,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.map_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.map_ofList\"><span class=\"name\">Ideal</span>.<span class=\"name\">map_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Maps.html#Ideal.map\">Ideal.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">rs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L51-L53","name":"Ideal.ofList_cons","line":51,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_cons\"><span class=\"name\">Ideal</span>.<span class=\"name\">ofList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">rs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L48-L49","name":"Ideal.ofList_singleton","line":48,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_singleton\"><span class=\"name\">Ideal</span>.<span class=\"name\">ofList_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">[<span class=\"fn\">r</span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">r</span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L43-L46","name":"Ideal.ofList_append","line":43,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_append\"><span class=\"name\">Ideal</span>.<span class=\"name\">ofList_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">rs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rs₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs₁</span></span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">rs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L39-L41","name":"Ideal.ofList_nil","line":39,"kind":"theorem","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList_nil\"><span class=\"name\">Ideal</span>.<span class=\"name\">ofList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\">Ideal.ofList</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/Regular/RegularSequence.lean#L37-L37","name":"Ideal.ofList","line":37,"kind":"def","docLink":"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList","doc":"The ideal generated by a list of elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Regular/RegularSequence.html#Ideal.ofList\"><span class=\"name\">Ideal</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal\">Ideal</a> <span class=\"fn\">R</span></span></div></div>"}]}