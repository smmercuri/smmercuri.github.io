{"name":"Mathlib.RingTheory.WittVector.Truncated","instances":[{"typeNames":["TruncatedWittVector"],"name":"instInhabitedTruncatedWittVector","className":"Inhabited"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instZero","className":"Zero"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instOne","className":"One"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instNatCast","className":"NatCast"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instIntCast","className":"IntCast"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instAdd","className":"Add"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instMul","className":"Mul"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instNeg","className":"Neg"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instSub","className":"Sub"},{"typeNames":["Nat","TruncatedWittVector"],"name":"TruncatedWittVector.hasNatScalar","className":"SMul"},{"typeNames":["Int","TruncatedWittVector"],"name":"TruncatedWittVector.hasIntScalar","className":"SMul"},{"typeNames":["TruncatedWittVector","Nat"],"name":"TruncatedWittVector.hasNatPow","className":"Pow"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instCommRing","className":"CommRing"},{"typeNames":["TruncatedWittVector"],"name":"TruncatedWittVector.instFintype","className":"Fintype"}],"imports":["Init","Mathlib.RingTheory.WittVector.InitTail"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L476-L478","name":"WittVector.hom_ext","line":476,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.hom_ext\"><span class=\"name\">WittVector</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g‚ÇÅ : <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g‚ÇÇ : <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">k</span></span>)</span>.comp</span> <span class=\"fn\">g‚ÇÅ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">k</span></span>)</span>.comp</span> <span class=\"fn\">g‚ÇÇ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g‚ÇÅ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g‚ÇÇ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L466-L474","name":"WittVector.liftEquiv","line":466,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.liftEquiv","doc":"The universal property of `ùïé R` as projective limit of truncated Witt vector rings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.liftEquiv\"><span class=\"name\">WittVector</span>.<span class=\"name\">liftEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) ‚Üí <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span> <span class=\"fn\">R</span></span></span></span> //\n    <span class=\"fn\">‚àÄ (<span class=\"fn\">k‚ÇÅ </span><span class=\"fn\">k‚ÇÇ</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) (<span class=\"fn\">hk</span> : <span class=\"fn\"><span class=\"fn\">k‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">k‚ÇÇ</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hk</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÇ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÅ</span></span></span></span> }</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a>   <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L465-L465","name":"WittVector.liftEquiv_apply","line":465,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.liftEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.liftEquiv_apply\"><span class=\"name\">WittVector</span>.<span class=\"name\">liftEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">{ <span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) ‚Üí <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span> <span class=\"fn\">R</span></span></span></span> //\n  <span class=\"fn\">‚àÄ (<span class=\"fn\">k‚ÇÅ </span><span class=\"fn\">k‚ÇÇ</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) (<span class=\"fn\">hk</span> : <span class=\"fn\"><span class=\"fn\">k‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">k‚ÇÇ</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hk</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÇ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÅ</span></span></span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">WittVector.liftEquiv</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.lift\">WittVector.lift</a> <span class=\"fn\">‚Üë<span class=\"fn\">f</span></span> <span class=\"fn\">‚ãØ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L465-L465","name":"WittVector.liftEquiv_symm_apply_coe","line":465,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.liftEquiv_symm_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.liftEquiv_symm_apply_coe\"><span class=\"name\">WittVector</span>.<span class=\"name\">liftEquiv_symm_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">WittVector.liftEquiv</span>.symm</span> <span class=\"fn\">g</span></span>)</span></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">k</span></span>)</span>.comp</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L456-L462","name":"WittVector.lift_unique","line":456,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.lift_unique","doc":"The uniqueness part of the universal property of `ùïé R`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.lift_unique\"><span class=\"name\">WittVector</span>.<span class=\"name\">lift_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) ‚Üí <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span> <span class=\"fn\">R</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_compat : <span class=\"fn\">‚àÄ (<span class=\"fn\">k‚ÇÅ </span><span class=\"fn\">k‚ÇÇ</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) (<span class=\"fn\">hk</span> : <span class=\"fn\"><span class=\"fn\">k‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">k‚ÇÇ</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hk</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÇ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÅ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g_compat : <span class=\"fn\">‚àÄ (<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">k</span></span>)</span>.comp</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.lift\">WittVector.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">f_compat</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L452-L453","name":"WittVector.truncate_comp_lift","line":452,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_comp_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_comp_lift\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncate_comp_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) ‚Üí <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span> <span class=\"fn\">R</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_compat : <span class=\"fn\">‚àÄ (<span class=\"fn\">k‚ÇÅ </span><span class=\"fn\">k‚ÇÇ</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) (<span class=\"fn\">hk</span> : <span class=\"fn\"><span class=\"fn\">k‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">k‚ÇÇ</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hk</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÇ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÅ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">n</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.lift\">WittVector.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">f_compat</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L448-L449","name":"WittVector.truncate_lift","line":448,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_lift\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncate_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) ‚Üí <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span> <span class=\"fn\">R</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_compat : <span class=\"fn\">‚àÄ (<span class=\"fn\">k‚ÇÅ </span><span class=\"fn\">k‚ÇÇ</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) (<span class=\"fn\">hk</span> : <span class=\"fn\"><span class=\"fn\">k‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">k‚ÇÇ</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hk</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÇ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÅ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.lift\">WittVector.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">f_compat</span></span>)</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L434-L443","name":"WittVector.lift","line":434,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.lift","doc":"Given compatible ring homs from `S` into `TruncatedWittVector n` for each `n`, we can lift these\nto a ring hom `S ‚Üí ùïé R`.\n\n`lift` defines the universal property of `ùïé R` as the inverse limit of `TruncatedWittVector n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.lift\"><span class=\"name\">WittVector</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) ‚Üí <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span> <span class=\"fn\">R</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f_compat : <span class=\"fn\">‚àÄ (<span class=\"fn\">k‚ÇÅ </span><span class=\"fn\">k‚ÇÇ</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) (<span class=\"fn\">hk</span> : <span class=\"fn\"><span class=\"fn\">k‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">k‚ÇÇ</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hk</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÇ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÅ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L420-L424","name":"WittVector.truncate_liftFun","line":420,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_liftFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_liftFun\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncate_liftFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) ‚Üí <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span> <span class=\"fn\">R</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_compat : <span class=\"fn\">‚àÄ (<span class=\"fn\">k‚ÇÅ </span><span class=\"fn\">k‚ÇÇ</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) (<span class=\"fn\">hk</span> : <span class=\"fn\"><span class=\"fn\">k‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">k‚ÇÇ</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hk</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÇ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k‚ÇÅ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.liftFun\">WittVector.liftFun</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L414-L415","name":"WittVector.liftFun","line":414,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.liftFun","doc":"Given a family `f‚Çñ : S ‚Üí TruncatedWittVector p k R` and `s : S`, we produce a Witt vector by\ndefining the `k`th entry to be the final entry of `f‚Çñ s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.liftFun\"><span class=\"name\">WittVector</span>.<span class=\"name\">liftFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) ‚Üí <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span> <span class=\"fn\">R</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L388-L393","name":"TruncatedWittVector.iInf_ker_truncate","line":388,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.iInf_ker_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.iInf_ker_truncate\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">iInf_ker_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚®Ö (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Maps.html#RingHom.ker\">RingHom.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">i</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">‚ä•</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L382-L384","name":"TruncatedWittVector.card","line":382,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.card\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L377-L378","name":"TruncatedWittVector.instFintype","line":377,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instFintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instFintype\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instFintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L370-L373","name":"TruncatedWittVector.coeff_truncate","line":370,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff_truncate\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">coeff_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hm : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hm</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">hm</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L364-L367","name":"TruncatedWittVector.truncate_surjective","line":364,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_surjective\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">truncate_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hm : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hm</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L360-L362","name":"TruncatedWittVector.truncate_comp","line":360,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_comp\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">truncate_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n‚ÇÅ : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n‚ÇÇ : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n‚ÇÉ : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">n‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">n‚ÇÇ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">n‚ÇÇ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">n‚ÇÉ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">h1</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">h2</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">‚ãØ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L353-L357","name":"TruncatedWittVector.truncate_truncate","line":353,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_truncate\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">truncate_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n‚ÇÅ : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n‚ÇÇ : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n‚ÇÉ : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">n‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">n‚ÇÇ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">n‚ÇÇ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">n‚ÇÉ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n‚ÇÉ</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">h1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">h2</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">‚ãØ</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L348-L350","name":"TruncatedWittVector.truncate_wittVector_truncate","line":348,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_wittVector_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_wittVector_truncate\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">truncate_wittVector_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hm : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hm</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L343-L345","name":"TruncatedWittVector.truncate_comp_wittVector_truncate","line":343,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_comp_wittVector_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate_comp_wittVector_truncate\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">truncate_comp_wittVector_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hm : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\">TruncatedWittVector.truncate</a> <span class=\"fn\">hm</span></span>)</span>.comp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L334-L340","name":"TruncatedWittVector.truncate","line":334,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate","doc":"A ring homomorphism that truncates a truncated Witt vector of length `m` to\na truncated Witt vector of length `n`, for `n ‚â§ m`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncate\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hm : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span> <span class=\"fn\">R</span></span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L320-L323","name":"WittVector.truncate_mk'","line":320,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_mk'\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncate_mk'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">coeff</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.mk\">TruncatedWittVector.mk</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">‚Üë<span class=\"fn\">k</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L311-L315","name":"WittVector.mem_ker_truncate","line":311,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.mem_ker_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.mem_ker_truncate\"><span class=\"name\">WittVector</span>.<span class=\"name\">mem_ker_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Maps.html#RingHom.ker\">RingHom.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">n</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ <span class=\"fn\">i</span> &lt; <span class=\"fn\">n</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.coeff</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L306-L307","name":"WittVector.coeff_truncate","line":306,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.coeff_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.coeff_truncate\"><span class=\"name\">WittVector</span>.<span class=\"name\">coeff_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.coeff</span> <span class=\"fn\">‚Üë<span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L300-L301","name":"WittVector.truncate_surjective","line":300,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate_surjective\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncate_surjective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\">WittVector.truncate</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L291-L296","name":"WittVector.truncate","line":291,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate","doc":"`truncate n` is a ring homomorphism that truncates `x` to its first `n` entries\nto obtain a `TruncatedWittVector`, which has the same base `p` as `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncate\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">‚Üí+*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L274-L278","name":"TruncatedWittVector.instCommRing","line":274,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instCommRing\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instCommRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L262-L263","name":"WittVector.truncateFun_int_cast","line":262,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_int_cast","doc":"**Alias** of `WittVector.truncateFun_intCast`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_int_cast\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_int_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Data/Int/Basic.html#Int\">‚Ñ§</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">‚Üë<span class=\"fn\">m</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚Üë<span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L260-L260","name":"WittVector.truncateFun_intCast","line":260,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_intCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_intCast\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Data/Int/Basic.html#Int\">‚Ñ§</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">‚Üë<span class=\"fn\">m</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚Üë<span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L257-L258","name":"WittVector.truncateFun_nat_cast","line":257,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_nat_cast","doc":"**Alias** of `WittVector.truncateFun_natCast`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_nat_cast\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_nat_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">‚Üë<span class=\"fn\">m</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚Üë<span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L255-L255","name":"WittVector.truncateFun_natCast","line":255,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_natCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_natCast\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">‚Üë<span class=\"fn\">m</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚Üë<span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L252-L253","name":"WittVector.truncateFun_pow","line":252,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_pow\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L249-L250","name":"WittVector.truncateFun_zsmul","line":249,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_zsmul\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Data/Int/Basic.html#Int\">‚Ñ§</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L246-L247","name":"WittVector.truncateFun_nsmul","line":246,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_nsmul\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L242-L244","name":"WittVector.truncateFun_sub","line":242,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_sub\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L239-L240","name":"WittVector.truncateFun_neg","line":239,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_neg\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L235-L237","name":"WittVector.truncateFun_mul","line":235,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_mul\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L230-L232","name":"WittVector.truncateFun_add","line":230,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_add\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L225-L225","name":"WittVector.truncateFun_one","line":225,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_one\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L222-L222","name":"WittVector.truncateFun_zero","line":222,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_zero\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L218-L219","name":"WittVector.truncateFun_surjective","line":218,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun_surjective\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun_surjective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L199-L211","name":"witt_truncateFun_tac","line":199,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#witt_truncateFun_tac","doc":"A macro tactic used to prove that `truncateFun` respects ring operations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#witt_truncateFun_tac\"><span class=\"name\">witt_truncateFun_tac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L192-L194","name":"TruncatedWittVector.coeff_zero","line":192,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff_zero\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">coeff_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L188-L189","name":"TruncatedWittVector.hasNatPow","line":188,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.hasNatPow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.hasNatPow\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">hasNatPow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L185-L186","name":"TruncatedWittVector.hasIntScalar","line":185,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.hasIntScalar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.hasIntScalar\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">hasIntScalar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">‚Ñ§</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L182-L183","name":"TruncatedWittVector.hasNatScalar","line":182,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.hasNatScalar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.hasNatScalar\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">hasNatScalar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L179-L180","name":"TruncatedWittVector.instSub","line":179,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instSub\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L176-L177","name":"TruncatedWittVector.instNeg","line":176,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instNeg\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L173-L174","name":"TruncatedWittVector.instMul","line":173,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instMul\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L170-L171","name":"TruncatedWittVector.instAdd","line":170,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instAdd\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L167-L168","name":"TruncatedWittVector.instIntCast","line":167,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instIntCast\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instIntCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L164-L165","name":"TruncatedWittVector.instNatCast","line":164,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instNatCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instNatCast\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instNatCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L161-L162","name":"TruncatedWittVector.instOne","line":161,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instOne\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instOne</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L158-L159","name":"TruncatedWittVector.instZero","line":158,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.instZero\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">instZero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L151-L152","name":"TruncatedWittVector.truncateFun_out","line":151,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncateFun_out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.truncateFun_out\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">truncateFun_out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">x</span>.out</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L138-L142","name":"WittVector.out_truncateFun","line":138,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.out_truncateFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.out_truncateFun\"><span class=\"name\">WittVector</span>.<span class=\"name\">out_truncateFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span>)</span>.out</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/InitTail.html#WittVector.init\">WittVector.init</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L132-L133","name":"WittVector.coeff_truncateFun","line":132,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.coeff_truncateFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.coeff_truncateFun\"><span class=\"name\">WittVector</span>.<span class=\"name\">coeff_truncateFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\">WittVector.truncateFun</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.coeff</span> <span class=\"fn\">‚Üë<span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L124-L125","name":"WittVector.truncateFun","line":124,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun","doc":"`truncateFun n x` uses the first `n` entries of `x` to construct a `TruncatedWittVector`,\nwhich has the same base `p` as `x`.\nThis function is bundled into a ring homomorphism in `WittVector.truncate` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#WittVector.truncateFun\"><span class=\"name\">WittVector</span>.<span class=\"name\">truncateFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L107-L111","name":"TruncatedWittVector.out_injective","line":107,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.out_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.out_injective\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">out_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">TruncatedWittVector.out</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L104-L105","name":"TruncatedWittVector.coeff_out","line":104,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff_out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff_out\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">coeff_out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.out</span>.coeff</span> <span class=\"fn\">‚Üë<span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L100-L101","name":"TruncatedWittVector.out","line":100,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.out","doc":"We can turn a truncated Witt vector `x` into a Witt vector\nby setting all coefficients after `x` to be 0.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.out\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Defs.html#WittVector\">WittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L92-L93","name":"TruncatedWittVector.mk_coeff","line":92,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.mk_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.mk_coeff\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">mk_coeff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.mk\">TruncatedWittVector.mk</a> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L88-L89","name":"TruncatedWittVector.coeff_mk","line":88,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff_mk\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">coeff_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> ‚Üí <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.mk\">TruncatedWittVector.mk</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L84-L85","name":"TruncatedWittVector.ext_iff","line":84,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.ext_iff\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L81-L82","name":"TruncatedWittVector.ext","line":81,"kind":"theorem","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.ext\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\">TruncatedWittVector.coeff</a> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L77-L78","name":"TruncatedWittVector.coeff","line":77,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff","doc":"`x.coeff i` is the `i`th entry of `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.coeff\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">coeff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">R</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L71-L72","name":"TruncatedWittVector.mk","line":71,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.mk","doc":"Create a `TruncatedWittVector` from a vector `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector.mk\"><span class=\"name\">TruncatedWittVector</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> ‚Üí <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L61-L62","name":"instInhabitedTruncatedWittVector","line":61,"kind":"instance","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#instInhabitedTruncatedWittVector","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#instInhabitedTruncatedWittVector\"><span class=\"name\">instInhabitedTruncatedWittVector</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\">TruncatedWittVector</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/RingTheory/WittVector/Truncated.lean#L58-L59","name":"TruncatedWittVector","line":58,"kind":"def","docLink":"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector","doc":"A truncated Witt vector over `R` is a vector of elements of `R`,\ni.e., the first `n` coefficients of a Witt vector.\nWe will define operations on this type that are compatible with the (untruncated) Witt\nvector operations.\n\n`TruncatedWittVector p n R` takes a parameter `p : ‚Ñï` that is not used in the definition.\nIn practice, this number `p` is assumed to be a prime number,\nand under this assumption we construct a ring structure on `TruncatedWittVector p n R`.\n(`TruncatedWittVector p‚ÇÅ n R` and `TruncatedWittVector p‚ÇÇ n R` are definitionally\nequal as types but will have different ring operations.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/WittVector/Truncated.html#TruncatedWittVector\"><span class=\"name\">TruncatedWittVector</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 ‚Üí <a href=\"./foundational_types.html\">Type</a> u_2</span></span></div></div>"}]}