{"name":"Mathlib.SetTheory.Game.Basic","instances":[{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instNeg","className":"Neg"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instZero","className":"Zero"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instAdd","className":"Add"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instAddCommGroupWithOneGame","className":"AddCommGroupWithOne"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instInhabited","className":"Inhabited"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instPartialOrderGame","className":"PartialOrder"},{"typeNames":["SetTheory.Game","SetTheory.Game.LF"],"name":"SetTheory.Game.instIsTrichotomousLF","className":"IsTrichotomous"},{"typeNames":["SetTheory.Game","SetTheory.Game"],"name":"SetTheory.Game.covariantClass_add_le","className":"CovariantClass"},{"typeNames":["SetTheory.Game","SetTheory.Game","Function.swap"],"name":"SetTheory.Game.covariantClass_swap_add_le","className":"CovariantClass"},{"typeNames":["SetTheory.Game","SetTheory.Game"],"name":"SetTheory.Game.covariantClass_add_lt","className":"CovariantClass"},{"typeNames":["SetTheory.Game","SetTheory.Game","Function.swap"],"name":"SetTheory.Game.covariantClass_swap_add_lt","className":"CovariantClass"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.orderedAddCommGroup","className":"OrderedAddCommGroup"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instMul","className":"Mul"},{"typeNames":["SetTheory.PGame.LeftMoves"],"name":"SetTheory.PGame.isEmpty_mul_zero_leftMoves","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.RightMoves"],"name":"SetTheory.PGame.isEmpty_mul_zero_rightMoves","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.LeftMoves"],"name":"SetTheory.PGame.isEmpty_zero_mul_leftMoves","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.RightMoves"],"name":"SetTheory.PGame.isEmpty_zero_mul_rightMoves","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.InvTy"],"name":"SetTheory.PGame.instIsEmptyInvTyTrue","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.InvTy"],"name":"SetTheory.PGame.InvTy.instInhabited","className":"Inhabited"},{"typeNames":["SetTheory.PGame.InvTy"],"name":"SetTheory.PGame.uniqueInvTy","className":"Unique"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instInv","className":"Inv"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instDiv","className":"Div"}],"imports":["Init","Mathlib.Algebra.Order.Group.Defs","Mathlib.Algebra.Ring.Int","Mathlib.SetTheory.Game.PGame","Mathlib.Tactic.Abel"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L956-L957","name":"SetTheory.PGame.inv_one_equiv","line":956,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_one_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_one_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_one_equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L952-L954","name":"SetTheory.PGame.invOne","line":952,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invOne","doc":"`1⁻¹` has exactly the same moves as `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invOne\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">invOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span>.Relabelling</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L948-L949","name":"SetTheory.PGame.inv_eq_of_lf_zero","line":948,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_lf_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_lf_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_eq_of_lf_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.inv'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L945-L946","name":"SetTheory.PGame.inv_eq_of_pos","line":945,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_pos\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_eq_of_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.inv'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L942-L943","name":"SetTheory.PGame.inv_zero","line":942,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L939-L939","name":"SetTheory.PGame.inv_eq_of_equiv_zero","line":939,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_equiv_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_equiv_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_eq_of_equiv_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L936-L937","name":"SetTheory.PGame.instDiv","line":936,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instDiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instDiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L933-L934","name":"SetTheory.PGame.instInv","line":933,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instInv","doc":"The inverse of a pre-game in terms of the inverse on positive pre-games. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instInv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instInv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv\">Inv</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L929-L930","name":"SetTheory.PGame.inv'_one_equiv","line":929,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_one_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_one_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'_one_equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">SetTheory.PGame.inv'</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L917-L927","name":"SetTheory.PGame.inv'One","line":917,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'One","doc":"`inv' 1` has exactly the same moves as `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'One\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'One</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">SetTheory.PGame.inv'</a> <span class=\"fn\">1</span></span>)</span>.Relabelling</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L913-L914","name":"SetTheory.PGame.inv'_zero_equiv","line":913,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_zero_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_zero_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'_zero_equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">SetTheory.PGame.inv'</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L903-L911","name":"SetTheory.PGame.inv'Zero","line":903,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'Zero","doc":"`inv' 0` has exactly the same moves as `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'Zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'Zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">SetTheory.PGame.inv'</a> <span class=\"fn\">0</span></span>)</span>.Relabelling</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L897-L900","name":"SetTheory.PGame.zero_lf_inv'","line":897,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_lf_inv'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_lf_inv'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_lf_inv'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\">SetTheory.PGame.LF</a> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">x</span>.inv'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L888-L895","name":"SetTheory.PGame.inv'","line":888,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'","doc":"The inverse of a positive surreal number `x = {L | R}` is\ngiven by `x⁻¹ = {0,\n  (1 + (R - x) * x⁻¹L) * R, (1 + (L - x) * x⁻¹R) * L |\n  (1 + (L - x) * x⁻¹L) * L, (1 + (R - x) * x⁻¹R) * R}`.\nBecause the two halves `x⁻¹L, x⁻¹R` of `x⁻¹` are used in their own\ndefinition, the sets and elements are inductively generated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L876-L880","name":"SetTheory.PGame.invVal_isEmpty","line":876,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal_isEmpty\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">invVal_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><span class=\"fn\">l</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">r</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IHl : <span class=\"fn\"><span class=\"fn\">l</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IHr : <span class=\"fn\"><span class=\"fn\">r</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal\">SetTheory.PGame.invVal</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">IHl</span> <span class=\"fn\">IHr</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L867-L873","name":"SetTheory.PGame.invVal","line":867,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal","doc":"Because the two halves of the definition of `inv` produce more elements\nof each side, we have to define the two families inductively.\nThis is the function part, defined by recursion on `InvTy`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">invVal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><span class=\"fn\">l</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">r</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IHl : <span class=\"fn\"><span class=\"fn\">l</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IHr : <span class=\"fn\"><span class=\"fn\">r</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">b</span></span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L857-L862","name":"SetTheory.PGame.uniqueInvTy","line":857,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.uniqueInvTy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.uniqueInvTy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">uniqueInvTy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L854-L855","name":"SetTheory.PGame.InvTy.instInhabited","line":854,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.instInhabited\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L851-L852","name":"SetTheory.PGame.instIsEmptyInvTyTrue","line":851,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instIsEmptyInvTyTrue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instIsEmptyInvTyTrue\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instIsEmptyInvTyTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L849-L849","name":"SetTheory.PGame.InvTy.right₂","line":849,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.right₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.right₂\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">right₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L848-L848","name":"SetTheory.PGame.InvTy.right₁","line":848,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.right₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.right₁\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">right₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L847-L847","name":"SetTheory.PGame.InvTy.left₂","line":847,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.left₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.left₂\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">left₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L846-L846","name":"SetTheory.PGame.InvTy.left₁","line":846,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.left₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.left₁\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">left₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L845-L845","name":"SetTheory.PGame.InvTy.zero","line":845,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">SetTheory.PGame.InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L844-L849","name":"SetTheory.PGame.InvTy","line":844,"kind":"inductive","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy","doc":"Because the two halves of the definition of `inv` produce more elements\non each side, we have to define the two families inductively.\nThis is the indexing set for the function, and `invVal` is the function part. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L820-L839","name":"SetTheory.PGame.rightMoves_mul_iff","line":820,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul_iff","doc":"The right options of `x * y` are the left options of `x * (-y)` and of `(-x) * y` of the first\nkind, up to equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_mul_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.moveRight</span> <span class=\"fn\">k</span></span>⟧</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.mulOption</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>⟧</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.LeftMoves</span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.mulOption</span> <span class=\"fn\">y</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>⟧</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L798-L816","name":"SetTheory.PGame.leftMoves_mul_iff","line":798,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul_iff","doc":"The left options of `x * y` of the second kind are the left options of `(-x) * (-y)` of the\nfirst kind, up to equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_mul_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.moveLeft</span> <span class=\"fn\">k</span></span>⟧</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.mulOption</span> <span class=\"fn\">y</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>⟧</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.LeftMoves</span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.mulOption</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>⟧</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L789-L794","name":"SetTheory.PGame.mulOption_symm","line":789,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption_symm","doc":"The left options of `x * y` agree with that of `y * x` up to equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption_symm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulOption_symm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.mulOption</span> <span class=\"fn\">y</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.mulOption</span> <span class=\"fn\">x</span> <span class=\"fn\">j</span> <span class=\"fn\">i</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L781-L786","name":"SetTheory.PGame.mulOption_neg_neg","line":781,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption_neg_neg","doc":"Any left option of `x * y` of the first kind is also a left option of `x * -(-y)` of\nthe first kind. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption_neg_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulOption_neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.mulOption</span> <span class=\"fn\">y</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.mulOption</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesNeg</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesNeg</span> <span class=\"fn\">j</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L776-L777","name":"SetTheory.PGame.mulOption","line":776,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption","doc":"The left options of `x * y` of the first kind, i.e. of the form `xL * y + x * yL - xL * yL`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulOption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L772-L773","name":"SetTheory.PGame.mul_assoc_equiv","line":772,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_assoc_equiv","doc":"`x * y * z` is equivalent to `x * (y * z).`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_assoc_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_assoc_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L621-L769","name":"SetTheory.PGame.quot_mul_assoc","line":621,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_assoc\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span>)</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L618-L619","name":"SetTheory.PGame.one_mul_equiv","line":618,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.one_mul_equiv","doc":"`1 * x` is equivalent to `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.one_mul_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">one_mul_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L614-L615","name":"SetTheory.PGame.quot_one_mul","line":614,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_one_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L610-L611","name":"SetTheory.PGame.oneMulRelabelling","line":610,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.oneMulRelabelling","doc":"`1 * x` has the same moves as `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.oneMulRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">oneMulRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>)</span>.Relabelling</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L606-L607","name":"SetTheory.PGame.mul_one_equiv","line":606,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_one_equiv","doc":"`x * 1` is equivalent to `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_one_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_one_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L602-L603","name":"SetTheory.PGame.quot_mul_one","line":602,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_one\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L585-L599","name":"SetTheory.PGame.mulOneRelabelling","line":585,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOneRelabelling","doc":"`x * 1` has the same moves as `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOneRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulOneRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span></span>)</span>.Relabelling</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L580-L582","name":"SetTheory.PGame.quot_right_distrib_sub","line":580,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_right_distrib_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_right_distrib_sub\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_right_distrib_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>⟧</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L576-L577","name":"SetTheory.PGame.right_distrib_equiv","line":576,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.right_distrib_equiv","doc":"`(x + y) * z` is equivalent to `x * z + y * z.`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.right_distrib_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">right_distrib_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L572-L573","name":"SetTheory.PGame.quot_right_distrib","line":572,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_right_distrib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_right_distrib\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_right_distrib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span>⟧</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L567-L569","name":"SetTheory.PGame.quot_left_distrib_sub","line":567,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_left_distrib_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_left_distrib_sub\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_left_distrib_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span>)</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>⟧</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L563-L564","name":"SetTheory.PGame.left_distrib_equiv","line":563,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.left_distrib_equiv","doc":"`x * (y + z)` is equivalent to `x * y + x * z.`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.left_distrib_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">left_distrib_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L466-L560","name":"SetTheory.PGame.quot_left_distrib","line":466,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_left_distrib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_left_distrib\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_left_distrib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>⟧</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L463-L463","name":"SetTheory.PGame.quot_neg_mul_neg","line":463,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg_mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg_mul_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_neg_mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L460-L461","name":"SetTheory.PGame.quot_mul_neg","line":460,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L456-L457","name":"SetTheory.PGame.mulNegRelabelling","line":456,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulNegRelabelling","doc":"`x * -y` and `-(x * y)` have the same moves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulNegRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulNegRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L452-L453","name":"SetTheory.PGame.quot_neg_mul","line":452,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_neg_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L433-L449","name":"SetTheory.PGame.negMulRelabelling","line":433,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.negMulRelabelling","doc":"`-x * y` and `-(x * y)` have the same moves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.negMulRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">negMulRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L429-L430","name":"SetTheory.PGame.quot_zero_mul","line":429,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_zero_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_zero_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_zero_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">0</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L425-L426","name":"SetTheory.PGame.zero_mul_equiv","line":425,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_mul_equiv","doc":"`0 * x` is equivalent to `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_mul_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_mul_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L421-L422","name":"SetTheory.PGame.zeroMulRelabelling","line":421,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zeroMulRelabelling","doc":"`0 * x` has exactly the same moves as `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zeroMulRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zeroMulRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>)</span>.Relabelling</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L417-L418","name":"SetTheory.PGame.quot_mul_zero","line":417,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">0</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L413-L414","name":"SetTheory.PGame.mul_zero_equiv","line":413,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_zero_equiv","doc":"`x * 0` is equivalent to `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_zero_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_zero_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L409-L410","name":"SetTheory.PGame.mulZeroRelabelling","line":409,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulZeroRelabelling","doc":"`x * 0` has exactly the same moves as `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulZeroRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulZeroRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span></span>)</span>.Relabelling</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L404-L406","name":"SetTheory.PGame.isEmpty_zero_mul_rightMoves","line":404,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_zero_mul_rightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_zero_mul_rightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_zero_mul_rightMoves</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>)</span>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L400-L402","name":"SetTheory.PGame.isEmpty_zero_mul_leftMoves","line":400,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_zero_mul_leftMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_zero_mul_leftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_zero_mul_leftMoves</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>)</span>.LeftMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L396-L398","name":"SetTheory.PGame.isEmpty_mul_zero_rightMoves","line":396,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_mul_zero_rightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_mul_zero_rightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_mul_zero_rightMoves</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span></span>)</span>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L392-L394","name":"SetTheory.PGame.isEmpty_mul_zero_leftMoves","line":392,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_mul_zero_leftMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_mul_zero_leftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_mul_zero_leftMoves</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span></span>)</span>.LeftMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L389-L390","name":"SetTheory.PGame.mul_comm_equiv","line":389,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_comm_equiv","doc":"`x * y` is equivalent to `y * x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_comm_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_comm_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L385-L386","name":"SetTheory.PGame.quot_mul_comm","line":385,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_comm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L372-L383","name":"SetTheory.PGame.mulCommRelabelling","line":372,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulCommRelabelling","doc":"`x * y` and `y * x` have the same moves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulCommRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulCommRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L363-L369","name":"SetTheory.PGame.rightMoves_mul_cases","line":363,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul_cases\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_mul_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\">∀ (<span class=\"fn\">ix</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>) (<span class=\"fn\">jy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\">ix</span>, <span class=\"fn\">jy</span>)</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">jx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>) (<span class=\"fn\">iy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">jx</span>, <span class=\"fn\">iy</span>)</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L355-L361","name":"SetTheory.PGame.leftMoves_mul_cases","line":355,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul_cases\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_mul_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\">∀ (<span class=\"fn\">ix</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>) (<span class=\"fn\">iy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\">ix</span>, <span class=\"fn\">iy</span>)</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">jx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>) (<span class=\"fn\">jy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">jx</span>, <span class=\"fn\">jy</span>)</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L350-L353","name":"SetTheory.PGame.neg_mk_mul_moveRight_inr","line":350,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveRight_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveRight_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_mk_mul_moveRight_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">yr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L344-L347","name":"SetTheory.PGame.neg_mk_mul_moveRight_inl","line":344,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveRight_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveRight_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_mk_mul_moveRight_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L338-L341","name":"SetTheory.PGame.neg_mk_mul_moveLeft_inr","line":338,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveLeft_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveLeft_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_mk_mul_moveLeft_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L332-L335","name":"SetTheory.PGame.neg_mk_mul_moveLeft_inl","line":332,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveLeft_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveLeft_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_mk_mul_moveLeft_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">yr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L324-L329","name":"SetTheory.PGame.mul_moveRight_inr","line":324,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveRight_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveRight_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_moveRight_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">j</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L318-L321","name":"SetTheory.PGame.mk_mul_moveRight_inr","line":318,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveRight_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveRight_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_mul_moveRight_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L310-L315","name":"SetTheory.PGame.mul_moveRight_inl","line":310,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveRight_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveRight_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_moveRight_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L304-L307","name":"SetTheory.PGame.mk_mul_moveRight_inl","line":304,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveRight_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveRight_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_mul_moveRight_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">yr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L296-L301","name":"SetTheory.PGame.mul_moveLeft_inr","line":296,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveLeft_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveLeft_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_moveLeft_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L290-L293","name":"SetTheory.PGame.mk_mul_moveLeft_inr","line":290,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveLeft_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveLeft_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_mul_moveLeft_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">yr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L282-L287","name":"SetTheory.PGame.mul_moveLeft_inl","line":282,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveLeft_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveLeft_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_moveLeft_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">j</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L276-L279","name":"SetTheory.PGame.mk_mul_moveLeft_inl","line":276,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveLeft_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveLeft_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_mul_moveLeft_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L271-L273","name":"SetTheory.PGame.toRightMovesMul","line":271,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toRightMovesMul","doc":"Turns a left and a right move for `x` and `y` into a right move for `x * y` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toRightMovesMul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toRightMovesMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L263-L265","name":"SetTheory.PGame.toLeftMovesMul","line":263,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toLeftMovesMul","doc":"Turns two left or right moves for `x` and `y` into a left move for `x * y` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toLeftMovesMul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toLeftMovesMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L254-L257","name":"SetTheory.PGame.rightMoves_mul","line":254,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L249-L252","name":"SetTheory.PGame.leftMoves_mul","line":249,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L238-L247","name":"SetTheory.PGame.instMul","line":238,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instMul","doc":"The product of `x = {xL | xR}` and `y = {yL | yR}` is\n`{xL*y + x*yL - xL*yL, xR*y + x*yR - xR*yR | xL*y + x*yR - xL*yR, x*yL + xR*y - xR*yL }`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instMul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L225-L229","name":"SetTheory.PGame.quot_eq_of_mk'_quot_eq","line":225,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_eq_of_mk'_quot_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_eq_of_mk'_quot_eq\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_eq_of_mk'_quot_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span>)</span></span>⟧</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">j</span></span>)</span></span>⟧</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">y</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L222-L223","name":"SetTheory.PGame.quot_sub","line":222,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_sub\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">a</span>⟧</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">⟦<span class=\"fn\">b</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L218-L219","name":"SetTheory.PGame.quot_add","line":218,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_add\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">a</span>⟧</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">⟦<span class=\"fn\">b</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L214-L215","name":"SetTheory.PGame.quot_neg","line":214,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">⟦<span class=\"fn\">a</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L206-L207","name":"SetTheory.Game.bddBelow_of_small","line":206,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddBelow_of_small","doc":"A small set of games is bounded below. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddBelow_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">bddBelow_of_small</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a>        <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddBelow\">BddBelow</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L199-L203","name":"SetTheory.Game.bddBelow_range_of_small","line":199,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddBelow_range_of_small","doc":"A small family of games is bounded below. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddBelow_range_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">bddBelow_range_of_small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u_1}</a>      <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddBelow\">BddBelow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L195-L196","name":"SetTheory.Game.bddAbove_of_small","line":195,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddAbove_of_small","doc":"A small set of games is bounded above. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddAbove_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">bddAbove_of_small</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a>        <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L188-L192","name":"SetTheory.Game.bddAbove_range_of_small","line":188,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddAbove_range_of_small","doc":"A small family of games is bounded above. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddAbove_range_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">bddAbove_range_of_small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u_1}</a>      <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L183-L185","name":"SetTheory.Game.orderedAddCommGroup","line":183,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.orderedAddCommGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.orderedAddCommGroup\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">orderedAddCommGroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#OrderedAddCommGroup\">OrderedAddCommGroup</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L179-L181","name":"SetTheory.Game.add_lf_add_left","line":179,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.add_lf_add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.add_lf_add_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">add_lf_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.LF</span> <span class=\"fn\">c</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L175-L177","name":"SetTheory.Game.add_lf_add_right","line":175,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.add_lf_add_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.add_lf_add_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">add_lf_add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.LF</span> <span class=\"fn\">c</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L170-L173","name":"SetTheory.Game.covariantClass_swap_add_lt","line":170,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.covariantClass_swap_add_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.covariantClass_swap_add_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">covariantClass_swap_add_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L165-L168","name":"SetTheory.Game.covariantClass_add_lt","line":165,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.covariantClass_add_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.covariantClass_add_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">covariantClass_add_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>) =&gt;\n  <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L160-L163","name":"SetTheory.Game.covariantClass_swap_add_le","line":160,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.covariantClass_swap_add_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.covariantClass_swap_add_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">covariantClass_swap_add_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L155-L158","name":"SetTheory.Game.covariantClass_add_le","line":155,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.covariantClass_add_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.covariantClass_add_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">covariantClass_add_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>) =&gt;\n  <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L152-L153","name":"SetTheory.Game.PGame.fuzzy_iff_game_fuzzy","line":152,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.fuzzy_iff_game_fuzzy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.fuzzy_iff_game_fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fuzzy_iff_game_fuzzy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.Fuzzy\">SetTheory.Game.Fuzzy</a> <span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span> <span class=\"fn\">⟦<span class=\"fn\">y</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L147-L148","name":"SetTheory.Game.Fuzzy","line":147,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.Fuzzy","doc":"The fuzzy, confused, or incomparable relation on games.\n\nIf `x ‖ 0`, then the first player can always win `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.Fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">Fuzzy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> → <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L141-L142","name":"SetTheory.Game.PGame.equiv_iff_game_eq","line":141,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.equiv_iff_game_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.equiv_iff_game_eq\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_iff_game_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">y</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L138-L139","name":"SetTheory.Game.PGame.lt_iff_game_lt","line":138,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.lt_iff_game_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.lt_iff_game_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_iff_game_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">⟦<span class=\"fn\">y</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L135-L136","name":"SetTheory.Game.PGame.lf_iff_game_lf","line":135,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.lf_iff_game_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.lf_iff_game_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_iff_game_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">SetTheory.Game.LF</a> <span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span> <span class=\"fn\">⟦<span class=\"fn\">y</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L132-L133","name":"SetTheory.Game.PGame.le_iff_game_le","line":132,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.le_iff_game_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.PGame.le_iff_game_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_iff_game_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">⟦<span class=\"fn\">y</span>⟧</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L119-L124","name":"SetTheory.Game.instIsTrichotomousLF","line":119,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instIsTrichotomousLF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instIsTrichotomousLF\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instIsTrichotomousLF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsTrichotomous\">IsTrichotomous</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">SetTheory.Game.LF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L114-L116","name":"SetTheory.Game.not_lf","line":114,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.not_lf","doc":"On `Game`, simp-normal inequalities should use as few negations as possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.not_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">not_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L108-L110","name":"SetTheory.Game.not_le","line":108,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.not_le","doc":"On `Game`, simp-normal inequalities should use as few negations as possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.not_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L101-L102","name":"SetTheory.Game.LF","line":101,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF","doc":"The less or fuzzy relation on games.\n\nIf `0 ⧏ x` (less or fuzzy with), then Left can win `x` as the first player. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">LF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> → <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L81-L96","name":"SetTheory.Game.instPartialOrderGame","line":81,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instPartialOrderGame","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instPartialOrderGame\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instPartialOrderGame</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L78-L79","name":"SetTheory.Game.instInhabited","line":78,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instInhabited\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L59-L76","name":"SetTheory.Game.instAddCommGroupWithOneGame","line":59,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instAddCommGroupWithOneGame","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instAddCommGroupWithOneGame\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instAddCommGroupWithOneGame</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L56-L57","name":"SetTheory.Game.instAdd","line":56,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instAdd\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L55-L55","name":"SetTheory.Game.instZero","line":55,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instZero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L52-L53","name":"SetTheory.Game.instNeg","line":52,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instNeg","doc":"Negation of games. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instNeg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/Basic.lean#L45-L46","name":"SetTheory.Game","line":45,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game","doc":"The type of combinatorial games. In ZFC, a combinatorial game is constructed from\ntwo sets of combinatorial games that have been constructed at an earlier\nstage. To do this in type theory, we say that a combinatorial pre-game is built\ninductively from two families of combinatorial games indexed over any type\nin Type u. The resulting type `PGame.{u}` lives in `Type (u+1)`,\nreflecting that it is a proper class in ZFC.\nA combinatorial game is then constructed by quotienting by the equivalence\n`x ≈ y ↔ x ≤ y ∧ y ≤ x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}