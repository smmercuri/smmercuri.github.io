{"name":"Mathlib.SetTheory.Game.PGame","instances":[{"typeNames":["SetTheory.PGame","SetTheory.PGame.Subsequent"],"name":"SetTheory.PGame.instIsTransSubsequent","className":"IsTrans"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instWellFoundedRelation","className":"WellFoundedRelation"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instZero","className":"Zero"},{"typeNames":["SetTheory.PGame.LeftMoves"],"name":"SetTheory.PGame.isEmpty_zero_leftMoves","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.RightMoves"],"name":"SetTheory.PGame.isEmpty_zero_rightMoves","className":"IsEmpty"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instInhabited","className":"Inhabited"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instOnePGame","className":"One"},{"typeNames":["SetTheory.PGame.LeftMoves"],"name":"SetTheory.PGame.uniqueOneLeftMoves","className":"Unique"},{"typeNames":["SetTheory.PGame.RightMoves"],"name":"SetTheory.PGame.isEmpty_one_rightMoves","className":"IsEmpty"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.le","className":"LE"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instPreorder","className":"Preorder"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instIsIrreflLF","className":"IsIrrefl"},{"typeNames":[],"name":"SetTheory.PGame.instTransLeLF","className":"Trans"},{"typeNames":[],"name":"SetTheory.PGame.instTransLFLe","className":"Trans"},{"typeNames":["SetTheory.PGame","SetTheory.PGame.Equiv"],"name":"SetTheory.PGame.instIsEquivEquiv","className":"IsEquiv"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.setoid","className":"Setoid"},{"typeNames":[],"name":"SetTheory.PGame.instTransLeEquiv","className":"Trans"},{"typeNames":[],"name":"SetTheory.PGame.instTransEquivLe","className":"Trans"},{"typeNames":[],"name":"SetTheory.PGame.instTransLFEquiv","className":"Trans"},{"typeNames":[],"name":"SetTheory.PGame.instTransEquivLF","className":"Trans"},{"typeNames":[],"name":"SetTheory.PGame.instTransLtEquiv","className":"Trans"},{"typeNames":[],"name":"SetTheory.PGame.instTransEquivLt","className":"Trans"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instIsSymmFuzzy","className":"IsSymm"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instIsIrreflFuzzy","className":"IsIrrefl"},{"typeNames":["SetTheory.PGame.Relabelling"],"name":"SetTheory.PGame.Relabelling.instInhabited","className":"Inhabited"},{"typeNames":["SetTheory.PGame.Relabelling","HasEquiv.Equiv"],"name":"SetTheory.PGame.instCoeRelabellingEquiv","className":"Coe"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instNeg","className":"Neg"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instInvolutiveNeg","className":"InvolutiveNeg"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instNegZeroClass","className":"NegZeroClass"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instAdd","className":"Add"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instNatCast","className":"NatCast"},{"typeNames":["SetTheory.PGame.LeftMoves"],"name":"SetTheory.PGame.isEmpty_leftMoves_add","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.RightMoves"],"name":"SetTheory.PGame.isEmpty_rightMoves_add","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.RightMoves"],"name":"SetTheory.PGame.isEmpty_nat_rightMoves","className":"IsEmpty"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instSub","className":"Sub"},{"typeNames":["SetTheory.PGame","SetTheory.PGame","Function.swap"],"name":"SetTheory.PGame.covariantClass_swap_add_le","className":"CovariantClass"},{"typeNames":["SetTheory.PGame","SetTheory.PGame"],"name":"SetTheory.PGame.covariantClass_add_le","className":"CovariantClass"},{"typeNames":["SetTheory.PGame","SetTheory.PGame","Function.swap"],"name":"SetTheory.PGame.covariantClass_swap_add_lt","className":"CovariantClass"},{"typeNames":["SetTheory.PGame","SetTheory.PGame"],"name":"SetTheory.PGame.covariantClass_add_lt","className":"CovariantClass"},{"typeNames":["SetTheory.PGame.LeftMoves"],"name":"SetTheory.PGame.uniqueStarLeftMoves","className":"Unique"},{"typeNames":["SetTheory.PGame.RightMoves"],"name":"SetTheory.PGame.uniqueStarRightMoves","className":"Unique"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instZeroLEOneClass","className":"ZeroLEOneClass"}],"imports":["Init","Mathlib.Algebra.Order.ZeroLEOne","Mathlib.Data.List.InsertNth","Mathlib.Logic.Relation","Mathlib.Logic.Small.Defs","Mathlib.Order.GameAdd"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1748-L1749","name":"SetTheory.PGame.zero_lf_one","line":1748,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lf_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lf_one\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_lf_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\">SetTheory.PGame.LF</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1744-L1745","name":"SetTheory.PGame.instZeroLEOneClass","line":1744,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instZeroLEOneClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instZeroLEOneClass\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instZeroLEOneClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/ZeroLEOne.html#ZeroLEOneClass\">ZeroLEOneClass</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1741-L1742","name":"SetTheory.PGame.zero_lt_one","line":1741,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lt_one\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_lt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1738-L1738","name":"SetTheory.PGame.neg_star","line":1738,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_star\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1727-L1735","name":"SetTheory.PGame.star_fuzzy_zero","line":1727,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_fuzzy_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_fuzzy_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">star_fuzzy_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a>.Fuzzy</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1724-L1725","name":"SetTheory.PGame.uniqueStarRightMoves","line":1724,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.uniqueStarRightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.uniqueStarRightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">uniqueStarRightMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1721-L1722","name":"SetTheory.PGame.uniqueStarLeftMoves","line":1721,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.uniqueStarLeftMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.uniqueStarLeftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">uniqueStarLeftMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a>.LeftMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1718-L1719","name":"SetTheory.PGame.star_moveRight","line":1718,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_moveRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_moveRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">star_moveRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a>.moveRight</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1714-L1715","name":"SetTheory.PGame.star_moveLeft","line":1714,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_moveLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_moveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">star_moveLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a>.moveLeft</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1710-L1711","name":"SetTheory.PGame.star_rightMoves","line":1710,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_rightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_rightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">star_rightMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a>.RightMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u_1 + 1}</a>     </span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1706-L1707","name":"SetTheory.PGame.star_leftMoves","line":1706,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_leftMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star_leftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">star_leftMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\">SetTheory.PGame.star</a>.LeftMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u_1 + 1}</a>     </span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1702-L1703","name":"SetTheory.PGame.star","line":1702,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star","doc":"The pre-game `star`, which is fuzzy with zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.star\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1693-L1696","name":"SetTheory.PGame.insertRight_insertLeft","line":1693,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertRight_insertLeft","doc":"Inserting on the left and right commutes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertRight_insertLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">insertRight_insertLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x'' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.insertLeft</span> <span class=\"fn\">x'</span></span>)</span>.insertRight</span> <span class=\"fn\">x''</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.insertRight</span> <span class=\"fn\">x''</span></span>)</span>.insertLeft</span> <span class=\"fn\">x'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1688-L1690","name":"SetTheory.PGame.insertRight_equiv_of_lf","line":1688,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertRight_equiv_of_lf","doc":"Adding a gift horse right option does not change the value of `x`. A gift horse right option is\na game `x'` with `x ⧏ x'`. It is called \"gift horse\" because it seems like Right has gotten the\n\"gift\" of a new option, but actually the value of the game did not change. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertRight_equiv_of_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">insertRight_equiv_of_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.insertRight</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1681-L1683","name":"SetTheory.PGame.insertRight_le","line":1681,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertRight_le","doc":"A new right option cannot hurt Right. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertRight_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">insertRight_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.insertRight</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1677-L1678","name":"SetTheory.PGame.neg_insertLeft_neg","line":1677,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_insertLeft_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_insertLeft_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_insertLeft_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.insertLeft</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.insertRight</span> <span class=\"fn\">x'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1671-L1675","name":"SetTheory.PGame.neg_insertRight_neg","line":1671,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_insertRight_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_insertRight_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_insertRight_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.insertRight</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.insertLeft</span> <span class=\"fn\">x'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1667-L1669","name":"SetTheory.PGame.insertRight","line":1667,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertRight","doc":"The pregame constructed by inserting `x'` as a new right option into x. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">insertRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1643-L1664","name":"SetTheory.PGame.insertLeft_equiv_of_lf","line":1643,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertLeft_equiv_of_lf","doc":"Adding a gift horse left option does not change the value of `x`. A gift horse left option is\na game `x'` with `x' ⧏ x`. It is called \"gift horse\" because it seems like Left has gotten the\n\"gift\" of a new option, but actually the value of the game did not change. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertLeft_equiv_of_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">insertLeft_equiv_of_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.LF</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.insertLeft</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1625-L1638","name":"SetTheory.PGame.le_insertLeft","line":1625,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_insertLeft","doc":"A new left option cannot hurt Left. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_insertLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_insertLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.insertLeft</span> <span class=\"fn\">x'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1620-L1622","name":"SetTheory.PGame.insertLeft","line":1620,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertLeft","doc":"The pregame constructed by inserting `x'` as a new left option into x. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.insertLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">insertLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x' : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1607-L1615","name":"SetTheory.PGame.lt_iff_sub_pos","line":1607,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_iff_sub_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_iff_sub_pos\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_iff_sub_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1597-L1605","name":"SetTheory.PGame.lf_iff_sub_zero_lf","line":1597,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_iff_sub_zero_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_iff_sub_zero_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_iff_sub_zero_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\">SetTheory.PGame.LF</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1587-L1595","name":"SetTheory.PGame.le_iff_sub_nonneg","line":1587,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_iff_sub_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_iff_sub_nonneg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_iff_sub_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1584-L1585","name":"SetTheory.PGame.sub_congr_right","line":1584,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_congr_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">sub_congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1581-L1582","name":"SetTheory.PGame.sub_congr_left","line":1581,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_congr_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">sub_congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1578-L1579","name":"SetTheory.PGame.sub_congr","line":1578,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_congr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">sub_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1575-L1576","name":"SetTheory.PGame.add_congr_right","line":1575,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_congr_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1572-L1573","name":"SetTheory.PGame.add_congr_left","line":1572,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_congr_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1568-L1570","name":"SetTheory.PGame.add_congr","line":1568,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_congr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1565-L1566","name":"SetTheory.PGame.add_lf_add_of_le_of_lf","line":1565,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_lf_add_of_le_of_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_lf_add_of_le_of_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_lf_add_of_le_of_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hwx : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyz : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1562-L1563","name":"SetTheory.PGame.add_lf_add_of_lf_of_le","line":1562,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_lf_add_of_lf_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_lf_add_of_lf_of_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_lf_add_of_lf_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hwx : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.LF</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyz : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1559-L1560","name":"SetTheory.PGame.covariantClass_add_lt","line":1559,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.covariantClass_add_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.covariantClass_add_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">covariantClass_add_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1556-L1557","name":"SetTheory.PGame.covariantClass_swap_add_lt","line":1556,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.covariantClass_swap_add_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.covariantClass_swap_add_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">covariantClass_swap_add_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1552-L1554","name":"SetTheory.PGame.add_lf_add_left","line":1552,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_lf_add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_lf_add_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_lf_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1538-L1550","name":"SetTheory.PGame.add_lf_add_right","line":1538,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_lf_add_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_lf_add_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_lf_add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1535-L1536","name":"SetTheory.PGame.covariantClass_add_le","line":1535,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.covariantClass_add_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.covariantClass_add_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">covariantClass_add_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1532-L1533","name":"SetTheory.PGame.covariantClass_swap_add_le","line":1532,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.covariantClass_swap_add_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.covariantClass_swap_add_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">covariantClass_swap_add_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1508-L1509","name":"SetTheory.PGame.sub_self_equiv","line":1508,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_self_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_self_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">sub_self_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1505-L1506","name":"SetTheory.PGame.add_right_neg_equiv","line":1505,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_right_neg_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_right_neg_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_right_neg_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1502-L1503","name":"SetTheory.PGame.zero_le_add_right_neg","line":1502,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_add_right_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_add_right_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_le_add_right_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1499-L1500","name":"SetTheory.PGame.add_right_neg_le_zero","line":1499,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_right_neg_le_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_right_neg_le_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_right_neg_le_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1496-L1497","name":"SetTheory.PGame.add_left_neg_equiv","line":1496,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_left_neg_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_left_neg_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_left_neg_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1492-L1494","name":"SetTheory.PGame.zero_le_add_left_neg","line":1492,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_add_left_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_add_left_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_le_add_left_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1478-L1490","name":"SetTheory.PGame.add_left_neg_le_zero","line":1478,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_left_neg_le_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_left_neg_le_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_left_neg_le_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1475-L1476","name":"SetTheory.PGame.add_assoc_equiv","line":1475,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_assoc_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_assoc_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_assoc_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1462-L1473","name":"SetTheory.PGame.addAssocRelabelling","line":1462,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.addAssocRelabelling","doc":"`(x + y) + z` has exactly the same moves as `x + (y + z)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.addAssocRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">addAssocRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1458-L1459","name":"SetTheory.PGame.add_comm_equiv","line":1458,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_comm_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_comm_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_comm_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1455-L1456","name":"SetTheory.PGame.add_comm_le","line":1455,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_comm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_comm_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_comm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1448-L1453","name":"SetTheory.PGame.addCommRelabelling","line":1448,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.addCommRelabelling","doc":"`x + y` has exactly the same moves as `y + x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.addCommRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">addCommRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1444-L1445","name":"SetTheory.PGame.neg_add_le","line":1444,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_add_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_add_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_add_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1435-L1442","name":"SetTheory.PGame.negAddRelabelling","line":1435,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.negAddRelabelling","doc":"`-(x + y)` has exactly the same moves as `-x + -y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.negAddRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">negAddRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1431-L1432","name":"SetTheory.PGame.Relabelling.subCongr","line":1431,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.subCongr","doc":"If `w` has the same moves as `x` and `y` has the same moves as `z`,\nthen `w - y` has the same moves as `x - z`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.subCongr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">subCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.Relabelling</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Relabelling</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1426-L1427","name":"SetTheory.PGame.sub_zero","line":1426,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.sub_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">sub_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1422-L1423","name":"SetTheory.PGame.instSub","line":1422,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instSub\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1410-L1420","name":"SetTheory.PGame.Relabelling.addCongr","line":1410,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.addCongr","doc":"If `w` has the same moves as `x` and `y` has the same moves as `z`,\nthen `w + y` has the same moves as `x + z`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.addCongr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">addCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.Relabelling</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Relabelling</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1401-L1406","name":"SetTheory.PGame.isEmpty_nat_rightMoves","line":1401,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_nat_rightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_nat_rightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_nat_rightMoves</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1393-L1399","name":"SetTheory.PGame.rightMoves_add_cases","line":1393,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_add_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_add_cases\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_add_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesAdd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">j</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesAdd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">j</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1385-L1391","name":"SetTheory.PGame.leftMoves_add_cases","line":1385,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_add_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_add_cases\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_add_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesAdd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesAdd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1379-L1383","name":"SetTheory.PGame.add_moveRight_inr","line":1379,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_moveRight_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_moveRight_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_moveRight_inr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesAdd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1373-L1376","name":"SetTheory.PGame.mk_add_moveRight_inr","line":1373,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_add_moveRight_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_add_moveRight_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_add_moveRight_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">yr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>)</span>.moveRight</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1366-L1370","name":"SetTheory.PGame.add_moveLeft_inr","line":1366,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_moveLeft_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_moveLeft_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_moveLeft_inr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesAdd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1360-L1363","name":"SetTheory.PGame.mk_add_moveLeft_inr","line":1360,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_add_moveLeft_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_add_moveLeft_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_add_moveLeft_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1353-L1357","name":"SetTheory.PGame.add_moveRight_inl","line":1353,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_moveRight_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_moveRight_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_moveRight_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesAdd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1347-L1350","name":"SetTheory.PGame.mk_add_moveRight_inl","line":1347,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_add_moveRight_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_add_moveRight_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_add_moveRight_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.moveRight</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1340-L1344","name":"SetTheory.PGame.add_moveLeft_inl","line":1340,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_moveLeft_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_moveLeft_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_moveLeft_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesAdd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1334-L1337","name":"SetTheory.PGame.mk_add_moveLeft_inl","line":1334,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_add_moveLeft_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_add_moveLeft_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_add_moveLeft_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1330-L1331","name":"SetTheory.PGame.toRightMovesAdd","line":1330,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toRightMovesAdd","doc":"Converts a right move for `x` or `y` into a right move for `x + y` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toRightMovesAdd\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toRightMovesAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1323-L1324","name":"SetTheory.PGame.toLeftMovesAdd","line":1323,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toLeftMovesAdd","doc":"Converts a left move for `x` or `y` into a left move for `x + y` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toLeftMovesAdd\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toLeftMovesAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1316-L1317","name":"SetTheory.PGame.rightMoves_add","line":1316,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_add\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1313-L1314","name":"SetTheory.PGame.leftMoves_add","line":1313,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_add\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1310-L1311","name":"SetTheory.PGame.zero_add_equiv","line":1310,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_add_equiv","doc":"`0 + x` is equivalent to `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_add_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_add_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1304-L1307","name":"SetTheory.PGame.zeroAddRelabelling","line":1304,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zeroAddRelabelling","doc":"`0 + x` has exactly the same moves as `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zeroAddRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zeroAddRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span>)</span>.Relabelling</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1300-L1301","name":"SetTheory.PGame.add_zero_equiv","line":1300,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_zero_equiv","doc":"`x + 0` is equivalent to `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.add_zero_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">add_zero_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1293-L1297","name":"SetTheory.PGame.addZeroRelabelling","line":1293,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.addZeroRelabelling","doc":"`x + 0` has exactly the same moves as `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.addZeroRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">addZeroRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span></span>)</span>.Relabelling</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1285-L1290","name":"SetTheory.PGame.isEmpty_rightMoves_add","line":1285,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_rightMoves_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_rightMoves_add\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_rightMoves_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1278-L1283","name":"SetTheory.PGame.isEmpty_leftMoves_add","line":1278,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_leftMoves_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_leftMoves_add\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_leftMoves_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.LeftMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1275-L1276","name":"SetTheory.PGame.nat_succ","line":1275,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.nat_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.nat_succ\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">nat_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1271-L1272","name":"SetTheory.PGame.instNatCast","line":1271,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instNatCast","doc":"The pre-game `((0+1)+⋯)+1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instNatCast\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instNatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1259-L1268","name":"SetTheory.PGame.instAdd","line":1259,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instAdd","doc":"The sum of `x = {xL | xR}` and `y = {yL | yR}` is `{xL + y, x + yL | xR + y, x + yR}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instAdd\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1254-L1254","name":"SetTheory.PGame.zero_fuzzy_neg_iff","line":1254,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_fuzzy_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_fuzzy_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_fuzzy_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy\">SetTheory.PGame.Fuzzy</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy\">SetTheory.PGame.Fuzzy</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1251-L1251","name":"SetTheory.PGame.zero_equiv_neg_iff","line":1251,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_equiv_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_equiv_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_equiv_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1248-L1248","name":"SetTheory.PGame.neg_fuzzy_zero_iff","line":1248,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_fuzzy_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_fuzzy_zero_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_fuzzy_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.Fuzzy</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1245-L1245","name":"SetTheory.PGame.neg_equiv_zero_iff","line":1245,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_equiv_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_equiv_zero_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_equiv_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1242-L1242","name":"SetTheory.PGame.zero_lt_neg_iff","line":1242,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lt_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lt_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_lt_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1239-L1239","name":"SetTheory.PGame.neg_lt_zero_iff","line":1239,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lt_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lt_zero_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_lt_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1236-L1236","name":"SetTheory.PGame.zero_lf_neg_iff","line":1236,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lf_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lf_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_lf_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\">SetTheory.PGame.LF</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1233-L1233","name":"SetTheory.PGame.neg_lf_zero_iff","line":1233,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lf_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lf_zero_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_lf_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.LF</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\">SetTheory.PGame.LF</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1230-L1230","name":"SetTheory.PGame.zero_le_neg_iff","line":1230,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_le_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1227-L1227","name":"SetTheory.PGame.neg_le_zero_iff","line":1227,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_le_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_le_zero_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_le_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1224-L1224","name":"SetTheory.PGame.lt_neg_iff","line":1224,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1222-L1222","name":"SetTheory.PGame.lf_neg_iff","line":1222,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1220-L1220","name":"SetTheory.PGame.le_neg_iff","line":1220,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1217-L1218","name":"SetTheory.PGame.neg_fuzzy_iff","line":1217,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_fuzzy_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_fuzzy_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_fuzzy_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.Fuzzy</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1214-L1215","name":"SetTheory.PGame.neg_equiv_iff","line":1214,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_equiv_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_equiv_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_equiv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1212-L1212","name":"SetTheory.PGame.neg_lt_iff","line":1212,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lt_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1210-L1210","name":"SetTheory.PGame.neg_lf_iff","line":1210,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lf_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lf_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_lf_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span>.LF</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.LF</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1208-L1208","name":"SetTheory.PGame.neg_le_iff","line":1208,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_le_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1205-L1206","name":"SetTheory.PGame.neg_fuzzy_neg_iff","line":1205,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_fuzzy_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_fuzzy_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_fuzzy_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.Fuzzy</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1200-L1202","name":"SetTheory.PGame.neg_equiv_neg_iff","line":1200,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_equiv_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_equiv_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_equiv_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1196-L1197","name":"SetTheory.PGame.neg_lt_neg_iff","line":1196,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lt_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lt_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_lt_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1192-L1193","name":"SetTheory.PGame.neg_lf_neg_iff","line":1192,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lf_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_lf_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_lf_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1188-L1189","name":"SetTheory.PGame.neg_le_neg_iff","line":1188,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_le_neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_le_neg_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_le_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1173-L1175","name":"SetTheory.PGame.Relabelling.negCongr","line":1173,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.negCongr","doc":"If `x` has the same moves as `y`, then `-x` has the same moves as `-y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.negCongr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">negCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1169-L1170","name":"SetTheory.PGame.moveRight_neg_symm'","line":1169,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_neg_symm'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_neg_symm'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveRight_neg_symm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesNeg</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1166-L1167","name":"SetTheory.PGame.moveRight_neg_symm","line":1166,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_neg_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_neg_symm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveRight_neg_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesNeg</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1163-L1164","name":"SetTheory.PGame.moveLeft_neg_symm'","line":1163,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_neg_symm'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_neg_symm'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveLeft_neg_symm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesNeg</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1160-L1161","name":"SetTheory.PGame.moveLeft_neg_symm","line":1160,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_neg_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_neg_symm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveLeft_neg_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesNeg</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.moveRight</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1155-L1158","name":"SetTheory.PGame.moveRight_neg'","line":1155,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_neg'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_neg'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveRight_neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.moveRight</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesNeg</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1150-L1152","name":"SetTheory.PGame.moveRight_neg","line":1150,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveRight_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toRightMovesNeg</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1146-L1148","name":"SetTheory.PGame.moveLeft_neg'","line":1146,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_neg'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_neg'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveLeft_neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesNeg</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1141-L1143","name":"SetTheory.PGame.moveLeft_neg","line":1141,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveLeft_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toLeftMovesNeg</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1138-L1139","name":"SetTheory.PGame.toRightMovesNeg","line":1138,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toRightMovesNeg","doc":"Turns a left move for `x` into a right move for `-x` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toRightMovesNeg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toRightMovesNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1131-L1132","name":"SetTheory.PGame.toLeftMovesNeg","line":1131,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toLeftMovesNeg","doc":"Turns a right move for `x` into a left move for `-x` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toLeftMovesNeg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toLeftMovesNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.LeftMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1124-L1125","name":"SetTheory.PGame.rightMoves_neg","line":1124,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.RightMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1121-L1122","name":"SetTheory.PGame.leftMoves_neg","line":1121,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.LeftMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1118-L1119","name":"SetTheory.PGame.isOption_neg_neg","line":1118,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isOption_neg_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isOption_neg_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isOption_neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.IsOption</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.IsOption</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1108-L1115","name":"SetTheory.PGame.isOption_neg","line":1108,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isOption_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isOption_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isOption_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.IsOption</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span>.IsOption</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1089-L1106","name":"SetTheory.PGame.neg_ofLists","line":1089,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_ofLists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_ofLists\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_ofLists</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1082-L1086","name":"SetTheory.PGame.instNegZeroClass","line":1082,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instNegZeroClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instNegZeroClass\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instNegZeroClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#NegZeroClass\">NegZeroClass</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1076-L1080","name":"SetTheory.PGame.instInvolutiveNeg","line":1076,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instInvolutiveNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instInvolutiveNeg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instInvolutiveNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#InvolutiveNeg\">InvolutiveNeg</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1073-L1074","name":"SetTheory.PGame.neg_def","line":1073,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg_def\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xr</span> <span class=\"fn\">xl</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">xr</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">j</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">xl</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1069-L1070","name":"SetTheory.PGame.instNeg","line":1069,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instNeg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1066-L1067","name":"SetTheory.PGame.neg","line":1066,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg","doc":"The negation of `{L | R}` is `{-R | -L}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1057-L1060","name":"SetTheory.PGame.relabelRelabelling","line":1057,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabelRelabelling","doc":"The game obtained by relabelling the next moves is a relabelling of the original game. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabelRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabelRelabelling</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(el : <span class=\"fn\"><span class=\"fn\">xl'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(er : <span class=\"fn\"><span class=\"fn\">xr'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel\">SetTheory.PGame.relabel</a> <span class=\"fn\">el</span> <span class=\"fn\">er</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1053-L1054","name":"SetTheory.PGame.relabel_moveRight","line":1053,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel_moveRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel_moveRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabel_moveRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(el : <span class=\"fn\"><span class=\"fn\">xl'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(er : <span class=\"fn\"><span class=\"fn\">xr'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel\">SetTheory.PGame.relabel</a> <span class=\"fn\">el</span> <span class=\"fn\">er</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">er</span>.symm</span> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1049-L1051","name":"SetTheory.PGame.relabel_moveRight'","line":1049,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel_moveRight'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel_moveRight'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabel_moveRight'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(el : <span class=\"fn\"><span class=\"fn\">xl'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(er : <span class=\"fn\"><span class=\"fn\">xr'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">xr'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel\">SetTheory.PGame.relabel</a> <span class=\"fn\">el</span> <span class=\"fn\">er</span></span>)</span>.moveRight</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">er</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1045-L1046","name":"SetTheory.PGame.relabel_moveLeft","line":1045,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel_moveLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel_moveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabel_moveLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(el : <span class=\"fn\"><span class=\"fn\">xl'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(er : <span class=\"fn\"><span class=\"fn\">xr'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel\">SetTheory.PGame.relabel</a> <span class=\"fn\">el</span> <span class=\"fn\">er</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">el</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1041-L1043","name":"SetTheory.PGame.relabel_moveLeft'","line":1041,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel_moveLeft'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel_moveLeft'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabel_moveLeft'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(el : <span class=\"fn\"><span class=\"fn\">xl'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(er : <span class=\"fn\"><span class=\"fn\">xr'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">xl'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel\">SetTheory.PGame.relabel</a> <span class=\"fn\">el</span> <span class=\"fn\">er</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">el</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1037-L1038","name":"SetTheory.PGame.relabel","line":1037,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel","doc":"Replace the types indexing the next moves for Left and Right by equivalent types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.relabel\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(el : <span class=\"fn\"><span class=\"fn\">xl'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(er : <span class=\"fn\"><span class=\"fn\">xr'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1033-L1034","name":"SetTheory.PGame.instCoeRelabellingEquiv","line":1033,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instCoeRelabellingEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instCoeRelabellingEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instCoeRelabellingEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1030-L1031","name":"SetTheory.PGame.Equiv.isEmpty","line":1030,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.isEmpty\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1025-L1026","name":"SetTheory.PGame.Relabelling.isEmpty","line":1025,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.isEmpty","doc":"Any game without left or right moves is a relabelling of 0. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.isEmpty\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1020-L1022","name":"SetTheory.PGame.Relabelling.trans","line":1020,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.trans","doc":"Transitivity of relabelling. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.trans\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Relabelling</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1015-L1016","name":"SetTheory.PGame.Relabelling.equiv","line":1015,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.equiv","doc":"A relabelling lets us prove equivalence of games. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1011-L1012","name":"SetTheory.PGame.Relabelling.ge","line":1011,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.ge\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1005-L1009","name":"SetTheory.PGame.Relabelling.le","line":1005,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L1002-L1003","name":"SetTheory.PGame.Relabelling.symm","line":1002,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.symm","doc":"Flip a relabelling. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.symm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Relabelling</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L997-L998","name":"SetTheory.PGame.Relabelling.instInhabited","line":997,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.instInhabited\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L993-L995","name":"SetTheory.PGame.Relabelling.refl","line":993,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.refl","doc":"The identity relabelling. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.refl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L987-L989","name":"SetTheory.PGame.Relabelling.moveRightSymm","line":987,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.moveRightSymm","doc":"A right move of `y` is a relabelling of a right move of `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.moveRightSymm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">moveRightSymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.rightMovesEquiv</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L982-L984","name":"SetTheory.PGame.Relabelling.moveRight","line":982,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.moveRight","doc":"A right move of `x` is a relabelling of a right move of `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.moveRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">moveRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">i</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.rightMovesEquiv</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L977-L979","name":"SetTheory.PGame.Relabelling.moveLeftSymm","line":977,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.moveLeftSymm","doc":"A left move of `y` is a relabelling of a left move of `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.moveLeftSymm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">moveLeftSymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.leftMovesEquiv</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L973-L974","name":"SetTheory.PGame.Relabelling.moveLeft","line":973,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.moveLeft","doc":"A left move of `x` is a relabelling of a left move of `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.moveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">moveLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.leftMovesEquiv</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L968-L970","name":"SetTheory.PGame.Relabelling.mk'_rightMovesEquiv","line":968,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk'_rightMovesEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk'_rightMovesEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">mk'_rightMovesEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hL : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span>)</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hR : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">j</span></span>)</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk'\">SetTheory.PGame.Relabelling.mk'</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">hL</span> <span class=\"fn\">hR</span></span>)</span>.rightMovesEquiv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">R</span>.symm</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L964-L965","name":"SetTheory.PGame.Relabelling.mk_rightMovesEquiv","line":964,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk_rightMovesEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk_rightMovesEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">mk_rightMovesEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hL : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hR : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">j</span></span>)</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk\">SetTheory.PGame.Relabelling.mk</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">hL</span> <span class=\"fn\">hR</span></span>)</span>.rightMovesEquiv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L960-L961","name":"SetTheory.PGame.Relabelling.rightMovesEquiv","line":960,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.rightMovesEquiv","doc":"The equivalence between right moves of `x` and `y` given by the relabelling. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.rightMovesEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">rightMovesEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L955-L957","name":"SetTheory.PGame.Relabelling.mk'_leftMovesEquiv","line":955,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk'_leftMovesEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk'_leftMovesEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">mk'_leftMovesEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hL : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span>)</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hR : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">j</span></span>)</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk'\">SetTheory.PGame.Relabelling.mk'</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">hL</span> <span class=\"fn\">hR</span></span>)</span>.leftMovesEquiv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L</span>.symm</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L951-L952","name":"SetTheory.PGame.Relabelling.mk_leftMovesEquiv","line":951,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk_leftMovesEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk_leftMovesEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">mk_leftMovesEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hL : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hR : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">j</span></span>)</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk\">SetTheory.PGame.Relabelling.mk</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">hL</span> <span class=\"fn\">hR</span></span>)</span>.leftMovesEquiv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L947-L948","name":"SetTheory.PGame.Relabelling.leftMovesEquiv","line":947,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.leftMovesEquiv","doc":"The equivalence between left moves of `x` and `y` given by the relabelling. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.leftMovesEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">leftMovesEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L941-L944","name":"SetTheory.PGame.Relabelling.mk'","line":941,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk'","doc":"A constructor for relabellings swapping the equivalences. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hL : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span>)</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hR : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">j</span></span>)</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L933-L934","name":"SetTheory.PGame.«term_≡r_»","line":933,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.«term_≡r_»","doc":"`Relabelling x y` says that `x` and `y` are really the same game, just dressed up differently.\nSpecifically, there is a bijection between the moves for Left in `x` and in `y`, and similarly\nfor Right, and under these bijections we inductively have `Relabelling`s for the consequent games.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.«term_≡r_»\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">«term_≡r_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L927-L931","name":"SetTheory.PGame.Relabelling.mk","line":927,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling.mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span>)</span> →\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.Relabelling</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">j</span></span>)</span></span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Relabelling</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L926-L931","name":"SetTheory.PGame.Relabelling","line":926,"kind":"inductive","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling","doc":"`Relabelling x y` says that `x` and `y` are really the same game, just dressed up differently.\nSpecifically, there is a bijection between the moves for Left in `x` and in `y`, and similarly\nfor Right, and under these bijections we inductively have `Relabelling`s for the consequent games.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Relabelling</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./foundational_types.html\">Type</a> (u + 1)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L915-L917","name":"SetTheory.PGame.lt_or_equiv_or_gf","line":915,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_or_equiv_or_gf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_or_equiv_or_gf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_or_equiv_or_gf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L899-L913","name":"SetTheory.PGame.lt_or_equiv_or_gt_or_fuzzy","line":899,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_or_equiv_or_gt_or_fuzzy","doc":"Exactly one of the following is true (although we don't prove this here). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_or_equiv_or_gt_or_fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_or_equiv_or_gt_or_fuzzy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L895-L896","name":"SetTheory.PGame.fuzzy_of_equiv_of_fuzzy","line":895,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_of_equiv_of_fuzzy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_of_equiv_of_fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fuzzy_of_equiv_of_fuzzy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Fuzzy</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L891-L892","name":"SetTheory.PGame.fuzzy_of_fuzzy_of_equiv","line":891,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_of_fuzzy_of_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_of_fuzzy_of_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fuzzy_of_fuzzy_of_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L887-L888","name":"SetTheory.PGame.fuzzy_congr_right","line":887,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_congr_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fuzzy_congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L884-L885","name":"SetTheory.PGame.fuzzy_congr_left","line":884,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_congr_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fuzzy_congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.Fuzzy</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.Fuzzy</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L881-L882","name":"SetTheory.PGame.fuzzy_congr_imp","line":881,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_congr_imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_congr_imp\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fuzzy_congr_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.Fuzzy</span> <span class=\"fn\">y₁</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.Fuzzy</span> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L878-L879","name":"SetTheory.PGame.fuzzy_congr","line":878,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_congr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fuzzy_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.Fuzzy</span> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.Fuzzy</span> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L875-L876","name":"SetTheory.PGame.Equiv.not_fuzzy'","line":875,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.not_fuzzy'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.not_fuzzy'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">not_fuzzy'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Fuzzy</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L872-L873","name":"SetTheory.PGame.Equiv.not_fuzzy","line":872,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.not_fuzzy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.not_fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">not_fuzzy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L870-L870","name":"SetTheory.PGame.not_fuzzy_of_ge","line":870,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.not_fuzzy_of_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.not_fuzzy_of_ge\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">not_fuzzy_of_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L868-L868","name":"SetTheory.PGame.not_fuzzy_of_le","line":868,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.not_fuzzy_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.not_fuzzy_of_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">not_fuzzy_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L866-L866","name":"SetTheory.PGame.Fuzzy.not_equiv'","line":866,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.not_equiv'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.not_equiv'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Fuzzy</span>.<span class=\"name\">not_equiv'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L864-L864","name":"SetTheory.PGame.Fuzzy.not_equiv","line":864,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.not_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.not_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Fuzzy</span>.<span class=\"name\">not_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L861-L862","name":"SetTheory.PGame.lt_or_fuzzy_of_lf","line":861,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_or_fuzzy_of_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_or_fuzzy_of_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_or_fuzzy_of_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L859-L859","name":"SetTheory.PGame.Fuzzy.lf","line":859,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.lf","doc":"**Alias** of `SetTheory.PGame.lf_of_fuzzy`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Fuzzy</span>.<span class=\"name\">lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L856-L857","name":"SetTheory.PGame.lf_of_fuzzy","line":856,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_fuzzy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_fuzzy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L852-L854","name":"SetTheory.PGame.lf_iff_lt_or_fuzzy","line":852,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_iff_lt_or_fuzzy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_iff_lt_or_fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_iff_lt_or_fuzzy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L849-L850","name":"SetTheory.PGame.instIsIrreflFuzzy","line":849,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsIrreflFuzzy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsIrreflFuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instIsIrreflFuzzy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L847-L847","name":"SetTheory.PGame.fuzzy_irrefl","line":847,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.fuzzy_irrefl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fuzzy_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L844-L845","name":"SetTheory.PGame.Fuzzy.swap_iff","line":844,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.swap_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.swap_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Fuzzy</span>.<span class=\"name\">swap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Fuzzy</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L841-L842","name":"SetTheory.PGame.instIsSymmFuzzy","line":841,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsSymmFuzzy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsSymmFuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instIsSymmFuzzy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsSymm\">IsSymm</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L838-L839","name":"SetTheory.PGame.Fuzzy.swap","line":838,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy.swap\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Fuzzy</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Fuzzy</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Fuzzy</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L834-L835","name":"SetTheory.PGame.«term_‖_»","line":834,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.«term_‖_»","doc":"The fuzzy, confused, or incomparable relation on pre-games.\n\nIf `x ‖ 0`, then the first player can always win `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.«term_‖_»\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">«term_‖_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L831-L832","name":"SetTheory.PGame.Fuzzy","line":831,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy","doc":"The fuzzy, confused, or incomparable relation on pre-games.\n\nIf `x ‖ 0`, then the first player can always win `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Fuzzy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L821-L826","name":"SetTheory.PGame.equiv_of_mk_equiv","line":821,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_of_mk_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_of_mk_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_of_mk_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">j</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L817-L819","name":"SetTheory.PGame.equiv_congr_right","line":817,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_congr_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y₁</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x₂</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₁</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L813-L815","name":"SetTheory.PGame.equiv_congr_left","line":813,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_congr_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x₁</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L805-L811","name":"SetTheory.PGame.lf_or_equiv_or_gf","line":805,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_or_equiv_or_gf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_or_equiv_or_gf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_or_equiv_or_gf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L802-L803","name":"SetTheory.PGame.lt_or_equiv_of_le","line":802,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_or_equiv_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_or_equiv_of_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_or_equiv_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L799-L800","name":"SetTheory.PGame.lt_congr_right","line":799,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_congr_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L796-L797","name":"SetTheory.PGame.lt_congr_left","line":796,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_congr_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L793-L794","name":"SetTheory.PGame.lt_congr","line":793,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_congr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L790-L791","name":"SetTheory.PGame.lt_congr_imp","line":790,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_congr_imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_congr_imp\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_congr_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L784-L788","name":"SetTheory.PGame.instTransEquivLt","line":784,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransEquivLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransEquivLt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instTransEquivLt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L781-L782","name":"SetTheory.PGame.lt_of_equiv_of_lt","line":781,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_of_equiv_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_of_equiv_of_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_of_equiv_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L774-L778","name":"SetTheory.PGame.instTransLtEquiv","line":774,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLtEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLtEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instTransLtEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L771-L772","name":"SetTheory.PGame.lt_of_lt_of_equiv","line":771,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_of_lt_of_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_of_lt_of_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_of_lt_of_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L768-L768","name":"SetTheory.PGame.instTransEquivLF","line":768,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransEquivLF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransEquivLF\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instTransEquivLF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L765-L766","name":"SetTheory.PGame.lf_of_equiv_of_lf","line":765,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_equiv_of_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_equiv_of_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_equiv_of_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L762-L762","name":"SetTheory.PGame.instTransLFEquiv","line":762,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLFEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLFEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instTransLFEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L759-L760","name":"SetTheory.PGame.lf_of_lf_of_equiv","line":759,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lf_of_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lf_of_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_lf_of_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L755-L756","name":"SetTheory.PGame.lf_congr_right","line":755,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_congr_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L752-L753","name":"SetTheory.PGame.lf_congr_left","line":752,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_congr_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.LF</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.LF</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L749-L750","name":"SetTheory.PGame.lf_congr_imp","line":749,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_congr_imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_congr_imp\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_congr_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.LF</span> <span class=\"fn\">y₁</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.LF</span> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L746-L747","name":"SetTheory.PGame.lf_congr","line":746,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_congr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.LF</span> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.LF</span> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L743-L744","name":"SetTheory.PGame.le_congr_right","line":743,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_congr_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L740-L741","name":"SetTheory.PGame.le_congr_left","line":740,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_congr_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L737-L738","name":"SetTheory.PGame.le_congr","line":737,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_congr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L734-L735","name":"SetTheory.PGame.le_congr_imp","line":734,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_congr_imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_congr_imp\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_congr_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₁ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₂ : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L732-L732","name":"SetTheory.PGame.LF.not_gt","line":732,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.not_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.not_gt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">LF</span>.<span class=\"name\">not_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L730-L730","name":"SetTheory.PGame.LF.not_equiv'","line":730,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.not_equiv'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.not_equiv'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">LF</span>.<span class=\"name\">not_equiv'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L728-L728","name":"SetTheory.PGame.LF.not_equiv","line":728,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.not_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.not_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">LF</span>.<span class=\"name\">not_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L722-L726","name":"SetTheory.PGame.instTransEquivLe","line":722,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransEquivLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransEquivLe\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instTransEquivLe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L719-L720","name":"SetTheory.PGame.le_of_equiv_of_le","line":719,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_of_equiv_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_of_equiv_of_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_of_equiv_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L712-L716","name":"SetTheory.PGame.instTransLeEquiv","line":712,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLeEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLeEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instTransLeEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L709-L710","name":"SetTheory.PGame.le_of_le_of_equiv","line":709,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_of_le_of_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_of_le_of_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_of_le_of_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L706-L706","name":"SetTheory.PGame.equiv_of_eq","line":706,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_of_eq\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L703-L704","name":"SetTheory.PGame.equiv_comm","line":703,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_comm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L700-L701","name":"SetTheory.PGame.Equiv.trans","line":700,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.trans\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L696-L697","name":"SetTheory.PGame.Equiv.symm","line":696,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.symm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L692-L693","name":"SetTheory.PGame.equiv_refl","line":692,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_refl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L689-L690","name":"SetTheory.PGame.equiv_rfl","line":689,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_rfl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L685-L686","name":"SetTheory.PGame.Equiv.ge","line":685,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.ge\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L682-L683","name":"SetTheory.PGame.Equiv.le","line":682,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv.le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L680-L680","name":"SetTheory.PGame.equiv_def","line":680,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.equiv_def\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L677-L678","name":"SetTheory.PGame.setoid","line":677,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.setoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.setoid\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">setoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L670-L673","name":"SetTheory.PGame.instIsEquivEquiv","line":670,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsEquivEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsEquivEquiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instIsEquivEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsEquiv\">IsEquiv</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv\">SetTheory.PGame.Equiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L664-L665","name":"SetTheory.PGame.Equiv","line":664,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv","doc":"The equivalence relation on pre-games. Two pre-games `x`, `y` are equivalent if `x ≤ y` and\n`y ≤ x`.\n\nIf `x ≈ 0`, then the second player can always win `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L657-L658","name":"SetTheory.PGame.bddBelow_of_small","line":657,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.bddBelow_of_small","doc":"A small set of pre-games is bounded below. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.bddBelow_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">bddBelow_of_small</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a>        <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddBelow\">BddBelow</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L648-L654","name":"SetTheory.PGame.bddBelow_range_of_small","line":648,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.bddBelow_range_of_small","doc":"A small family of pre-games is bounded below. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.bddBelow_range_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">bddBelow_range_of_small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u_1}</a>      <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddBelow\">BddBelow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L644-L645","name":"SetTheory.PGame.bddAbove_of_small","line":644,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.bddAbove_of_small","doc":"A small set of pre-games is bounded above. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.bddAbove_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">bddAbove_of_small</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a>        <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L635-L641","name":"SetTheory.PGame.bddAbove_range_of_small","line":635,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.bddAbove_range_of_small","doc":"A small family of pre-games is bounded above. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.bddAbove_range_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">bddAbove_range_of_small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u_1}</a>      <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Basic.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L630-L632","name":"SetTheory.PGame.leftResponse_spec","line":630,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftResponse_spec","doc":"Show that the response for left provided by `leftResponse` preserves the left-player-wins\ncondition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftResponse_spec\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftResponse_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftResponse\">SetTheory.PGame.leftResponse</a> <span class=\"fn\">h</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L624-L626","name":"SetTheory.PGame.leftResponse","line":624,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftResponse","doc":"Given a game won by the left player when they play second, provide a response to any move by\nright. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftResponse\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftResponse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.LeftMoves</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L618-L620","name":"SetTheory.PGame.rightResponse_spec","line":618,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightResponse_spec","doc":"Show that the response for right provided by `rightResponse` preserves the right-player-wins\ncondition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightResponse_spec\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightResponse_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightResponse\">SetTheory.PGame.rightResponse</a> <span class=\"fn\">h</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L612-L614","name":"SetTheory.PGame.rightResponse","line":612,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightResponse","doc":"Given a game won by the right player when they play second, provide a response to any move by\nleft. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightResponse\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightResponse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.RightMoves</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L607-L608","name":"SetTheory.PGame.le_zero_of_isEmpty_leftMoves","line":607,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_zero_of_isEmpty_leftMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_zero_of_isEmpty_leftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_zero_of_isEmpty_leftMoves</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L603-L604","name":"SetTheory.PGame.zero_le_of_isEmpty_rightMoves","line":603,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_of_isEmpty_rightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_of_isEmpty_rightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_le_of_isEmpty_rightMoves</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L598-L600","name":"SetTheory.PGame.lf_zero","line":598,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_zero","doc":"The definition of `x ⧏ 0` on pre-games, in terms of `⧏ 0` two moves later. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>), <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">0</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L593-L595","name":"SetTheory.PGame.zero_lf","line":593,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lf","doc":"The definition of `0 ⧏ x` on pre-games, in terms of `0 ⧏` two moves later. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\">SetTheory.PGame.LF</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.RightMoves</span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\">SetTheory.PGame.LF</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L588-L590","name":"SetTheory.PGame.le_zero","line":588,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_zero","doc":"The definition of `x ≤ 0` on pre-games, in terms of `≤ 0` two moves later. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.moveRight</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L583-L585","name":"SetTheory.PGame.zero_le","line":583,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le","doc":"The definition of `0 ≤ x` on pre-games, in terms of `0 ≤` two moves later. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>), <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L578-L580","name":"SetTheory.PGame.lf_zero_le","line":578,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_zero_le","doc":"The definition of `x ⧏ 0` on pre-games, in terms of `≤ 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_zero_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_zero_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L573-L575","name":"SetTheory.PGame.zero_lf_le","line":573,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lf_le","doc":"The definition of `0 ⧏ x` on pre-games, in terms of `0 ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_lf_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_lf_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\">SetTheory.PGame.LF</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L568-L570","name":"SetTheory.PGame.le_zero_lf","line":568,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_zero_lf","doc":"The definition of `x ≤ 0` on pre-games, in terms of `⧏ 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_zero_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_zero_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L563-L565","name":"SetTheory.PGame.zero_le_lf","line":563,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_lf","doc":"The definition of `0 ≤ x` on pre-games, in terms of `0 ⧏`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_le_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_le_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\">SetTheory.PGame.LF</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L553-L560","name":"SetTheory.PGame.lf_def","line":553,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_def","doc":"The definition of `x ⧏ y` on pre-games, in terms of `⧏` two moves later. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_def\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>),\n      <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i'</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i'</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a>     <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>),\n      <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">y</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\">∀ (<span class=\"fn\">j'</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j'</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L543-L550","name":"SetTheory.PGame.le_def","line":543,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_def","doc":"The definition of `x ≤ y` on pre-games, in terms of `≤` two moves later. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_def\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>),\n      <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (<span class=\"fn\">i'</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i'</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a>         <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.moveRight</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>),\n      <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a>         <span class=\"fn\">∃ (<span class=\"fn\">j'</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L538-L540","name":"SetTheory.PGame.le_of_forall_lt","line":538,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_of_forall_lt","doc":"This special case of `PGame.le_of_forall_lf` is useful when dealing with surreals, where `<` is\npreferred over `⧏`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_of_forall_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_of_forall_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L533-L534","name":"SetTheory.PGame.mk_lf","line":533,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">xr</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">j</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L530-L531","name":"SetTheory.PGame.lf_mk","line":530,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">xl</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L527-L528","name":"SetTheory.PGame.lf_moveRight","line":527,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_moveRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_moveRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_moveRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L524-L525","name":"SetTheory.PGame.moveLeft_lf","line":524,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveLeft_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L522-L522","name":"SetTheory.PGame.LF.trans_lt","line":522,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.trans_lt","doc":"**Alias** of `SetTheory.PGame.lf_of_lf_of_lt`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.trans_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">LF</span>.<span class=\"name\">trans_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L520-L520","name":"LT.lt.trans_lf","line":520,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#LT.lt.trans_lf","doc":"**Alias** of `SetTheory.PGame.lf_of_lt_of_lf`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#LT.lt.trans_lf\"><span class=\"name\">LT</span>.<span class=\"name\">lt</span>.<span class=\"name\">trans_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L517-L518","name":"SetTheory.PGame.lf_of_lf_of_lt","line":517,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lf_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lf_of_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_lf_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L513-L514","name":"SetTheory.PGame.lf_of_lt_of_lf","line":513,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lt_of_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lt_of_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_lt_of_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L510-L510","name":"SetTheory.PGame.LF.trans_le","line":510,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.trans_le","doc":"**Alias** of `SetTheory.PGame.lf_of_lf_of_le`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.trans_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">LF</span>.<span class=\"name\">trans_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L508-L508","name":"LE.le.trans_lf","line":508,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#LE.le.trans_lf","doc":"**Alias** of `SetTheory.PGame.lf_of_le_of_lf`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#LE.le.trans_lf\"><span class=\"name\">LE</span>.<span class=\"name\">le</span>.<span class=\"name\">trans_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L506-L506","name":"SetTheory.PGame.instTransLFLe","line":506,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLFLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLFLe\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instTransLFLe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L501-L503","name":"SetTheory.PGame.lf_of_lf_of_le","line":501,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lf_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lf_of_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_lf_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L498-L498","name":"SetTheory.PGame.instTransLeLF","line":498,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLeLF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instTransLeLF\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instTransLeLF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L493-L495","name":"SetTheory.PGame.lf_of_le_of_lf","line":493,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_le_of_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_le_of_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_le_of_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L489-L490","name":"SetTheory.PGame.instIsIrreflLF","line":489,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsIrreflLF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsIrreflLF\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instIsIrreflLF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L486-L487","name":"SetTheory.PGame.lf_irrefl","line":486,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_irrefl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L484-L484","name":"LT.lt.lf","line":484,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#LT.lt.lf","doc":"**Alias** of `SetTheory.PGame.lf_of_lt`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#LT.lt.lf\"><span class=\"name\">LT</span>.<span class=\"name\">lt</span>.<span class=\"name\">lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L481-L482","name":"SetTheory.PGame.lf_of_lt","line":481,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L478-L479","name":"SetTheory.PGame.lt_of_le_of_lf","line":478,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_of_le_of_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_of_le_of_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_of_le_of_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L475-L476","name":"SetTheory.PGame.lt_iff_le_and_lf","line":475,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_iff_le_and_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lt_iff_le_and_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_iff_le_and_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L454-L473","name":"SetTheory.PGame.instPreorder","line":454,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instPreorder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instPreorder\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instPreorder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L442-L443","name":"SetTheory.PGame.lf_mk_of_le","line":442,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_mk_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_mk_of_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_mk_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">i</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L439-L440","name":"SetTheory.PGame.mk_lf_of_le","line":439,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_lf_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_lf_of_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_lf_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.LF</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L436-L437","name":"SetTheory.PGame.lf_of_mk_le","line":436,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_mk_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_mk_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_mk_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> → <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\">yr</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L433-L434","name":"SetTheory.PGame.lf_of_le_mk","line":433,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_le_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_le_mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_le_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">xl</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L430-L431","name":"SetTheory.PGame.lf_of_le_moveLeft","line":430,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_le_moveLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_le_moveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_le_moveLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L427-L428","name":"SetTheory.PGame.lf_of_moveRight_le","line":427,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_moveRight_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_of_moveRight_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_of_moveRight_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L425-L425","name":"LE.le.lf_moveRight","line":425,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#LE.le.lf_moveRight","doc":"**Alias** of `SetTheory.PGame.lf_moveRight_of_le`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#LE.le.lf_moveRight\"><span class=\"name\">LE</span>.<span class=\"name\">le</span>.<span class=\"name\">lf_moveRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L422-L423","name":"SetTheory.PGame.lf_moveRight_of_le","line":422,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_moveRight_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_moveRight_of_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_moveRight_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L420-L420","name":"LE.le.moveLeft_lf","line":420,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#LE.le.moveLeft_lf","doc":"**Alias** of `SetTheory.PGame.moveLeft_lf_of_le`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#LE.le.moveLeft_lf\"><span class=\"name\">LE</span>.<span class=\"name\">le</span>.<span class=\"name\">moveLeft_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L417-L418","name":"SetTheory.PGame.moveLeft_lf_of_le","line":417,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_lf_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_lf_of_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveLeft_lf_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L413-L415","name":"SetTheory.PGame.le_or_gf","line":413,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_or_gf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_or_gf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_or_gf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L409-L411","name":"SetTheory.PGame.mk_lf_mk","line":409,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_lf_mk","doc":"Definition of `x ⧏ y` on pre-games built using the constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_lf_mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_lf_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\">yl</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\">xr</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L402-L405","name":"SetTheory.PGame.lf_iff_exists_le","line":402,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_iff_exists_le","doc":"Definition of `x ⧏ y` on pre-games, in terms of `≤`.\n\nThe ordering here is chosen so that `or.inl` refer to moves by Left, and `or.inr` refer to\nmoves by Right. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.lf_iff_exists_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_iff_exists_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L394-L396","name":"SetTheory.PGame.le_of_forall_lf","line":394,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_of_forall_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_of_forall_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_of_forall_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L390-L392","name":"SetTheory.PGame.mk_le_mk","line":390,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_le_mk","doc":"Definition of `x ≤ y` on pre-games built using the constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk_le_mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yL : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{yR : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">xl</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\">yr</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L381-L386","name":"SetTheory.PGame.le_iff_forall_lf","line":381,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_iff_forall_lf","doc":"Definition of `x ≤ y` on pre-games, in terms of `⧏`.\n\nThe ordering here is chosen so that `And.left` refer to moves by Left, and `And.right` refer to\nmoves by Right. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le_iff_forall_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_iff_forall_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.LF</span> <span class=\"fn\">y</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L374-L375","name":"SetTheory.PGame.LF.not_ge","line":374,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.not_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF.not_ge\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">LF</span>.<span class=\"name\">not_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L371-L372","name":"LE.le.not_gf","line":371,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#LE.le.not_gf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#LE.le.not_gf\"><span class=\"name\">LE</span>.<span class=\"name\">le</span>.<span class=\"name\">not_gf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L368-L369","name":"SetTheory.PGame.not_lf","line":368,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.not_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.not_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">not_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.LF</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L364-L365","name":"SetTheory.PGame.not_le","line":364,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.not_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.not_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.LF</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L360-L361","name":"SetTheory.PGame.«term_⧏_»","line":360,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.«term_⧏_»","doc":"The less or fuzzy relation on pre-games.\n\nIf `0 ⧏ x`, then Left can win `x` as the first player. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.«term_⧏_»\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">«term_⧏_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L357-L358","name":"SetTheory.PGame.LF","line":357,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF","doc":"The less or fuzzy relation on pre-games.\n\nIf `0 ⧏ x`, then Left can win `x` as the first player. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LF\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">LF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L349-L352","name":"SetTheory.PGame.le","line":349,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le","doc":"The less or equal relation on pre-games.\n\nIf `0 ≤ x`, then Left can win `x` as the second player. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L340-L341","name":"SetTheory.PGame.isEmpty_one_rightMoves","line":340,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_one_rightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_one_rightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_one_rightMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\">SetTheory.PGame.RightMoves</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L337-L338","name":"SetTheory.PGame.uniqueOneLeftMoves","line":337,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.uniqueOneLeftMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.uniqueOneLeftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">uniqueOneLeftMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L334-L335","name":"SetTheory.PGame.one_rightMoves","line":334,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.one_rightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.one_rightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">one_rightMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\">SetTheory.PGame.RightMoves</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u_1 + 1}</a>     </span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L330-L331","name":"SetTheory.PGame.one_moveLeft","line":330,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.one_moveLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.one_moveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">one_moveLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft\">SetTheory.PGame.moveLeft</a> <span class=\"fn\">1</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L326-L327","name":"SetTheory.PGame.one_leftMoves","line":326,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.one_leftMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.one_leftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">one_leftMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u_1 + 1}</a>     </span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L322-L323","name":"SetTheory.PGame.instOnePGame","line":322,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instOnePGame","doc":"The pre-game `One` is defined by `1 = { 0 | }`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instOnePGame\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instOnePGame</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L318-L319","name":"SetTheory.PGame.instInhabited","line":318,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instInhabited\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L315-L316","name":"SetTheory.PGame.isEmpty_zero_rightMoves","line":315,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_zero_rightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_zero_rightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_zero_rightMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\">SetTheory.PGame.RightMoves</a> <span class=\"fn\">0</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L312-L313","name":"SetTheory.PGame.isEmpty_zero_leftMoves","line":312,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_zero_leftMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isEmpty_zero_leftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_zero_leftMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">0</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L309-L310","name":"SetTheory.PGame.zero_rightMoves","line":309,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_rightMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_rightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_rightMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\">SetTheory.PGame.RightMoves</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u_1 + 1}</a>     </span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L305-L306","name":"SetTheory.PGame.zero_leftMoves","line":305,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_leftMoves","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.zero_leftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_leftMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u_1 + 1}</a>     </span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L301-L302","name":"SetTheory.PGame.instZero","line":301,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instZero","doc":"The pre-game `Zero` is defined by `0 = { | }`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instZero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L289-L291","name":"SetTheory.PGame.Subsequent.moveLeft_mk_right","line":289,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveLeft_mk_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveLeft_mk_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">moveLeft_mk_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span>)</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span>)</span>.moveLeft</span> <span class=\"fn\">j</span></span>)</span>.Subsequent</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L285-L287","name":"SetTheory.PGame.Subsequent.moveLeft_mk_left","line":285,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveLeft_mk_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveLeft_mk_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">moveLeft_mk_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span>)</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span>)</span>.moveLeft</span> <span class=\"fn\">j</span></span>)</span>.Subsequent</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L281-L283","name":"SetTheory.PGame.Subsequent.moveRight_mk_right","line":281,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveRight_mk_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveRight_mk_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">moveRight_mk_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span>)</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span>)</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.Subsequent</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L277-L279","name":"SetTheory.PGame.Subsequent.moveRight_mk_left","line":277,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveRight_mk_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveRight_mk_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">moveRight_mk_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span>)</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span>)</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.Subsequent</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L273-L275","name":"SetTheory.PGame.Subsequent.mk_right'","line":273,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.mk_right'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.mk_right'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">mk_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">j</span></span>)</span>.Subsequent</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L259-L263","name":"SetTheory.PGame.tacticPgame_wf_tac","line":259,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.tacticPgame_wf_tac","doc":"Discharges proof obligations of the form `⊢ Subsequent ..` arising in termination proofs\nof definitions using well-founded recursion on `PGame`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.tacticPgame_wf_tac\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">tacticPgame_wf_tac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L251-L253","name":"SetTheory.PGame.Subsequent.mk_right","line":251,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.mk_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.mk_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">mk_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">xr</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">j</span></span>)</span>.Subsequent</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L246-L248","name":"SetTheory.PGame.Subsequent.mk_left","line":246,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.mk_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.mk_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">mk_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">xl</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span>)</span>.Subsequent</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L242-L243","name":"SetTheory.PGame.Subsequent.moveRight","line":242,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">moveRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span>.Subsequent</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L238-L239","name":"SetTheory.PGame.Subsequent.moveLeft","line":238,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.moveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">moveLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.Subsequent</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L234-L235","name":"SetTheory.PGame.instWellFoundedRelation","line":234,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instWellFoundedRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instWellFoundedRelation\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instWellFoundedRelation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L231-L232","name":"SetTheory.PGame.wf_subsequent","line":231,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.wf_subsequent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.wf_subsequent\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">wf_subsequent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent\">SetTheory.PGame.Subsequent</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L228-L229","name":"SetTheory.PGame.Subsequent.trans","line":228,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent.trans\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Subsequent</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Subsequent</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Subsequent</span> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L224-L225","name":"SetTheory.PGame.instIsTransSubsequent","line":224,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsTransSubsequent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.instIsTransSubsequent\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instIsTransSubsequent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsTrans\">IsTrans</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent\">SetTheory.PGame.Subsequent</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L221-L222","name":"SetTheory.PGame.Subsequent","line":221,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent","doc":"`Subsequent x y` says that `x` can be obtained by playing some nonempty sequence of moves from\n`y`. It is the transitive closure of `IsOption`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Subsequent\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">Subsequent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L211-L217","name":"SetTheory.PGame.wf_isOption","line":211,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.wf_isOption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.wf_isOption\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">wf_isOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption\">SetTheory.PGame.IsOption</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L207-L209","name":"SetTheory.PGame.IsOption.mk_right","line":207,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption.mk_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption.mk_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">IsOption</span>.<span class=\"name\">mk_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">xr</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span>)</span>.IsOption</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L203-L205","name":"SetTheory.PGame.IsOption.mk_left","line":203,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption.mk_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption.mk_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">IsOption</span>.<span class=\"name\">mk_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">xl</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span>)</span>.IsOption</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L201-L201","name":"SetTheory.PGame.IsOption.moveRight","line":201,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption.moveRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption.moveRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">IsOption</span>.<span class=\"name\">moveRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveRight</span> <span class=\"fn\">i</span></span>)</span>.IsOption</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L200-L200","name":"SetTheory.PGame.IsOption.moveLeft","line":200,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption.moveLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption.moveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">IsOption</span>.<span class=\"name\">moveLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span>.IsOption</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L199-L201","name":"SetTheory.PGame.IsOption","line":199,"kind":"inductive","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption","doc":"`IsOption x y` means that `x` is either a left or right option for `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.IsOption\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">IsOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L198-L198","name":"SetTheory.PGame.isOption_iff","line":198,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isOption_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.isOption_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isOption_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">a_1</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.IsOption</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">a_1</span>.LeftMoves</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a_1</span>.moveLeft</span> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">a_1</span>.RightMoves</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a_1</span>.moveRight</span> <span class=\"fn\">i</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L193-L195","name":"SetTheory.PGame.moveRecOn","line":193,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRecOn","doc":"A variant of `PGame.recOn` expressed in terms of `PGame.moveLeft` and `PGame.moveRight`.\n\nBoth this and `PGame.recOn` describe Conway induction on games. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRecOn\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveRecOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IH : <span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">y</span>.LeftMoves</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveLeft</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.RightMoves</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.moveRight</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L185-L187","name":"SetTheory.PGame.ofLists_moveRight'","line":185,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists_moveRight'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists_moveRight'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">ofLists_moveRight'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.RightMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.moveRight</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span>.get</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toOfListsRightMoves</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L180-L182","name":"SetTheory.PGame.ofLists_moveRight","line":180,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists_moveRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists_moveRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">ofLists_moveRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">R</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.moveRight</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toOfListsRightMoves</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span>.get</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L176-L178","name":"SetTheory.PGame.ofLists_moveLeft'","line":176,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists_moveLeft'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists_moveLeft'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">ofLists_moveLeft'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.LeftMoves</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.moveLeft</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.get</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toOfListsLeftMoves</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L171-L173","name":"SetTheory.PGame.ofLists_moveLeft","line":171,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists_moveLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists_moveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">ofLists_moveLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">L</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.moveLeft</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">SetTheory.PGame.toOfListsLeftMoves</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.get</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L168-L169","name":"SetTheory.PGame.toOfListsRightMoves","line":168,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toOfListsRightMoves","doc":"Converts a number into a right move for `ofLists`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toOfListsRightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toOfListsRightMoves</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">R</span>.length</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.RightMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L164-L165","name":"SetTheory.PGame.toOfListsLeftMoves","line":164,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toOfListsLeftMoves","doc":"Converts a number into a left move for `ofLists`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.toOfListsLeftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toOfListsLeftMoves</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">L</span>.length</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.LeftMoves</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L160-L161","name":"SetTheory.PGame.rightMoves_ofLists","line":160,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_ofLists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_ofLists\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_ofLists</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.RightMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u_1, 0}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">R</span>.length</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L157-L158","name":"SetTheory.PGame.leftMoves_ofLists","line":157,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_ofLists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_ofLists\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_ofLists</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\">SetTheory.PGame.ofLists</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span>)</span>.LeftMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u_1, 0}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">L</span>.length</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L154-L155","name":"SetTheory.PGame.ofLists","line":154,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists","doc":"Construct a pre-game from list of pre-games describing the available moves for Left and Right.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.ofLists\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">ofLists</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L148-L149","name":"SetTheory.PGame.moveRight_mk","line":148,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight_mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveRight_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.moveRight</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xR</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L144-L145","name":"SetTheory.PGame.rightMoves_mk","line":144,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.rightMoves_mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.RightMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xr</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L140-L141","name":"SetTheory.PGame.moveLeft_mk","line":140,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft_mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveLeft_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.moveLeft</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xL</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L136-L137","name":"SetTheory.PGame.leftMoves_mk","line":136,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.leftMoves_mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xl : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xr : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xL : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xR : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\">SetTheory.PGame.mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span>)</span>.LeftMoves</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xl</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L132-L133","name":"SetTheory.PGame.moveRight","line":132,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight","doc":"The new game after Right makes an allowed move. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.RightMoves</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L128-L129","name":"SetTheory.PGame.moveLeft","line":128,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft","doc":"The new game after Left makes an allowed move. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">moveLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.LeftMoves</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L124-L125","name":"SetTheory.PGame.RightMoves","line":124,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves","doc":"The indexing type for allowable moves by Right. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">RightMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L120-L121","name":"SetTheory.PGame.LeftMoves","line":120,"kind":"def","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves","doc":"The indexing type for allowable moves by Left. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">LeftMoves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L114-L114","name":"SetTheory.PGame.mk","line":114,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span>)</span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Game/PGame.lean#L113-L114","name":"SetTheory.PGame","line":113,"kind":"inductive","docLink":"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame","doc":"The type of pre-games, before we have quotiented\nby equivalence (`PGame.Setoid`). In ZFC, a combinatorial game is constructed from\ntwo sets of combinatorial games that have been constructed at an earlier\nstage. To do this in type theory, we say that a pre-game is built\ninductively from two families of pre-games indexed over any type\nin Type u. The resulting type `PGame.{u}` lives in `Type (u+1)`,\nreflecting that it is a proper class in ZFC. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}