{"name":"Mathlib.SetTheory.Ordinal.NaturalOps","instances":[{"typeNames":["NatOrdinal"],"name":"NatOrdinal.linearOrder","className":"LinearOrder"},{"typeNames":["NatOrdinal"],"name":"NatOrdinal.succOrder","className":"SuccOrder"},{"typeNames":["NatOrdinal"],"name":"NatOrdinal.instWellFoundedLT","className":"IsWellFounded"},{"typeNames":["NatOrdinal"],"name":"NatOrdinal.instIsWellOrderLt","className":"IsWellOrder"},{"typeNames":["NatOrdinal"],"name":"NatOrdinal.instAdd","className":"Add"},{"typeNames":["NatOrdinal","NatOrdinal"],"name":"NatOrdinal.add_covariantClass_lt","className":"CovariantClass"},{"typeNames":["NatOrdinal","NatOrdinal"],"name":"NatOrdinal.add_covariantClass_le","className":"CovariantClass"},{"typeNames":["NatOrdinal","NatOrdinal"],"name":"NatOrdinal.add_contravariantClass_le","className":"ContravariantClass"},{"typeNames":["NatOrdinal"],"name":"NatOrdinal.orderedCancelAddCommMonoid","className":"OrderedCancelAddCommMonoid"},{"typeNames":["NatOrdinal"],"name":"NatOrdinal.addMonoidWithOne","className":"AddMonoidWithOne"},{"typeNames":["NatOrdinal"],"name":"instMulNatOrdinal","className":"Mul"},{"typeNames":["NatOrdinal"],"name":"instOrderedCommSemiringNatOrdinal","className":"OrderedCommSemiring"}],"imports":["Init","Mathlib.SetTheory.Ordinal.Arithmetic","Mathlib.Tactic.Abel"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L709-L719","name":"NatOrdinal.mul_le_nmul","line":709,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.mul_le_nmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.mul_le_nmul\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">mul_le_nmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L700-L701","name":"Ordinal.add_one_nmul","line":700,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.add_one_nmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.add_one_nmul\"><span class=\"name\">Ordinal</span>.<span class=\"name\">add_one_nmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span>.nmul</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L697-L698","name":"Ordinal.nmul_add_one","line":697,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_add_one\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_add_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L695-L695","name":"Ordinal.succ_nmul","line":695,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.succ_nmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.succ_nmul\"><span class=\"name\">Ordinal</span>.<span class=\"name\">succ_nmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">a</span></span>)</span>.nmul</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L693-L693","name":"Ordinal.nmul_succ","line":693,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_succ\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L690-L691","name":"Ordinal.nadd_one_nmul","line":690,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_one_nmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_one_nmul\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_one_nmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">1</span></span>)</span>.nmul</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L687-L688","name":"Ordinal.nmul_nadd_one","line":687,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_one\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_nadd_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L684-L685","name":"Ordinal.nmul_eq_mul","line":684,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_eq_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_eq_mul\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_eq_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">b</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L665-L680","name":"instOrderedCommSemiringNatOrdinal","line":665,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#instOrderedCommSemiringNatOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#instOrderedCommSemiringNatOrdinal\"><span class=\"name\">instOrderedCommSemiringNatOrdinal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#OrderedCommSemiring\">OrderedCommSemiring</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L660-L661","name":"instMulNatOrdinal","line":660,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#instMulNatOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#instMulNatOrdinal\"><span class=\"name\">instMulNatOrdinal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L635-L654","name":"Ordinal.nmul_assoc","line":635,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_assoc\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L628-L633","name":"Ordinal.nmul_le_iff₃'","line":628,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_iff₃'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_iff₃'\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_le_iff₃'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">d</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>,\n    <span class=\"fn\">∀ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>,\n      <span class=\"fn\">∀ <span class=\"fn\">c'</span> &lt; <span class=\"fn\">c</span>,\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a>           <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L618-L626","name":"Ordinal.lt_nmul_iff₃'","line":618,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_nmul_iff₃'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_nmul_iff₃'\"><span class=\"name\">Ordinal</span>.<span class=\"name\">lt_nmul_iff₃'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>,\n    <span class=\"fn\">∃ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>,\n      <span class=\"fn\">∃ <span class=\"fn\">c'</span> &lt; <span class=\"fn\">c</span>,\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>           <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L611-L616","name":"Ordinal.nmul_le_iff₃","line":611,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_iff₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_iff₃\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_le_iff₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">d</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>,\n    <span class=\"fn\">∀ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>,\n      <span class=\"fn\">∀ <span class=\"fn\">c'</span> &lt; <span class=\"fn\">c</span>,\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a>           <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L591-L609","name":"Ordinal.lt_nmul_iff₃","line":591,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_nmul_iff₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_nmul_iff₃\"><span class=\"name\">Ordinal</span>.<span class=\"name\">lt_nmul_iff₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>,\n    <span class=\"fn\">∃ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>,\n      <span class=\"fn\">∃ <span class=\"fn\">c'</span> &lt; <span class=\"fn\">c</span>,\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>           <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L584-L589","name":"Ordinal.nmul_nadd_le₃'","line":584,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_le₃'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_le₃'\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_nadd_le₃'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">c'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L577-L582","name":"Ordinal.nmul_nadd_lt₃'","line":577,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_lt₃'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_lt₃'\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_nadd_lt₃'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">c'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L572-L575","name":"Ordinal.nmul_nadd_le₃","line":572,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_le₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_le₃\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_nadd_le₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">c'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L567-L570","name":"Ordinal.nmul_nadd_lt₃","line":567,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_lt₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_lt₃\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_nadd_lt₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">c'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span>.nmul</span> <span class=\"fn\">c'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L564-L565","name":"Ordinal.nadd_nmul","line":564,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_nmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_nmul\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_nmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span>)</span>.nmul</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">c</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L522-L562","name":"Ordinal.nmul_nadd","line":522,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_nadd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L518-L520","name":"Ordinal.nmul_le_nmul_of_nonneg_right","line":518,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_nmul_of_nonneg_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_nmul_of_nonneg_right\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_le_nmul_of_nonneg_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L513-L516","name":"Ordinal.nmul_le_nmul_of_nonneg_left","line":513,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_nmul_of_nonneg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_nmul_of_nonneg_left\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_le_nmul_of_nonneg_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nmul</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nmul</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L510-L511","name":"Ordinal.nmul_lt_nmul_of_pos_right","line":510,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_lt_nmul_of_pos_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_lt_nmul_of_pos_right\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_lt_nmul_of_pos_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L507-L508","name":"Ordinal.nmul_lt_nmul_of_pos_left","line":507,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_lt_nmul_of_pos_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_lt_nmul_of_pos_left\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_lt_nmul_of_pos_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nmul</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nmul</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L505-L505","name":"Ordinal.one_nmul","line":505,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.one_nmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.one_nmul\"><span class=\"name\">Ordinal</span>.<span class=\"name\">one_nmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul\">Ordinal.nmul</a> <span class=\"fn\">1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L489-L502","name":"Ordinal.nmul_one","line":489,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_one\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L486-L486","name":"Ordinal.zero_nmul","line":486,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.zero_nmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.zero_nmul\"><span class=\"name\">Ordinal</span>.<span class=\"name\">zero_nmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul\">Ordinal.nmul</a> <span class=\"fn\">0</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L481-L483","name":"Ordinal.nmul_zero","line":481,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_zero\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L468-L478","name":"Ordinal.nmul_comm","line":468,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_comm\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nmul</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L465-L466","name":"Ordinal.nmul_le_iff","line":465,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_le_iff\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">∀ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L457-L463","name":"Ordinal.lt_nmul_iff","line":457,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_nmul_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_nmul_iff\"><span class=\"name\">Ordinal</span>.<span class=\"name\">lt_nmul_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">∃ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L449-L455","name":"Ordinal.nmul_nadd_le","line":449,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_le\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_nadd_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L444-L447","name":"Ordinal.nmul_nadd_lt","line":444,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nadd_lt\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_nadd_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b' : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L440-L442","name":"Ordinal.nmul_nonempty","line":440,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nonempty","doc":"The set in the definition of `nmul` is nonempty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_nonempty\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> | <span class=\"fn\">∀ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">∀ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span></span></span></span>}</span>.Nonempty</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L436-L437","name":"Ordinal.nmul_def","line":436,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul_def\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a> | <span class=\"fn\">∀ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">∀ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nmul</span> <span class=\"fn\">b'</span></span>)</span></span></span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L429-L430","name":"Ordinal.nadd_right_comm","line":429,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_right_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_right_comm\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_right_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span>)</span>.nadd</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L426-L427","name":"Ordinal.nadd_left_comm","line":426,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_left_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_left_comm\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_left_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L423-L424","name":"Ordinal.le_nadd_right","line":423,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_nadd_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_nadd_right\"><span class=\"name\">Ordinal</span>.<span class=\"name\">le_nadd_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L421-L421","name":"Ordinal.le_self_nadd","line":421,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_self_nadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_self_nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">le_self_nadd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L418-L419","name":"Ordinal.le_nadd_left","line":418,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_nadd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_nadd_left\"><span class=\"name\">Ordinal</span>.<span class=\"name\">le_nadd_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L416-L416","name":"Ordinal.le_nadd_self","line":416,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_nadd_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_nadd_self\"><span class=\"name\">Ordinal</span>.<span class=\"name\">le_nadd_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L413-L414","name":"Ordinal.nadd_right_cancel_iff","line":413,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_right_cancel_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_right_cancel_iff\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_right_cancel_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L410-L411","name":"Ordinal.nadd_left_cancel_iff","line":410,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_left_cancel_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_left_cancel_iff\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_left_cancel_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L407-L408","name":"Ordinal.nadd_right_cancel","line":407,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_right_cancel\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_right_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">b</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L404-L405","name":"Ordinal.nadd_left_cancel","line":404,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_left_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_left_cancel\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_left_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span></span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L401-L402","name":"Ordinal.nadd_lt_nadd_of_le_of_lt","line":401,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_of_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_of_le_of_lt\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_lt_nadd_of_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">d</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L398-L399","name":"Ordinal.nadd_lt_nadd_of_lt_of_le","line":398,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_of_lt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_of_lt_of_le\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_lt_nadd_of_lt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">d</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L395-L396","name":"Ordinal.nadd_lt_nadd","line":395,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_lt_nadd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">d</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L392-L393","name":"Ordinal.nadd_le_nadd","line":392,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_le_nadd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">d</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L389-L390","name":"Ordinal.nadd_le_nadd_iff_right","line":389,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd_iff_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd_iff_right\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_le_nadd_iff_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L386-L387","name":"Ordinal.nadd_le_nadd_iff_left","line":386,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd_iff_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd_iff_left\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_le_nadd_iff_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L383-L384","name":"Ordinal.nadd_lt_nadd_iff_right","line":383,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_iff_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_iff_right\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_lt_nadd_iff_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L380-L381","name":"Ordinal.nadd_lt_nadd_iff_left","line":380,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_iff_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_iff_left\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_lt_nadd_iff_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L377-L378","name":"Ordinal.le_of_nadd_le_nadd_right","line":377,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_of_nadd_le_nadd_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_of_nadd_le_nadd_right\"><span class=\"name\">Ordinal</span>.<span class=\"name\">le_of_nadd_le_nadd_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">a</span></span></span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L374-L375","name":"Ordinal.le_of_nadd_le_nadd_left","line":374,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_of_nadd_le_nadd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.le_of_nadd_le_nadd_left\"><span class=\"name\">Ordinal</span>.<span class=\"name\">le_of_nadd_le_nadd_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span></span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L371-L372","name":"Ordinal.lt_of_nadd_lt_nadd_right","line":371,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_of_nadd_lt_nadd_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_of_nadd_lt_nadd_right\"><span class=\"name\">Ordinal</span>.<span class=\"name\">lt_of_nadd_lt_nadd_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">a</span></span></span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L368-L369","name":"Ordinal.lt_of_nadd_lt_nadd_left","line":368,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_of_nadd_lt_nadd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_of_nadd_lt_nadd_left\"><span class=\"name\">Ordinal</span>.<span class=\"name\">lt_of_nadd_lt_nadd_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span></span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L364-L366","name":"Ordinal.toNatOrdinal_cast_nat","line":364,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_cast_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_cast_nat\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal_cast_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L360-L361","name":"Ordinal.nadd_eq_add","line":360,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_eq_add\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_eq_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">b</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L346-L350","name":"NatOrdinal.toOrdinal_cast_nat","line":346,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_cast_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_cast_nat\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal_cast_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L342-L343","name":"NatOrdinal.add_one_eq_succ","line":342,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.add_one_eq_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.add_one_eq_succ\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">add_one_eq_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L338-L339","name":"NatOrdinal.addMonoidWithOne","line":338,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.addMonoidWithOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.addMonoidWithOne\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">addMonoidWithOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne\">AddMonoidWithOne</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L326-L336","name":"NatOrdinal.orderedCancelAddCommMonoid","line":326,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.orderedCancelAddCommMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.orderedCancelAddCommMonoid\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">orderedCancelAddCommMonoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#OrderedCancelAddCommMonoid\">OrderedCancelAddCommMonoid</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L320-L324","name":"NatOrdinal.add_contravariantClass_le","line":320,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.add_contravariantClass_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.add_contravariantClass_le\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">add_contravariantClass_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L317-L318","name":"NatOrdinal.add_covariantClass_le","line":317,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.add_covariantClass_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.add_covariantClass_le\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">add_covariantClass_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L314-L315","name":"NatOrdinal.add_covariantClass_lt","line":314,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.add_covariantClass_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.add_covariantClass_lt\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">add_covariantClass_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L311-L312","name":"NatOrdinal.instAdd","line":311,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.instAdd\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L296-L303","name":"Ordinal.add_le_nadd","line":296,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.add_le_nadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.add_le_nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">add_le_nadd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L294-L294","name":"Ordinal.nat_nadd","line":294,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nat_nadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nat_nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nat_nadd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span>.nadd</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L288-L291","name":"Ordinal.nadd_nat","line":288,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_nat\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L285-L285","name":"Ordinal.succ_nadd","line":285,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.succ_nadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.succ_nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">succ_nadd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">a</span></span>)</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L283-L283","name":"Ordinal.nadd_succ","line":283,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_succ\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L281-L281","name":"Ordinal.one_nadd","line":281,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.one_nadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.one_nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">one_nadd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd\">Ordinal.nadd</a> <span class=\"fn\">1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L274-L278","name":"Ordinal.nadd_one","line":274,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_one\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L271-L271","name":"Ordinal.zero_nadd","line":271,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.zero_nadd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.zero_nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">zero_nadd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd\">Ordinal.nadd</a> <span class=\"fn\">0</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L263-L268","name":"Ordinal.nadd_zero","line":263,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_zero\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L255-L260","name":"Ordinal.nadd_assoc","line":255,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_assoc\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span>)</span>.nadd</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L239-L253","name":"Ordinal.blsub_nadd_of_mono","line":239,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.blsub_nadd_of_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.blsub_nadd_of_mono\"><span class=\"name\">Ordinal</span>.<span class=\"name\">blsub_nadd_of_mono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span></span> → <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{max u v}</a>     </span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ {<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>} (<span class=\"fn\">hi</span> : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span></span>) (<span class=\"fn\">hj</span> : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span> <span class=\"fn\">hj</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span>)</span>.blsub</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.blsub</span> <span class=\"fn\">fun (<span class=\"fn\">a'</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>) (<span class=\"fn\">ha'</span> : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nadd</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">⋯</span></span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.blsub</span> <span class=\"fn\">fun (<span class=\"fn\">b'</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>) (<span class=\"fn\">hb'</span> : <span class=\"fn\"><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b'</span></span>)</span> <span class=\"fn\">⋯</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L233-L237","name":"Ordinal.nadd_comm","line":233,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_comm\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L226-L229","name":"Ordinal.nadd_le_nadd_right","line":226,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd_right\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_le_nadd_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L221-L224","name":"Ordinal.nadd_le_nadd_left","line":221,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_nadd_left\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_le_nadd_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L218-L219","name":"Ordinal.nadd_lt_nadd_right","line":218,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_right\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_lt_nadd_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.nadd</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L215-L216","name":"Ordinal.nadd_lt_nadd_left","line":215,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_lt_nadd_left\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_lt_nadd_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L211-L213","name":"Ordinal.nadd_le_iff","line":211,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_le_iff\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nadd</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">c'</span> &lt; <span class=\"fn\">c</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">c'</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L207-L209","name":"Ordinal.lt_nadd_iff","line":207,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_nadd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.lt_nadd_iff\"><span class=\"name\">Ordinal</span>.<span class=\"name\">lt_nadd_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">c</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b'</span>.nadd</span> <span class=\"fn\">c</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ <span class=\"fn\">c'</span> &lt; <span class=\"fn\">c</span>, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.nadd</span> <span class=\"fn\">c'</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L203-L205","name":"Ordinal.nadd_def","line":203,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd_def\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.blsub</span> <span class=\"fn\">fun (<span class=\"fn\">a'</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span>.nadd</span> <span class=\"fn\">b</span></span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.blsub</span> <span class=\"fn\">fun (<span class=\"fn\">b'</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.nadd</span> <span class=\"fn\">b'</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L198-L199","name":"NaturalOps.«term_⨳_»","line":198,"kind":"def","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NaturalOps.«term_⨳_»","doc":"Natural multiplication on ordinals `a ⨳ b`, also known as the Hessenberg product, is recursively\ndefined as the least ordinal such that `a ⨳ b + a' ⨳ b'` is greater than `a' ⨳ b + a ⨳ b'` for all\n`a' < a` and `b < b'`. In contrast to normal ordinal multiplication, it is commutative and\ndistributive (over natural addition).\n\nNatural multiplication can equivalently be characterized as the ordinal resulting from multiplying\nthe Cantor normal forms of `a` and `b` as if they were polynomials in `ω`. Addition of exponents is\ndone via natural addition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NaturalOps.«term_⨳_»\"><span class=\"name\">NaturalOps</span>.<span class=\"name\">«term_⨳_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L194-L196","name":"Ordinal.nmul","line":194,"kind":"def","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul","doc":"Natural multiplication on ordinals `a ⨳ b`, also known as the Hessenberg product, is recursively\ndefined as the least ordinal such that `a ⨳ b + a' ⨳ b'` is greater than `a' ⨳ b + a ⨳ b'` for all\n`a' < a` and `b < b'`. In contrast to normal ordinal multiplication, it is commutative and\ndistributive (over natural addition).\n\nNatural multiplication can equivalently be characterized as the ordinal resulting from multiplying\nthe Cantor normal forms of `a` and `b` as if they were polynomials in `ω`. Addition of exponents is\ndone via natural addition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nmul\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nmul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> → <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> → <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L181-L182","name":"NaturalOps.«term_♯_»","line":181,"kind":"def","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NaturalOps.«term_♯_»","doc":"Natural addition on ordinals `a ♯ b`, also known as the Hessenberg sum, is recursively defined\nas the least ordinal greater than `a' ♯ b` and `a ♯ b'` for all `a' < a` and `b' < b`. In contrast\nto normal ordinal addition, it is commutative.\n\nNatural addition can equivalently be characterized as the ordinal resulting from adding up\ncorresponding coefficients in the Cantor normal forms of `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NaturalOps.«term_♯_»\"><span class=\"name\">NaturalOps</span>.<span class=\"name\">«term_♯_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L176-L179","name":"Ordinal.nadd","line":176,"kind":"def","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd","doc":"Natural addition on ordinals `a ♯ b`, also known as the Hessenberg sum, is recursively defined\nas the least ordinal greater than `a' ♯ b` and `a ♯ b'` for all `a' < a` and `b' < b`. In contrast\nto normal ordinal addition, it is commutative.\n\nNatural addition can equivalently be characterized as the ordinal resulting from adding up\ncorresponding coefficients in the Cantor normal forms of `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.nadd\"><span class=\"name\">Ordinal</span>.<span class=\"name\">nadd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> → <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> → <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L163-L165","name":"Ordinal.toNatOrdinal_min","line":163,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_min\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal_min</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L158-L160","name":"Ordinal.toNatOrdinal_max","line":158,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_max\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal_max</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L154-L155","name":"Ordinal.toNatOrdinal_eq_one","line":154,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_eq_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_eq_one\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal_eq_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L150-L151","name":"Ordinal.toNatOrdinal_eq_zero","line":150,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_eq_zero\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L146-L147","name":"Ordinal.toNatOrdinal_one","line":146,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_one\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L142-L143","name":"Ordinal.toNatOrdinal_zero","line":142,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_zero\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L138-L139","name":"Ordinal.toNatOrdinal_toOrdinal","line":138,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_toOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_toOrdinal\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal_toOrdinal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L134-L135","name":"Ordinal.toNatOrdinal_symm_eq","line":134,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_symm_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal_symm_eq\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal_symm_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal\">Ordinal.toNatOrdinal</a>.symm</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal\">NatOrdinal.toOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L124-L125","name":"NatOrdinal.induction","line":124,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.induction","doc":"`Ordinal.induction` but for `NatOrdinal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.induction\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">j</span> : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">k</span> &lt; <span class=\"fn\">j</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">k</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">j</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L120-L121","name":"NatOrdinal.rec","line":120,"kind":"def","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.rec","doc":"A recursor for `NatOrdinal`. Use as `induction x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.rec\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_2}</a>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L115-L116","name":"NatOrdinal.succ_def","line":115,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.succ_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.succ_def\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">succ_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L112-L113","name":"NatOrdinal.toOrdinal_min","line":112,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_min\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal_min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L108-L109","name":"NatOrdinal.toOrdinal_max","line":108,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_max\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L104-L105","name":"NatOrdinal.toOrdinal_eq_one","line":104,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_eq_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_eq_one\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal_eq_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L100-L101","name":"NatOrdinal.toOrdinal_eq_zero","line":100,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_eq_zero\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L96-L97","name":"NatOrdinal.toOrdinal_one","line":96,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_one\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L92-L93","name":"NatOrdinal.toOrdinal_zero","line":92,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_zero\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L88-L89","name":"NatOrdinal.instIsWellOrderLt","line":88,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.instIsWellOrderLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.instIsWellOrderLt\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">instIsWellOrderLt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L85-L86","name":"NatOrdinal.instWellFoundedLT","line":85,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.instWellFoundedLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.instWellFoundedLT\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">instWellFoundedLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L82-L83","name":"NatOrdinal.lt_wf","line":82,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.lt_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.lt_wf\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">lt_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L79-L80","name":"NatOrdinal.toOrdinal_toNatOrdinal","line":79,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_toNatOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_toNatOrdinal\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal_toNatOrdinal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Ordinal.toNatOrdinal</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">NatOrdinal.toOrdinal</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L74-L75","name":"NatOrdinal.toOrdinal_symm_eq","line":74,"kind":"theorem","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_symm_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal_symm_eq\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal_symm_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal\">NatOrdinal.toOrdinal</a>.symm</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal\">Ordinal.toNatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L66-L67","name":"NatOrdinal.toOrdinal","line":66,"kind":"def","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal","doc":"The identity function between `NatOrdinal` and `Ordinal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.toOrdinal\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">toOrdinal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L61-L62","name":"Ordinal.toNatOrdinal","line":61,"kind":"def","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal","doc":"The identity function between `Ordinal` and `NatOrdinal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#Ordinal.toNatOrdinal\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNatOrdinal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L57-L57","name":"NatOrdinal.succOrder","line":57,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.succOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.succOrder\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">succOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L55-L55","name":"NatOrdinal.linearOrder","line":55,"kind":"instance","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.linearOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal.linearOrder\"><span class=\"name\">NatOrdinal</span>.<span class=\"name\">linearOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <a href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\">NatOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/Ordinal/NaturalOps.lean#L51-L53","name":"NatOrdinal","line":51,"kind":"def","docLink":"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal","doc":"A type synonym for ordinals with natural addition and multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Ordinal/NaturalOps.html#NatOrdinal\"><span class=\"name\">NatOrdinal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}