{"name":"Mathlib.SetTheory.ZFC.Basic","instances":[{"typeNames":["PSet"],"name":"PSet.setoid","className":"Setoid"},{"typeNames":["PSet"],"name":"PSet.instHasSubset","className":"HasSubset"},{"typeNames":["PSet"],"name":"PSet.instIsReflSubset","className":"IsRefl"},{"typeNames":["PSet"],"name":"PSet.instIsTransSubset","className":"IsTrans"},{"typeNames":["PSet","PSet"],"name":"PSet.instMembership","className":"Membership"},{"typeNames":["PSet"],"name":"PSet.instWellFoundedRelation","className":"WellFoundedRelation"},{"typeNames":["PSet"],"name":"PSet.instIsAsymmMem","className":"IsAsymm"},{"typeNames":["PSet"],"name":"PSet.instIsIrreflMem","className":"IsIrrefl"},{"typeNames":["PSet","Set"],"name":"PSet.instCoeSet","className":"Coe"},{"typeNames":["PSet"],"name":"PSet.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["PSet"],"name":"PSet.instInhabited","className":"Inhabited"},{"typeNames":["PSet.Type"],"name":"PSet.instIsEmptyTypeEmptyCollection","className":"IsEmpty"},{"typeNames":["PSet","PSet"],"name":"PSet.instInsert","className":"Insert"},{"typeNames":["PSet","PSet"],"name":"PSet.instSingleton","className":"Singleton"},{"typeNames":["PSet","PSet"],"name":"PSet.instLawfulSingleton","className":"LawfulSingleton"},{"typeNames":["PSet.Type"],"name":"PSet.instInhabitedTypeInsert","className":"Inhabited"},{"typeNames":["PSet","PSet"],"name":"PSet.instSep","className":"Sep"},{"typeNames":["PSet.Resp"],"name":"PSet.Resp.inhabited","className":"Inhabited"},{"typeNames":["PSet.Resp"],"name":"PSet.Resp.setoid","className":"Setoid"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instMembership","className":"Membership"},{"typeNames":["Set.Elem"],"name":"ZFSet.small_toSet","className":"Small"},{"typeNames":["ZFSet"],"name":"ZFSet.hasSubset","className":"HasSubset"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsReflSubset","className":"IsRefl"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsTransSubset","className":"IsTrans"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsAntisymmSubset","className":"IsAntisymm"},{"typeNames":["ZFSet"],"name":"ZFSet.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["ZFSet"],"name":"ZFSet.instInhabited","className":"Inhabited"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instInsert","className":"Insert"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instSingleton","className":"Singleton"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instLawfulSingleton","className":"LawfulSingleton"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instSep","className":"Sep"},{"typeNames":["ZFSet"],"name":"ZFSet.instUnion","className":"Union"},{"typeNames":["ZFSet"],"name":"ZFSet.instInter","className":"Inter"},{"typeNames":["ZFSet"],"name":"ZFSet.instSDiff","className":"SDiff"},{"typeNames":["ZFSet"],"name":"ZFSet.instWellFoundedRelation","className":"WellFoundedRelation"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsAsymmMem","className":"IsAsymm"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsIrreflMem","className":"IsIrrefl"},{"typeNames":["OfNat.ofNat"],"name":"ZFSet.mapDefinableAux","className":"PSet.Definable"},{"typeNames":["ZFSet","Class"],"name":"instInsertZFSetClass","className":"Insert"},{"typeNames":["ZFSet","Class"],"name":"Class.instCoeZFSet","className":"Coe"},{"typeNames":["Class","Class"],"name":"Class.instMembership","className":"Membership"},{"typeNames":["Class"],"name":"Class.instWellFoundedRelation","className":"WellFoundedRelation"},{"typeNames":["Class"],"name":"Class.instIsAsymmMem","className":"IsAsymm"},{"typeNames":["Class"],"name":"Class.instIsIrreflMem","className":"IsIrrefl"}],"imports":["Init","Mathlib.Data.Set.Lattice","Mathlib.Logic.Small.Basic","Mathlib.Logic.Function.OfArity","Mathlib.Order.WellFounded"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1542-L1547","name":"ZFSet.toSet_equiv","line":1542,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_equiv","doc":"`ZFSet.toSet` as an equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_equiv\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span> // <span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a>        <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1541-L1541","name":"ZFSet.toSet_equiv_apply_coe","line":1541,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_equiv_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_equiv_apply_coe\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_equiv_apply_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ZFSet.toSet_equiv</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toSet</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1525-L1528","name":"ZFSet.choice_mem","line":1525,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> ∉ <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(yx : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.choice</span></span> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval\">′</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1521-L1523","name":"ZFSet.choice_isFunc","line":1521,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_isFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_isFunc\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice_isFunc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> ∉ <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.IsFunc</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\"><span class=\"fn\">x</span>.choice</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1516-L1519","name":"ZFSet.choice_mem_aux","line":1516,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_mem_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_mem_aux\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice_mem_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> ∉ <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(yx : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Classical.html#Classical.epsilon\">Classical.epsilon</a> <span class=\"fn\">fun (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1513-L1514","name":"ZFSet.choice","line":1513,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice","doc":"A choice function on the class of nonempty ZFC sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1499-L1508","name":"ZFSet.map_fval","line":1499,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_fval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_fval\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map_fval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">ZFSet.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval\">′</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1491-L1492","name":"Class.fval_ex","line":1491,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval_ex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval_ex\"><span class=\"name\">Class</span>.<span class=\"name\">fval_ex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval\">′</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1488-L1489","name":"Class.«term_′_»","line":1488,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term_′_»","doc":"Function value "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term_′_»\"><span class=\"name\">Class</span>.<span class=\"name\">«term_′_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1485-L1486","name":"Class.fval","line":1485,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval","doc":"Function value "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval\"><span class=\"name\">Class</span>.<span class=\"name\">fval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1478-L1482","name":"Class.iota_ex","line":1478,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota_ex","doc":"Unlike the other set constructors, the `iota` definite descriptor\nis a set for any set input, but not constructively so, so there is no\nassociated `Class → Set` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota_ex\"><span class=\"name\">Class</span>.<span class=\"name\">iota_ex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.iota</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1470-L1473","name":"Class.iota_val","line":1470,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota_val\"><span class=\"name\">Class</span>.<span class=\"name\">iota_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.iota</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1467-L1468","name":"Class.iota","line":1467,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota","doc":"The definite description operator, which is `{x}` if `{y | A y} = {x}` and `∅` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota\"><span class=\"name\">Class</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1456-L1464","name":"Class.eq_univ_of_powerset_subset","line":1456,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_of_powerset_subset","doc":"An induction principle for sets. If every subset of a class is a member, then the class is\nuniversal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_of_powerset_subset\"><span class=\"name\">Class</span>.<span class=\"name\">eq_univ_of_powerset_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hA : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.powerset</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1451-L1452","name":"Class.sInter_empty","line":1451,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter_empty\"><span class=\"name\">Class</span>.<span class=\"name\">sInter_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1446-L1448","name":"Class.sUnion_empty","line":1446,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion_empty\"><span class=\"name\">Class</span>.<span class=\"name\">sUnion_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\">⋃₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1437-L1443","name":"Class.mem_sInter","line":1437,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_sInter\"><span class=\"name\">Class</span>.<span class=\"name\">mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1433-L1435","name":"Class.mem_of_mem_sInter","line":1433,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_of_mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_of_mem_sInter\"><span class=\"name\">Class</span>.<span class=\"name\">mem_of_mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1430-L1431","name":"Class.coe_sInter","line":1430,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sInter\"><span class=\"name\">Class</span>.<span class=\"name\">coe_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1424-L1427","name":"Class.sInter_apply","line":1424,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter_apply\"><span class=\"name\">Class</span>.<span class=\"name\">sInter_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1417-L1422","name":"Class.mem_sUnion","line":1417,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_sUnion\"><span class=\"name\">Class</span>.<span class=\"name\">mem_sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1412-L1414","name":"Class.coe_sUnion","line":1412,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sUnion\"><span class=\"name\">Class</span>.<span class=\"name\">coe_sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\">⋃₀</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1405-L1409","name":"Class.sUnion_apply","line":1405,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion_apply\"><span class=\"name\">Class</span>.<span class=\"name\">sUnion_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1401-L1402","name":"Class.powerset_apply","line":1401,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset_apply\"><span class=\"name\">Class</span>.<span class=\"name\">powerset_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.powerset</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1397-L1398","name":"Class.coe_powerset","line":1397,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_powerset\"><span class=\"name\">Class</span>.<span class=\"name\">coe_powerset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.powerset</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">x</span></span>)</span>.powerset</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1393-L1394","name":"Class.coe_diff","line":1393,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_diff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_diff\"><span class=\"name\">Class</span>.<span class=\"name\">coe_diff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1389-L1390","name":"Class.coe_inter","line":1389,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_inter\"><span class=\"name\">Class</span>.<span class=\"name\">coe_inter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1385-L1386","name":"Class.coe_union","line":1385,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_union\"><span class=\"name\">Class</span>.<span class=\"name\">coe_union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1381-L1382","name":"Class.coe_insert","line":1381,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_insert\"><span class=\"name\">Class</span>.<span class=\"name\">coe_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1377-L1378","name":"Class.coe_empty","line":1377,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_empty\"><span class=\"name\">Class</span>.<span class=\"name\">coe_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1372-L1374","name":"Class.coe_sep","line":1372,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sep\"><span class=\"name\">Class</span>.<span class=\"name\">coe_sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1368-L1369","name":"Class.coe_subset","line":1368,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_subset\"><span class=\"name\">Class</span>.<span class=\"name\">coe_subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1364-L1365","name":"Class.coe_apply","line":1364,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_apply\"><span class=\"name\">Class</span>.<span class=\"name\">coe_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">y</span></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1360-L1361","name":"Class.coe_mem","line":1360,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_mem\"><span class=\"name\">Class</span>.<span class=\"name\">coe_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1356-L1357","name":"Class.toSet_of_ZFSet","line":1356,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.toSet_of_ZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.toSet_of_ZFSet\"><span class=\"name\">Class</span>.<span class=\"name\">toSet_of_ZFSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.ToSet</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1350-L1353","name":"Class.ofSet.inj","line":1350,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ofSet.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ofSet.inj\"><span class=\"name\">Class</span>.<span class=\"name\">ofSet</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1347-L1348","name":"Class.«term⋂₀_»","line":1347,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term⋂₀_»","doc":"The intersection of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term⋂₀_»\"><span class=\"name\">Class</span>.<span class=\"name\">«term⋂₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1344-L1345","name":"Class.sInter","line":1344,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter","doc":"The intersection of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\"><span class=\"name\">Class</span>.<span class=\"name\">sInter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1340-L1341","name":"Class.«term⋃₀_»","line":1340,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term⋃₀_»","doc":"The union of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term⋃₀_»\"><span class=\"name\">Class</span>.<span class=\"name\">«term⋃₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1337-L1338","name":"Class.sUnion","line":1337,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion","doc":"The union of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\"><span class=\"name\">Class</span>.<span class=\"name\">sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1333-L1334","name":"Class.powerset","line":1333,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset","doc":"The power class of a class is the class of all subclasses that are ZFC sets "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset\"><span class=\"name\">Class</span>.<span class=\"name\">powerset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1328-L1330","name":"Class.classToCong_empty","line":1328,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.classToCong_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.classToCong_empty\"><span class=\"name\">Class</span>.<span class=\"name\">classToCong_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.classToCong</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1324-L1325","name":"Class.classToCong","line":1324,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.classToCong","doc":"Convert a class into a conglomerate (a collection of classes) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.classToCong\"><span class=\"name\">Class</span>.<span class=\"name\">classToCong</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1318-L1321","name":"Class.congToClass_empty","line":1318,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass_empty\"><span class=\"name\">Class</span>.<span class=\"name\">congToClass_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass\">Class.congToClass</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1314-L1315","name":"Class.congToClass","line":1314,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass","doc":"Convert a conglomerate (a collection of classes) into a class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass\"><span class=\"name\">Class</span>.<span class=\"name\">congToClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1310-L1311","name":"Class.univ_not_mem_univ","line":1310,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ_not_mem_univ","doc":"**There is no universal set.**\nThis is stated as `univ ∉ univ`, meaning that `univ` (the class of all sets) is proper (does not\nbelong to the class of all sets). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ_not_mem_univ\"><span class=\"name\">Class</span>.<span class=\"name\">univ_not_mem_univ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a> ∉ <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1304-L1305","name":"Class.mem_irrefl","line":1304,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_irrefl\"><span class=\"name\">Class</span>.<span class=\"name\">mem_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1301-L1302","name":"Class.mem_asymm","line":1301,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_asymm\"><span class=\"name\">Class</span>.<span class=\"name\">mem_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1298-L1299","name":"Class.instIsIrreflMem","line":1298,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instIsIrreflMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instIsIrreflMem\"><span class=\"name\">Class</span>.<span class=\"name\">instIsIrreflMem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1294-L1295","name":"Class.instIsAsymmMem","line":1294,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instIsAsymmMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instIsAsymmMem\"><span class=\"name\">Class</span>.<span class=\"name\">instIsAsymmMem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsAsymm\">IsAsymm</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1291-L1292","name":"Class.instWellFoundedRelation","line":1291,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instWellFoundedRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instWellFoundedRelation\"><span class=\"name\">Class</span>.<span class=\"name\">instWellFoundedRelation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1281-L1289","name":"Class.mem_wf","line":1281,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_wf\"><span class=\"name\">Class</span>.<span class=\"name\">mem_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1278-L1279","name":"Class.eq_univ_of_forall","line":1278,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_of_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_of_forall\"><span class=\"name\">Class</span>.<span class=\"name\">eq_univ_of_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1275-L1276","name":"Class.eq_univ_iff_forall","line":1275,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_iff_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_iff_forall\"><span class=\"name\">Class</span>.<span class=\"name\">eq_univ_iff_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1272-L1273","name":"Class.mem_univ_hom","line":1272,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_univ_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_univ_hom\"><span class=\"name\">Class</span>.<span class=\"name\">mem_univ_hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1268-L1269","name":"Class.mem_univ","line":1268,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_univ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_univ\"><span class=\"name\">Class</span>.<span class=\"name\">mem_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1264-L1265","name":"Class.not_empty_hom","line":1264,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.not_empty_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.not_empty_hom\"><span class=\"name\">Class</span>.<span class=\"name\">not_empty_hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1261-L1261","name":"Class.not_mem_empty","line":1261,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.not_mem_empty\"><span class=\"name\">Class</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1257-L1258","name":"Class.mem_def","line":1257,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_def\"><span class=\"name\">Class</span>.<span class=\"name\">mem_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1254-L1255","name":"Class.instMembership","line":1254,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instMembership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instMembership\"><span class=\"name\">Class</span>.<span class=\"name\">instMembership</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1251-L1252","name":"Class.Mem","line":1251,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.Mem","doc":"`A ∈ B` if `A` is a ZFC set which satisfies `B` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.Mem\"><span class=\"name\">Class</span>.<span class=\"name\">Mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1247-L1248","name":"Class.ToSet","line":1247,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ToSet","doc":"Assert that `A` is a ZFC set satisfying `B` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ToSet\"><span class=\"name\">Class</span>.<span class=\"name\">ToSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1243-L1244","name":"Class.univ","line":1243,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ","doc":"The universal class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\"><span class=\"name\">Class</span>.<span class=\"name\">univ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1239-L1240","name":"Class.instCoeZFSet","line":1239,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instCoeZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instCoeZFSet\"><span class=\"name\">Class</span>.<span class=\"name\">instCoeZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1236-L1237","name":"Class.ofSet","line":1236,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ofSet","doc":"Coerce a ZFC set into a class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ofSet\"><span class=\"name\">Class</span>.<span class=\"name\">ofSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1231-L1232","name":"Class.ext_iff","line":1231,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ext_iff\"><span class=\"name\">Class</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1228-L1229","name":"Class.ext","line":1228,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ext\"><span class=\"name\">Class</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">z</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1224-L1225","name":"Class.sep","line":1224,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sep","doc":"`{x ∈ A | p x}` is the class of elements in `A` satisfying `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sep\"><span class=\"name\">Class</span>.<span class=\"name\">sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1217-L1218","name":"instInsertZFSetClass","line":1217,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#instInsertZFSetClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#instInsertZFSetClass\"><span class=\"name\">instInsertZFSetClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1214-L1215","name":"Class","line":1214,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class","doc":"The collection of all classes.\nWe define `Class` as `Set ZFSet`, as this allows us to get many instances automatically. However, in\npractice, we treat it as (the definitionally equal) `ZFSet → Prop`. This means, the preferred way to\nstate that `x : ZFSet` belongs to `A : Class` is to write `A x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\"><span class=\"name\">Class</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1199-L1204","name":"ZFSet.Hereditarily.empty","line":1199,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1196-L1197","name":"ZFSet.Hereditarily.mem","line":1196,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1193-L1194","name":"ZFSet.Hereditarily.self","line":1193,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.self\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1191-L1191","name":"ZFSet.Hereditarily.def","line":1191,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.def","doc":"**Alias** of the forward direction of `ZFSet.hereditarily_iff`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1188-L1189","name":"ZFSet.hereditarily_iff","line":1188,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hereditarily_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hereditarily_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">hereditarily_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1180-L1182","name":"ZFSet.Hereditarily","line":1180,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily","doc":"Given a predicate `p` on ZFC sets. `Hereditarily p x` means that `x` has property `p` and the\nmembers of `x` are all `Hereditarily p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1167-L1176","name":"ZFSet.map_isFunc","line":1167,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_isFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_isFunc\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map_isFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.IsFunc</span> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">ZFSet.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1159-L1164","name":"ZFSet.map_unique","line":1159,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_unique\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zx : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃! <span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.pair</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">ZFSet.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1155-L1157","name":"ZFSet.mem_map","line":1155,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_map\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">ZFSet.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.pair</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1151-L1152","name":"ZFSet.map","line":1151,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map","doc":"Graph of a function: `map f x` is the ZFC function which maps `a ∈ x` to `f a` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1146-L1148","name":"ZFSet.mapDefinableAux","line":1146,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mapDefinableAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mapDefinableAux\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mapDefinableAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">fun (<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.pair</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1140-L1140","name":"ZFSet.mem_funs","line":1140,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_funs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_funs\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_funs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.funs</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.IsFunc</span> <span class=\"fn\">y</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1136-L1137","name":"ZFSet.funs","line":1136,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.funs","doc":"`funs x y` is `y ^ x`, the set of all set functions `x → y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.funs\"><span class=\"name\">ZFSet</span>.<span class=\"name\">funs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1132-L1133","name":"ZFSet.IsFunc","line":1132,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc","doc":"`isFunc x y f` is the assertion that `f` is a subset of `x × y` which relates to each element\nof `x` a unique element of `y`, so that we can consider `f` as a ZFC function `x → y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsFunc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1127-L1128","name":"ZFSet.pair_mem_prod","line":1127,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_mem_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_mem_prod\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_mem_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.pair</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.prod</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1124-L1125","name":"ZFSet.mem_prod","line":1124,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_prod\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.prod</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">a</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\">∃ <span class=\"fn\">b</span> ∈ <span class=\"fn\">y</span>, <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.pair</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1120-L1121","name":"ZFSet.prod","line":1120,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod","doc":"The cartesian product, `{(a, b) | a ∈ x, b ∈ y}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod\"><span class=\"name\">ZFSet</span>.<span class=\"name\">prod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1116-L1117","name":"ZFSet.pair_inj","line":1116,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_inj\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x' : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y' : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.pair</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.pair</span> <span class=\"fn\">y'</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1094-L1113","name":"ZFSet.pair_injective","line":1094,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_injective\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Injective2\">Function.Injective2</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1084-L1092","name":"ZFSet.mem_pairSep","line":1084,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pairSep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pairSep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_pairSep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pairSep\">ZFSet.pairSep</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">a</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\">∃ <span class=\"fn\">b</span> ∈ <span class=\"fn\">y</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.pair</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1080-L1081","name":"ZFSet.pairSep","line":1080,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pairSep","doc":"A subset of pairs `{(a, b) ∈ x × y | p a b}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pairSep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pairSep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1077-L1077","name":"ZFSet.toSet_pair","line":1077,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_pair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.pair</span> <span class=\"fn\">y</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">{<span class=\"fn\">x</span>}</span>, <span class=\"fn\">{<span class=\"fn\">x</span>, <span class=\"fn\">y</span>}</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1073-L1074","name":"ZFSet.pair","line":1073,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair","doc":"Kuratowski ordered pair "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1067-L1070","name":"ZFSet.toSet_range","line":1067,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_range\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range\">ZFSet.range</a> <span class=\"fn\">f</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1056-L1064","name":"ZFSet.mem_range","line":1056,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_range\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range\">ZFSet.range</a> <span class=\"fn\">f</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1052-L1053","name":"ZFSet.range","line":1052,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range","doc":"The range of an indexed family of sets. The universes allow for a more general index type\nwithout manual use of `ULift`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range\"><span class=\"name\">ZFSet</span>.<span class=\"name\">range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1045-L1048","name":"ZFSet.toSet_image","line":1045,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_image\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_image</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\">ZFSet.image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">x</span>.toSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1036-L1042","name":"ZFSet.mem_image","line":1036,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_image\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\">ZFSet.image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1031-L1033","name":"ZFSet.image.mk","line":1031,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">image</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\">ZFSet.image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1020-L1029","name":"ZFSet.image","line":1020,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image","doc":"The image of a (definable) ZFC set function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\"><span class=\"name\">ZFSet</span>.<span class=\"name\">image</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1011-L1017","name":"ZFSet.regularity","line":1011,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.regularity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.regularity\"><span class=\"name\">ZFSet</span>.<span class=\"name\">regularity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1008-L1009","name":"ZFSet.mem_irrefl","line":1008,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_irrefl\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1005-L1006","name":"ZFSet.mem_asymm","line":1005,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_asymm\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L1002-L1003","name":"ZFSet.instIsIrreflMem","line":1002,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsIrreflMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsIrreflMem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsIrreflMem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L998-L999","name":"ZFSet.instIsAsymmMem","line":998,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAsymmMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAsymmMem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsAsymmMem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsAsymm\">IsAsymm</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L995-L996","name":"ZFSet.instWellFoundedRelation","line":995,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instWellFoundedRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instWellFoundedRelation\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instWellFoundedRelation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L992-L993","name":"ZFSet.inductionOn","line":992,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inductionOn","doc":"Induction on the `∈` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inductionOn\"><span class=\"name\">ZFSet</span>.<span class=\"name\">inductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L986-L988","name":"ZFSet.mem_wf","line":986,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_wf\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L983-L984","name":"ZFSet.sUnion_pair","line":983,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">{<span class=\"fn\">x</span>, <span class=\"fn\">y</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L979-L980","name":"ZFSet.mem_diff","line":979,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_diff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_diff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_diff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">z</span> ∉ <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L975-L976","name":"ZFSet.mem_inter","line":975,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L970-L972","name":"ZFSet.mem_union","line":970,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L964-L967","name":"ZFSet.toSet_sdiff","line":964,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sdiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sdiff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sdiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">y</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toSet</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><span class=\"fn\">y</span>.toSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L958-L961","name":"ZFSet.toSet_inter","line":958,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_inter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">y</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toSet</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">y</span>.toSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L953-L955","name":"ZFSet.toSet_union","line":953,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">y</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toSet</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">y</span>.toSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L949-L950","name":"ZFSet.instSDiff","line":949,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSDiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSDiff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSDiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#SDiff\">SDiff</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L946-L947","name":"ZFSet.instInter","line":946,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instInter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Inter\">Inter</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L943-L944","name":"ZFSet.instUnion","line":943,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instUnion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Union\">Union</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L940-L941","name":"ZFSet.diff","line":940,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.diff","doc":"The set difference operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.diff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">diff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L936-L937","name":"ZFSet.inter","line":936,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inter","doc":"The binary intersection operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">inter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L932-L933","name":"ZFSet.union","line":932,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.union","doc":"The binary union operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L928-L929","name":"ZFSet.singleton_inj","line":928,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_inj\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">x</span>}</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L923-L925","name":"ZFSet.singleton_injective","line":923,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_injective\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">singleton</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L919-L921","name":"ZFSet.toSet_sInter","line":919,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#Set.sInter\">⋂₀</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">x</span>.toSet</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L915-L917","name":"ZFSet.toSet_sUnion","line":915,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">x</span>.toSet</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L911-L912","name":"ZFSet.sInter_singleton","line":911,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sInter_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L907-L908","name":"ZFSet.sUnion_singleton","line":907,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L903-L904","name":"ZFSet.not_mem_sInter_of_not_mem","line":903,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_sInter_of_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_sInter_of_not_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_mem_sInter_of_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L900-L901","name":"ZFSet.mem_sUnion_of_mem","line":900,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sUnion_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L895-L898","name":"ZFSet.mem_of_mem_sInter","line":895,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_of_mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_of_mem_sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_of_mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L893-L893","name":"ZFSet.sInter_empty","line":893,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sInter_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L888-L890","name":"ZFSet.sUnion_empty","line":888,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L882-L885","name":"ZFSet.mem_sInter","line":882,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span>.Nonempty</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L877-L880","name":"ZFSet.mem_sUnion","line":877,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L873-L874","name":"ZFSet.«term⋂₀_»","line":873,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋂₀_»","doc":"The intersection operator, the collection of elements in all of the elements of a ZFC set. We\nspecial-case `⋂₀ ∅ = ∅`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋂₀_»\"><span class=\"name\">ZFSet</span>.<span class=\"name\">«term⋂₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L870-L871","name":"ZFSet.sInter","line":870,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter","doc":"The intersection operator, the collection of elements in all of the elements of a ZFC set. We\nspecial-case `⋂₀ ∅ = ∅`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sInter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L865-L866","name":"ZFSet.«term⋃₀_»","line":865,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋃₀_»","doc":"The union operator, the collection of elements of elements of a ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋃₀_»\"><span class=\"name\">ZFSet</span>.<span class=\"name\">«term⋃₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L857-L863","name":"ZFSet.sUnion","line":857,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion","doc":"The union operator, the collection of elements of elements of a ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L841-L854","name":"ZFSet.sUnion_lem","line":841,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_lem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(αβ : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">a</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span></span>)</span>.Type</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">β</span> <span class=\"fn\">B</span></span></span>)</span>.Type</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span></span>)</span>.Func</span> <span class=\"fn\">a</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">β</span> <span class=\"fn\">B</span></span></span>)</span>.Func</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L837-L839","name":"ZFSet.mem_powerset","line":837,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_powerset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">x</span>.powerset</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L823-L834","name":"ZFSet.powerset","line":823,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset","doc":"The powerset operation, the collection of subsets of a ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">powerset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L817-L820","name":"ZFSet.toSet_sep","line":817,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">a</span>.toSet</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L807-L814","name":"ZFSet.mem_sep","line":807,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L803-L804","name":"ZFSet.instSep","line":803,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Sep\">Sep</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L792-L800","name":"ZFSet.sep","line":792,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep","doc":"`{x ∈ a | p x}` is the set of elements in `a` satisfying `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L783-L789","name":"ZFSet.omega_succ","line":783,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_succ\"><span class=\"name\">ZFSet</span>.<span class=\"name\">omega_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\">ZFSet.omega</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\">ZFSet.omega</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L779-L780","name":"ZFSet.omega_zero","line":779,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_zero\"><span class=\"name\">ZFSet</span>.<span class=\"name\">omega_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\">ZFSet.omega</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L775-L776","name":"ZFSet.omega","line":775,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega","doc":"`omega` is the first infinite von Neumann ordinal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\"><span class=\"name\">ZFSet</span>.<span class=\"name\">omega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L771-L772","name":"ZFSet.mem_pair","line":771,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">{<span class=\"fn\">y</span>, <span class=\"fn\">z</span>}</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L768-L769","name":"ZFSet.singleton_nonempty","line":768,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">u</span>}</span>.Nonempty</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L765-L766","name":"ZFSet.insert_nonempty","line":765,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.insert_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.insert_nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">insert_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span>.Nonempty</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L761-L763","name":"ZFSet.toSet_singleton","line":761,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">x</span>}</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L756-L758","name":"ZFSet.mem_singleton","line":756,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L751-L753","name":"ZFSet.toSet_insert","line":751,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">y</span>.toSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L747-L748","name":"ZFSet.mem_insert_of_mem","line":747,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L744-L745","name":"ZFSet.mem_insert","line":744,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L732-L742","name":"ZFSet.mem_insert_iff","line":732,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_insert_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L728-L729","name":"ZFSet.instLawfulSingleton","line":728,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instLawfulSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instLawfulSingleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instLawfulSingleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulSingleton\">LawfulSingleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L725-L726","name":"ZFSet.instSingleton","line":725,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSingleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSingleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Singleton\">Singleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L722-L723","name":"ZFSet.instInsert","line":722,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInsert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instInsert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L706-L720","name":"ZFSet.Insert","line":706,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Insert","doc":"`Insert x y` is the set `{x} ∪ y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Insert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L701-L703","name":"ZFSet.eq_empty_or_nonempty","line":701,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty_or_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty_or_nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eq_empty_or_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">u</span>.Nonempty</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L697-L699","name":"ZFSet.eq_empty","line":697,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eq_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L691-L695","name":"ZFSet.nonempty_mk_iff","line":691,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_mk_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_mk_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_mk_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span>)</span>.Nonempty</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.Nonempty</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L688-L688","name":"ZFSet.not_nonempty_empty","line":688,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_nonempty_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_nonempty_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_nonempty_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.Nonempty</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L684-L685","name":"ZFSet.empty_subset","line":684,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty_subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">empty_subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L681-L681","name":"ZFSet.toSet_empty","line":681,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L677-L678","name":"ZFSet.not_mem_empty","line":677,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L673-L674","name":"ZFSet.instInhabited","line":673,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInhabited\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L670-L671","name":"ZFSet.instEmptyCollection","line":670,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instEmptyCollection\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L667-L668","name":"ZFSet.empty","line":667,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty","doc":"The empty ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L663-L664","name":"ZFSet.instIsAntisymmSubset","line":663,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAntisymmSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAntisymmSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsAntisymmSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsAntisymm\">IsAntisymm</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L660-L661","name":"ZFSet.toSet_inj","line":660,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inj\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toSet</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L657-L657","name":"ZFSet.toSet_injective","line":657,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_injective\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L654-L655","name":"ZFSet.ext_iff","line":654,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L651-L652","name":"ZFSet.ext","line":651,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext\"><span class=\"name\">ZFSet</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L647-L648","name":"ZFSet.toSet_subset_iff","line":647,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_subset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_subset_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_subset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toSet</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">y</span>.toSet</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L639-L644","name":"ZFSet.subset_iff","line":639,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">subset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L635-L636","name":"ZFSet.instIsTransSubset","line":635,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsTransSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsTransSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsTransSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsTrans\">IsTrans</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L632-L633","name":"ZFSet.instIsReflSubset","line":632,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsReflSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsReflSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsReflSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsRefl\">IsRefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L629-L630","name":"ZFSet.subset_def","line":629,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">subset_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>⦄, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L626-L627","name":"ZFSet.hasSubset","line":626,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hasSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hasSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">hasSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#HasSubset\">HasSubset</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L623-L624","name":"ZFSet.Subset","line":623,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Subset","doc":"`x ⊆ y` as ZFC sets means that all members of `x` are members of `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L619-L620","name":"ZFSet.nonempty_toSet_iff","line":619,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_toSet_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_toSet_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_toSet_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span>.toSet</span>.Nonempty</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">u</span>.Nonempty</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L615-L616","name":"ZFSet.nonempty_of_mem","line":615,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span>.Nonempty</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L612-L613","name":"ZFSet.nonempty_def","line":612,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span>.Nonempty</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L609-L610","name":"ZFSet.Nonempty","line":609,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty","doc":"A nonempty set is one that contains some element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L599-L606","name":"ZFSet.small_toSet","line":599,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.small_toSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.small_toSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">small_toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a>        <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.toSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L596-L597","name":"ZFSet.mem_toSet","line":596,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_toSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_toSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">u</span>.toSet</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L592-L593","name":"ZFSet.toSet","line":592,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet","doc":"Convert a ZFC set into a `Set` of ZFC sets "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L588-L589","name":"ZFSet.mk_mem_iff","line":588,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_mem_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk_mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L584-L585","name":"ZFSet.instMembership","line":584,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instMembership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instMembership\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instMembership</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L580-L582","name":"ZFSet.Mem","line":580,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Mem","doc":"The membership relation for ZFC sets is inherited from the membership relation for pre-sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Mem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L575-L577","name":"ZFSet.eval_mk","line":575,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eval_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eval_mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eval_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L571-L572","name":"ZFSet.exact","line":571,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.exact\"><span class=\"name\">ZFSet</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L568-L569","name":"ZFSet.sound","line":568,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sound\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L565-L566","name":"ZFSet.eq","line":565,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L562-L563","name":"ZFSet.mk_out","line":562,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_out\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk_out</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quotient.out\">Quotient.out</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L558-L559","name":"ZFSet.mk_eq","line":558,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_eq\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L554-L555","name":"ZFSet.mk","line":554,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk","doc":"Turns a pre-set into a ZFC set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L532-L545","name":"Classical.allDefinable","line":532,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Classical.allDefinable","doc":"All functions are classically definable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Classical.allDefinable\"><span class=\"name\">Classical</span>.<span class=\"name\">allDefinable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L521-L523","name":"PSet.Definable.eq","line":521,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.eq\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.Resp\">PSet.Definable.Resp</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L518-L519","name":"PSet.Definable.Resp","line":518,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.Resp","doc":"Turns a definable function into a function that respects equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.Resp\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">Resp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L513-L515","name":"PSet.Definable.EqMk","line":513,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.EqMk","doc":"The evaluation of a function respecting equivalence is definable, by that same function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.EqMk\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">EqMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L508-L508","name":"PSet.Definable.mk","line":508,"kind":"ctor","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.mk\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L507-L508","name":"PSet.Definable","line":507,"kind":"class","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable","doc":"A set function is \"definable\" if it is the image of some n-ary pre-set\nfunction. This isn't exactly definability, but is useful as a sufficient\ncondition for functions that have a computable image. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> (u + 1)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L498-L500","name":"PSet.Resp.eval_val","line":498,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval_val\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">eval_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L495-L496","name":"PSet.Resp.eval","line":495,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval","doc":"An equivalence-respecting function yields an n-ary ZFC set function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L481-L492","name":"PSet.Resp.evalAux","line":481,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.evalAux","doc":"Helper function for `PSet.eval`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.evalAux\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">evalAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{ <span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span></span> // <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.Equiv</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span></span></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L473-L474","name":"ZFSet","line":473,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet","doc":"The ZFC universe of sets consists of the type of pre-sets,\nquotiented by extensional equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\"><span class=\"name\">ZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L466-L467","name":"PSet.Resp.setoid","line":466,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.setoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.setoid\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">setoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L462-L464","name":"PSet.Resp.Equiv.trans","line":462,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.trans\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Equiv</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L458-L459","name":"PSet.Resp.Equiv.symm","line":458,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.symm\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.Equiv</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.Equiv</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L451-L455","name":"PSet.Resp.Equiv.euc","line":451,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.euc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.euc\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">euc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.Equiv</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.Equiv</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.Equiv</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L448-L449","name":"PSet.Resp.Equiv.refl","line":448,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.refl\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.Equiv</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L444-L445","name":"PSet.Resp.Equiv","line":444,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv","doc":"Function equivalence for functions respecting equivalence. See `PSet.Arity.Equiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L440-L441","name":"PSet.Resp.f","line":440,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.f","doc":"The `n`-ary image of a `(n + 1)`-ary function respecting equivalence as a function respecting\nequivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.f\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L435-L436","name":"PSet.Resp.inhabited","line":435,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.inhabited\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L432-L433","name":"PSet.Resp","line":432,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp","doc":"`resp n` is the collection of n-ary functions on `PSet` that respect\nequivalence, i.e. when the inputs are equivalent the output is as well. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L425-L428","name":"PSet.Arity.equiv_const","line":425,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.equiv_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.equiv_const\"><span class=\"name\">PSet</span>.<span class=\"name\">Arity</span>.<span class=\"name\">equiv_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.Equiv\">PSet.Arity.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\">Function.OfArity.const</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\">Function.OfArity.const</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L421-L423","name":"PSet.Arity.Equiv","line":421,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.Equiv","doc":"Function equivalence is defined so that `f ~ g` iff `∀ x y, x ~ y → f x ~ g y`. This extends to\nequivalence of `n`-ary functions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.Equiv\"><span class=\"name\">PSet</span>.<span class=\"name\">Arity</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L416-L417","name":"PSet.lift_mem_embed","line":416,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.lift_mem_embed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.lift_mem_embed\"><span class=\"name\">PSet</span>.<span class=\"name\">lift_mem_embed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Lift</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.embed\">PSet.embed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L413-L414","name":"PSet.embed","line":413,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.embed","doc":"Embedding of one universe in another "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.embed\"><span class=\"name\">PSet</span>.<span class=\"name\">embed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L407-L408","name":"PSet.Lift","line":407,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Lift","doc":"Universe lift operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Lift\"><span class=\"name\">PSet</span>.<span class=\"name\">Lift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L401-L404","name":"PSet.mem_image","line":401,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_image\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.image\">PSet.image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L397-L398","name":"PSet.image","line":397,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.image","doc":"The image of a function from pre-sets to pre-sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.image\"><span class=\"name\">PSet</span>.<span class=\"name\">image</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L392-L394","name":"PSet.toSet_sUnion","line":392,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet_sUnion\"><span class=\"name\">PSet</span>.<span class=\"name\">toSet_sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span>)</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\">PSet.toSet</a> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">x</span>.toSet</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L379-L389","name":"PSet.mem_sUnion","line":379,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_sUnion\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L375-L376","name":"PSet.«term⋃₀_»","line":375,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.«term⋃₀_»","doc":"The pre-set union operator "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.«term⋃₀_»\"><span class=\"name\">PSet</span>.<span class=\"name\">«term⋃₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L372-L373","name":"PSet.sUnion","line":372,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion","doc":"The pre-set union operator "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\"><span class=\"name\">PSet</span>.<span class=\"name\">sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L363-L369","name":"PSet.mem_powerset","line":363,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_powerset\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">x</span>.powerset</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L359-L360","name":"PSet.powerset","line":359,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.powerset","doc":"The pre-set powerset operator "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.powerset\"><span class=\"name\">PSet</span>.<span class=\"name\">powerset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L355-L356","name":"PSet.instSep","line":355,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instSep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instSep\"><span class=\"name\">PSet</span>.<span class=\"name\">instSep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Sep\">Sep</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L352-L353","name":"PSet.sep","line":352,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sep","doc":"The pre-set separation operation `{x ∈ a | p x}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sep\"><span class=\"name\">PSet</span>.<span class=\"name\">sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L348-L349","name":"PSet.omega","line":348,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.omega","doc":"The von Neumann ordinal ω "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.omega\"><span class=\"name\">PSet</span>.<span class=\"name\">omega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L343-L345","name":"PSet.ofNat","line":343,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.ofNat","doc":"The n-th von Neumann ordinal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.ofNat\"><span class=\"name\">PSet</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L339-L340","name":"PSet.instInhabitedTypeInsert","line":339,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInhabitedTypeInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInhabitedTypeInsert\"><span class=\"name\">PSet</span>.<span class=\"name\">instInhabitedTypeInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span>.Type</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L336-L337","name":"PSet.instLawfulSingleton","line":336,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instLawfulSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instLawfulSingleton\"><span class=\"name\">PSet</span>.<span class=\"name\">instLawfulSingleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulSingleton\">LawfulSingleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L333-L334","name":"PSet.instSingleton","line":333,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instSingleton\"><span class=\"name\">PSet</span>.<span class=\"name\">instSingleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Singleton\">Singleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L330-L331","name":"PSet.instInsert","line":330,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInsert\"><span class=\"name\">PSet</span>.<span class=\"name\">instInsert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L327-L328","name":"PSet.insert","line":327,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.insert","doc":"Insert an element into a pre-set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.insert\"><span class=\"name\">PSet</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L323-L324","name":"PSet.equiv_empty","line":323,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_empty\"><span class=\"name\">PSet</span>.<span class=\"name\">equiv_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.Type</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L321-L321","name":"PSet.not_nonempty_empty","line":321,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.not_nonempty_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.not_nonempty_empty\"><span class=\"name\">PSet</span>.<span class=\"name\">not_nonempty_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.Nonempty</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L318-L318","name":"PSet.empty_subset","line":318,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.empty_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.empty_subset\"><span class=\"name\">PSet</span>.<span class=\"name\">empty_subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L315-L315","name":"PSet.toSet_empty","line":315,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet_empty\"><span class=\"name\">PSet</span>.<span class=\"name\">toSet_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L311-L312","name":"PSet.not_mem_empty","line":311,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.not_mem_empty\"><span class=\"name\">PSet</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L307-L308","name":"PSet.instIsEmptyTypeEmptyCollection","line":307,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsEmptyTypeEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsEmptyTypeEmptyCollection\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsEmptyTypeEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.Type</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L304-L305","name":"PSet.instInhabited","line":304,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInhabited\"><span class=\"name\">PSet</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L301-L302","name":"PSet.instEmptyCollection","line":301,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instEmptyCollection\"><span class=\"name\">PSet</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L298-L299","name":"PSet.empty","line":298,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.empty","doc":"The empty pre-set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.empty\"><span class=\"name\">PSet</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L294-L295","name":"PSet.instCoeSet","line":294,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instCoeSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instCoeSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instCoeSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L291-L292","name":"PSet.Equiv.eq","line":291,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.eq","doc":"Two pre-sets are equivalent iff they have the same members. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.eq\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L287-L288","name":"PSet.nonempty_of_nonempty_type","line":287,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_of_nonempty_type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_of_nonempty_type\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_of_nonempty_type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\"><span class=\"fn\">x</span>.Type</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.Nonempty</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L284-L285","name":"PSet.nonempty_type_iff_nonempty","line":284,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_type_iff_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_type_iff_nonempty\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_type_iff_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\"><span class=\"fn\">x</span>.Type</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.Nonempty</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L281-L282","name":"PSet.nonempty_toSet_iff","line":281,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_toSet_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_toSet_iff\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_toSet_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span>.toSet</span>.Nonempty</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">u</span>.Nonempty</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L277-L278","name":"PSet.nonempty_of_mem","line":277,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_of_mem\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span>.Nonempty</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L274-L275","name":"PSet.nonempty_def","line":274,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_def\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span>.Nonempty</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L271-L272","name":"PSet.Nonempty","line":271,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty","doc":"A nonempty set is one that contains some element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty\"><span class=\"name\">PSet</span>.<span class=\"name\">Nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L267-L268","name":"PSet.mem_toSet","line":267,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_toSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_toSet\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">u</span>.toSet</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L263-L264","name":"PSet.toSet","line":263,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet","doc":"Convert a pre-set to a `Set` of pre-sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\"><span class=\"name\">PSet</span>.<span class=\"name\">toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L259-L260","name":"PSet.mem_irrefl","line":259,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_irrefl\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L256-L257","name":"PSet.mem_asymm","line":256,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_asymm\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L253-L254","name":"PSet.instIsIrreflMem","line":253,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsIrreflMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsIrreflMem\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsIrreflMem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L250-L251","name":"PSet.instIsAsymmMem","line":250,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsAsymmMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsAsymmMem\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsAsymmMem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsAsymm\">IsAsymm</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L247-L248","name":"PSet.instWellFoundedRelation","line":247,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instWellFoundedRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instWellFoundedRelation\"><span class=\"name\">PSet</span>.<span class=\"name\">instWellFoundedRelation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L244-L245","name":"PSet.mem_wf","line":244,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_wf\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L232-L233","name":"PSet.Mem.congr_left","line":232,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.congr_left\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span>.<span class=\"name\">congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">∀ {<span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">w</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L224-L230","name":"PSet.equiv_iff_mem","line":224,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_iff_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_iff_mem\"><span class=\"name\">PSet</span>.<span class=\"name\">equiv_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L215-L222","name":"PSet.Mem.congr_right","line":215,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.congr_right\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span>.<span class=\"name\">congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">∀ {<span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L209-L213","name":"PSet.Mem.ext","line":209,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.ext\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L205-L207","name":"PSet.func_mem","line":205,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.func_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.func_mem\"><span class=\"name\">PSet</span>.<span class=\"name\">func_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.Type</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Func</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L202-L203","name":"PSet.Mem.mk","line":202,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.mk\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L199-L200","name":"PSet.instMembership","line":199,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instMembership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instMembership\"><span class=\"name\">PSet</span>.<span class=\"name\">instMembership</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L196-L197","name":"PSet.Mem","line":196,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem","doc":"`x ∈ y` as pre-sets if `x` is extensionally equivalent to a member of the family `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L184-L193","name":"PSet.Subset.congr_right","line":184,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset.congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset.congr_right\"><span class=\"name\">PSet</span>.<span class=\"name\">Subset</span>.<span class=\"name\">congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L173-L182","name":"PSet.Subset.congr_left","line":173,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset.congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset.congr_left\"><span class=\"name\">PSet</span>.<span class=\"name\">Subset</span>.<span class=\"name\">congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">z</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L162-L171","name":"PSet.Equiv.ext","line":162,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.ext\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L156-L160","name":"PSet.instIsTransSubset","line":156,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsTransSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsTransSubset\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsTransSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsTrans\">IsTrans</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L153-L154","name":"PSet.instIsReflSubset","line":153,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsReflSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsReflSubset\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsReflSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsRefl\">IsRefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L150-L151","name":"PSet.instHasSubset","line":150,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instHasSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instHasSubset\"><span class=\"name\">PSet</span>.<span class=\"name\">instHasSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#HasSubset\">HasSubset</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L147-L148","name":"PSet.Subset","line":147,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset","doc":"A pre-set is a subset of another pre-set if every element of the first family is extensionally\nequivalent to some element of the second family. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset\"><span class=\"name\">PSet</span>.<span class=\"name\">Subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L142-L143","name":"PSet.setoid","line":142,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.setoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.setoid\"><span class=\"name\">PSet</span>.<span class=\"name\">setoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L139-L140","name":"PSet.equiv_of_isEmpty","line":139,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_of_isEmpty\"><span class=\"name\">PSet</span>.<span class=\"name\">equiv_of_isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">x</span>.Type</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\"><span class=\"fn\">y</span>.Type</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L136-L137","name":"PSet.Equiv.trans","line":136,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.trans\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Equiv</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L132-L133","name":"PSet.Equiv.comm","line":132,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.comm\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Equiv</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L129-L130","name":"PSet.Equiv.symm","line":129,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.symm\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Equiv</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L117-L126","name":"PSet.Equiv.euc","line":117,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.euc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.euc\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">euc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.Equiv</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L114-L115","name":"PSet.Equiv.rfl","line":114,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.rfl\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L111-L112","name":"PSet.Equiv.refl","line":111,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.refl\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L107-L108","name":"PSet.Equiv.exists_right","line":107,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.exists_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.exists_right\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">exists_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><span class=\"fn\">y</span>.Type</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.Type</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Func</span> <span class=\"fn\">i</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Func</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L104-L105","name":"PSet.Equiv.exists_left","line":104,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.exists_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.exists_left\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">exists_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">x</span>.Type</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.Type</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Func</span> <span class=\"fn\">i</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Func</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L99-L102","name":"PSet.equiv_iff","line":99,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_iff\"><span class=\"name\">PSet</span>.<span class=\"name\">equiv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Equiv</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.Type</span>), <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.Type</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Func</span> <span class=\"fn\">i</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Func</span> <span class=\"fn\">j</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.Type</span>), <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.Type</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Func</span> <span class=\"fn\">i</span></span>)</span>.Equiv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.Func</span> <span class=\"fn\">j</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L96-L97","name":"PSet.Equiv","line":96,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv","doc":"Two pre-sets are extensionally equivalent if every element of the first family is extensionally\nequivalent to some element of the second family and vice-versa. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L91-L92","name":"PSet.eta","line":91,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.eta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.eta\"><span class=\"name\">PSet</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\"><span class=\"fn\">x</span>.Type</span> <span class=\"fn\"><span class=\"fn\">x</span>.Func</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L87-L88","name":"PSet.mk_func","line":87,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk_func","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk_func\"><span class=\"name\">PSet</span>.<span class=\"name\">mk_func</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span>)</span>.Func</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L83-L84","name":"PSet.mk_type","line":83,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk_type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk_type\"><span class=\"name\">PSet</span>.<span class=\"name\">mk_type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span>)</span>.Type</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L79-L80","name":"PSet.Func","line":79,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func","doc":"The underlying pre-set family of a pre-set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\"><span class=\"name\">PSet</span>.<span class=\"name\">Func</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.Type</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L75-L76","name":"PSet.Type","line":75,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type","doc":"The underlying type of a pre-set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\"><span class=\"name\">PSet</span>.<span class=\"name\">Type</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L70-L70","name":"PSet.mk","line":70,"kind":"ctor","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\"><span class=\"name\">PSet</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/SetTheory/ZFC/Basic.lean#L69-L70","name":"PSet","line":69,"kind":"inductive","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet","doc":"The type of pre-sets in universe `u`. A pre-set\nis a family of pre-sets indexed by a type in `Type u`.\nThe ZFC universe is defined as a quotient of this\nto ensure extensionality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\"><span class=\"name\">PSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}