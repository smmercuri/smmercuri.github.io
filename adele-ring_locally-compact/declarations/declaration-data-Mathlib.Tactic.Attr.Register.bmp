{"name":"Mathlib.Tactic.Attr.Register","instances":[],"imports":["Init","Lean.Meta.Tactic.Simp.SimpTheorems","Lean.Meta.Tactic.Simp.RegisterCommand","Lean.LabelAttribute"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L84-L85","name":"Parser.Attr.is_poly","line":84,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.is_poly","doc":"A stub attribute for `is_poly`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.is_poly\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">is_poly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L79-L82","name":"Parser.Attr.nontriviality","line":79,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.nontriviality","doc":"The `@[nontriviality]` simp set is used by the `nontriviality` tactic to automatically\ndischarge theorems about the trivial case (where we know `Subsingleton Î±` and many theorems\nin e.g. groups are trivially true). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.nontriviality\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">nontriviality</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L79-L82","name":"Parser.Attr.nontriviality_proc","line":79,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.nontriviality_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.nontriviality_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">nontriviality_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L76-L77","name":"Parser.Attr.ghost_simps","line":76,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.ghost_simps","doc":"Simplification rules for ghost equations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.ghost_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">ghost_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L76-L77","name":"Parser.Attr.ghost_simps_proc","line":76,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.ghost_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.ghost_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">ghost_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L73-L74","name":"Parser.Attr.typevec","line":73,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.typevec","doc":"simp set for the manipulation of typevec and arrow expressions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.typevec\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">typevec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L73-L74","name":"Parser.Attr.typevec_proc","line":73,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.typevec_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.typevec_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">typevec_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L70-L71","name":"Parser.Attr.integral_simps","line":70,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.integral_simps","doc":"Simp set for integral rules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.integral_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">integral_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L70-L71","name":"Parser.Attr.integral_simps_proc","line":70,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.integral_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.integral_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">integral_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L56-L68","name":"Parser.Attr.mfld_simps","line":56,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.mfld_simps","doc":"The simpset `mfld_simps` records several simp lemmas that are\nespecially useful in manifolds. It is a subset of the whole set of simp lemmas, but it makes it\npossible to have quicker proofs (when used with `squeeze_simp` or `simp only`) while retaining\nreadability.\n\nThe typical use case is the following, in a file on manifolds:\nIf `simp [foo, bar]` is slow, replace it with `squeeze_simp [foo, bar, mfld_simps]` and paste\nits output. The list of lemmas should be reasonable (contrary to the output of\n`squeeze_simp [foo, bar]` which might contain tens of lemmas), and the outcome should be quick\nenough.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.mfld_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">mfld_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L56-L68","name":"Parser.Attr.mfld_simps_proc","line":56,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.mfld_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.mfld_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">mfld_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L52-L54","name":"Parser.Attr.zify_simps","line":52,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.zify_simps","doc":"The simpset `zify_simps` is used by the tactic `zify` to move expressions from `â` to `â¤`\nwhich gives a well-behaved subtraction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.zify_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">zify_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L52-L54","name":"Parser.Attr.zify_simps_proc","line":52,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.zify_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.zify_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">zify_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L48-L50","name":"Parser.Attr.qify_simps","line":48,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.qify_simps","doc":"The simpset `qify_simps` is used by the tactic `qify` to move expressions from `â` or `â¤` to `â`\nwhich gives a well-behaved division. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.qify_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">qify_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L48-L50","name":"Parser.Attr.qify_simps_proc","line":48,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.qify_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.qify_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">qify_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L44-L46","name":"Parser.Attr.rify_simps_proc","line":44,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rify_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rify_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">rify_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L44-L46","name":"Parser.Attr.rify_simps","line":44,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rify_simps","doc":"The simpset `rify_simps` is used by the tactic `rify` to move expressions from `â`, `â¤`, or\n`â` to `â`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rify_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">rify_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L41-L42","name":"Parser.Attr.isROrC_simps","line":41,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.isROrC_simps","doc":"\"Simp attribute for lemmas about `IsROrC`\" "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.isROrC_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">isROrC_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L41-L42","name":"Parser.Attr.isROrC_simps_proc","line":41,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.isROrC_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.isROrC_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">isROrC_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L38-L39","name":"Parser.Attr.parity_simps_proc","line":38,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.parity_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.parity_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">parity_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L38-L39","name":"Parser.Attr.parity_simps","line":38,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.parity_simps","doc":"Simp attribute for lemmas about `Even` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.parity_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">parity_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L33-L36","name":"Parser.Attr.field_simps","line":33,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.field_simps","doc":"The simpset `field_simps` is used by the tactic `field_simp` to\nreduce an expression in a field to an expression of the form `n / d` where `n` and `d` are\ndivision-free. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.field_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">field_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L33-L36","name":"Parser.Attr.field_simps_proc","line":33,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.field_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.field_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">field_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L30-L31","name":"Parser.Attr.monad_norm","line":30,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.monad_norm","doc":"Simp set for `functor_norm` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.monad_norm\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">monad_norm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L30-L31","name":"Parser.Attr.monad_norm_proc","line":30,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.monad_norm_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.monad_norm_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">monad_norm_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L20-L21","name":"Parser.Attr.functor_norm_proc","line":20,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.functor_norm_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.functor_norm_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">functor_norm_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Attr/Register.lean#L20-L21","name":"Parser.Attr.functor_norm","line":20,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.functor_norm","doc":"Simp set for `functor_norm` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.functor_norm\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">functor_norm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}