{"name":"Mathlib.Tactic.CategoryTheory.Monoidal","instances":[{"typeNames":["Mathlib.Tactic.Monoidal.Mor₁"],"name":"Mathlib.Tactic.Monoidal.instInhabitedMor₁","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.Monoidal.StructuralAtom"],"name":"Mathlib.Tactic.Monoidal.instInhabitedStructuralAtom","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.Monoidal.Atom"],"name":"Mathlib.Tactic.Monoidal.instInhabitedAtom","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.Monoidal.WhiskerRightExpr"],"name":"Mathlib.Tactic.Monoidal.instInhabitedWhiskerRightExpr","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.Monoidal.WhiskerLeftExpr"],"name":"Mathlib.Tactic.Monoidal.instInhabitedWhiskerLeftExpr","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.Monoidal.Structural"],"name":"Mathlib.Tactic.Monoidal.instInhabitedStructural","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.Monoidal.NormalExpr"],"name":"Mathlib.Tactic.Monoidal.instInhabitedNormalExpr","className":"Inhabited"}],"imports":["Init","Mathlib.Tactic.CategoryTheory.Coherence"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L722-L726","name":"tacticMonoidal_nf","line":722,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#tacticMonoidal_nf","doc":"Normalize the both sides of an equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#tacticMonoidal_nf\"><span class=\"name\">tacticMonoidal_nf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L713-L719","name":"mkEq","line":713,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#mkEq","doc":"Transform an equality between 2-morphisms into the equality between their normalizations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#mkEq\"><span class=\"name\">mkEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L708-L709","name":"mk_eq","line":708,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#mk_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#mk_eq\"><span class=\"name\">mk_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a' : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b' : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L698-L706","name":"«termNormalize%_»","line":698,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#«termNormalize%_»","doc":"`normalize% η` is the normalization of the 2-morphism `η`.\n1. The normalized 2-morphism is of the form `α₀ ≫ η₀ ≫ α₁ ≫ η₁ ≫ ... αₘ ≫ ηₘ ≫ αₘ₊₁` where\n  each `αᵢ` is a structural 2-morphism (consisting of associators and unitors),\n2. each `ηᵢ` is a non-structural 2-morphism of the form `f₁ ◁ ... ◁ fₘ ◁ θ`, and\n3. `θ` is of the form `ι ▷ g₁ ▷ ... ▷ gₗ`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#«termNormalize%_»\"><span class=\"name\">«termNormalize%_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L690-L692","name":"Mathlib.Tactic.Monoidal.NormalExpr.toList","line":690,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.toList","doc":"Convert a `NormalExpr` expression into a list of `WhiskerLeftExpr` expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.toList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L651-L687","name":"Mathlib.Tactic.Monoidal.eval","line":651,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval","doc":"Evaluate the expression of a 2-morphism into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result\">Mathlib.Tactic.Monoidal.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L609-L648","name":"Mathlib.Tactic.Monoidal.evalWhiskerRightExpr","line":609,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRightExpr","doc":"Evaluate the expression `η ▷ f` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRightExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerRightExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a> →\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result\">Mathlib.Tactic.Monoidal.Result</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L581-L606","name":"Mathlib.Tactic.Monoidal.evalWhiskerLeftExpr","line":581,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeftExpr","doc":"Evaluate the expression `f ◁ η` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeftExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerLeftExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a> →\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result\">Mathlib.Tactic.Monoidal.Result</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L566-L578","name":"Mathlib.Tactic.Monoidal.evalComp","line":566,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalComp","doc":"Evaluate the expression `η ≫ θ` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalComp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a> →\n  <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result\">Mathlib.Tactic.Monoidal.Result</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L563-L563","name":"Mathlib.Tactic.Monoidal.Result.proof","line":563,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result.proof","doc":"The proof that the normalized expression is equal to the original expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result.proof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Result</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result\">Mathlib.Tactic.Monoidal.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L561-L561","name":"Mathlib.Tactic.Monoidal.Result.expr","line":561,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result.expr","doc":"The normalized expression of the 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result.expr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Result</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result\">Mathlib.Tactic.Monoidal.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L559-L559","name":"Mathlib.Tactic.Monoidal.Result.mk","line":559,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result\">Mathlib.Tactic.Monoidal.Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L559-L563","name":"Mathlib.Tactic.Monoidal.Result","line":559,"kind":"structure","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result","doc":"The result of evaluating an expression into normal form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Result\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L553-L556","name":"Mathlib.Tactic.Monoidal.NormalExpr.e","line":553,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.e","doc":"Extract a Lean expression from a `NormalExpr` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L547-L550","name":"Mathlib.Tactic.Monoidal.WhiskerLeftExpr.e","line":547,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.e","doc":"Extract a Lean expression from a `WhiskerLeftExpr` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerLeftExpr</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L541-L544","name":"Mathlib.Tactic.Monoidal.WhiskerRightExpr.e","line":541,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.e","doc":"Extract a Lean expression from a `WhiskerRightExpr` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerRightExpr</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\">Mathlib.Tactic.Monoidal.WhiskerRightExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L530-L538","name":"Mathlib.Tactic.Monoidal.Structural.e","line":530,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.e","doc":"Extract a Lean expression from a `Structural` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L515-L527","name":"Mathlib.Tactic.Monoidal.StructuralAtom.e","line":515,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.e","doc":"Extract a Lean expression from a `StructuralAtom` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L506-L512","name":"Mathlib.Tactic.Monoidal.Mor₁.e","line":506,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.e","doc":"Extract a Lean expression from a `Mor₁` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Mor₁</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L497-L501","name":"Mathlib.Tactic.Monoidal.eval_monoidalComp","line":497,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_monoidalComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_monoidalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">eval_monoidalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η' : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ : <span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ' : <span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{αθ : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ηαθ : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_η : <span class=\"fn\"><span class=\"fn\">η</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_θ : <span class=\"fn\"><span class=\"fn\">θ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_αθ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">θ'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">αθ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_ηαθ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η'</span> <span class=\"fn\">αθ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ηαθ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">θ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ηαθ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L491-L495","name":"Mathlib.Tactic.Monoidal.evalWhiskerRight_id","line":491,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_id\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerRight_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₁ : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">𝟙_ <span class=\"fn\">C</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">𝟙_ <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">𝟙_ <span class=\"fn\">C</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_η₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.rightUnitor\">CategoryTheory.MonoidalCategory.rightUnitor</a> <span class=\"fn\">g</span></span>)</span>.inv</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_η₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.rightUnitor\">CategoryTheory.MonoidalCategory.rightUnitor</a> <span class=\"fn\">f</span></span>)</span>.hom</span> <span class=\"fn\">η₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">η</span> <span class=\"fn\">(<span class=\"fn\">𝟙_ <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L483-L489","name":"Mathlib.Tactic.Monoidal.evalWhiskerRight_comp","line":483,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_comp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerRight_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f' : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">f'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f'</span> <span class=\"fn\">g</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f'</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">h</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₃ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₄ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_η₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">η</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_η₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">η₁</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_η₃ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η₂</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a> <span class=\"fn\">f'</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span>.hom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_η₄ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span>.inv</span> <span class=\"fn\">η₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₄</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">η</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₄</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L471-L481","name":"Mathlib.Tactic.Monoidal.evalWhiskerRight_cons_whisker","line":471,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_cons_whisker","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_cons_whisker\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerRight_cons_whisker</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ηs : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">h</span> <span class=\"fn\">k</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">i</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">h</span> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">i</span> <span class=\"fn\">k</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ηs₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ηs₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">i</span> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₃ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">h</span> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₄ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η₅ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">k</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_η₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">h</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">η₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_η₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">η₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_ηs₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">ηs</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ηs₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_ηs₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">k</span></span>)</span>.inv</span> <span class=\"fn\">ηs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ηs₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_η₃ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η₂</span> <span class=\"fn\">ηs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_η₄ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span> <span class=\"fn\">k</span></span>)</span>.hom</span> <span class=\"fn\">η₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₄</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_η₅ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">η₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η₅</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">η</span></span>)</span> <span class=\"fn\">ηs</span></span>)</span></span>)</span>\n    <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">η₅</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L465-L469","name":"Mathlib.Tactic.Monoidal.evalWhiskerRight_cons_of_of","line":465,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_cons_of_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_cons_of_of\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerRight_cons_of_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ηs : <span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">h</span> <span class=\"fn\">j</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">ηs</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">ηs</span></span>)</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">α</span> <span class=\"fn\">j</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">η</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">θ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L461-L463","name":"Mathlib.Tactic.Monoidal.evalWhiskerRight_nil","line":461,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerRight_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerRight_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">α</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">α</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L456-L458","name":"Mathlib.Tactic.Monoidal.eval_of","line":456,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_of\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">eval_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">η</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">f</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L450-L454","name":"Mathlib.Tactic.Monoidal.eval_whiskerRight","line":450,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_whiskerRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_whiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">eval_whiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η' : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_η : <span class=\"fn\"><span class=\"fn\">η</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">η'</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategory.whiskerRight</a> <span class=\"fn\">η</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L444-L448","name":"Mathlib.Tactic.Monoidal.eval_whiskerLeft","line":444,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_whiskerLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_whiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">eval_whiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η' : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_η : <span class=\"fn\"><span class=\"fn\">η</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">η'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L438-L442","name":"Mathlib.Tactic.Monoidal.eval_comp","line":438,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.eval_comp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">eval_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η' : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ' : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_η : <span class=\"fn\"><span class=\"fn\">η</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_θ : <span class=\"fn\"><span class=\"fn\">θ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_ηθ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η'</span> <span class=\"fn\">θ'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">θ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L432-L436","name":"Mathlib.Tactic.Monoidal.evalWhiskerLeft_id","line":432,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeft_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeft_id\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerLeft_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η' : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\">𝟙_ <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">g</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η'' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\">𝟙_ <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\">𝟙_ <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">g</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_η' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.leftUnitor\">CategoryTheory.MonoidalCategory.leftUnitor</a> <span class=\"fn\">g</span></span>)</span>.inv</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_η'' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.leftUnitor\">CategoryTheory.MonoidalCategory.leftUnitor</a> <span class=\"fn\">f</span></span>)</span>.hom</span> <span class=\"fn\">η'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η''</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">(<span class=\"fn\">𝟙_ <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η''</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L425-L430","name":"Mathlib.Tactic.Monoidal.evalWhiskerLeft_comp","line":425,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeft_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeft_comp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerLeft_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{η : <span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">i</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι'' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">g</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_ι : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">θ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_ι' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">ι</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">i</span></span>)</span>.inv</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pf_ι'' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span>.hom</span> <span class=\"fn\">ι'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ι''</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ι''</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L420-L423","name":"Mathlib.Tactic.Monoidal.evalWhiskerLeft_of_cons","line":420,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeft_of_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeft_of_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerLeft_of_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ηs : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_θ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">ηs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">ηs</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">α</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">η</span></span>)</span> <span class=\"fn\">θ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L416-L418","name":"Mathlib.Tactic.Monoidal.evalWhiskerLeft_nil","line":416,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeft_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalWhiskerLeft_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalWhiskerLeft_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L410-L413","name":"Mathlib.Tactic.Monoidal.evalComp_cons","line":410,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalComp_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalComp_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalComp_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ηs : <span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{θ : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf_ι : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">ηs</span> <span class=\"fn\">θ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">ηs</span></span>)</span></span>)</span> <span class=\"fn\">θ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">ι</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L406-L408","name":"Mathlib.Tactic.Monoidal.evalComp_nil_nil","line":406,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalComp_nil_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalComp_nil_nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalComp_nil_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L401-L403","name":"Mathlib.Tactic.Monoidal.evalComp_nil_cons","line":401,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalComp_nil_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.evalComp_nil_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">evalComp_nil_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ηs : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">ηs</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">ηs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L373-L389","name":"Mathlib.Tactic.Monoidal.structuralOfMonoidalComp","line":373,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.structuralOfMonoidalComp","doc":"If `e` is an expression of the form `η ⊗≫ θ := η ≫ α ≫ θ` in the monoidal category `C`,\nreturn the expression for `α` ."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.structuralOfMonoidalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">structuralOfMonoidalComp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L368-L369","name":"Mathlib.Tactic.Monoidal.NormalExpr.ofExpr","line":368,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.ofExpr","doc":"Construct a `NormalExpr` expression from a Lean expression for an atomic 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.ofExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">ofExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L364-L365","name":"Mathlib.Tactic.Monoidal.NormalExpr.of","line":364,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.of","doc":"Construct a `NormalExpr` expression from a `WhiskerLeftExpr` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.of\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L348-L361","name":"Mathlib.Tactic.Monoidal.structural?","line":348,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.structural?","doc":"Construct a `Structural` expression from a Lean expression for a structural 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.structural?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">structural?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L343-L345","name":"Mathlib.Tactic.Monoidal.WhiskerLeftExpr.atom","line":343,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.atom","doc":"Return `η` for `f₁ ◁ ... ◁ fₙ ◁ η ▷ g₁ ▷ ... ▷ gₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.atom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerLeftExpr</span>.<span class=\"name\">atom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom\">Mathlib.Tactic.Monoidal.Atom</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L338-L340","name":"Mathlib.Tactic.Monoidal.WhiskerRightExpr.atom","line":338,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.atom","doc":"Return `η` for `η ▷ g₁ ▷ ... ▷ gₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.atom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerRightExpr</span>.<span class=\"name\">atom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\">Mathlib.Tactic.Monoidal.WhiskerRightExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom\">Mathlib.Tactic.Monoidal.Atom</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L334-L335","name":"Mathlib.Tactic.Monoidal.NormalExpr.rightUnitorInv","line":334,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.rightUnitorInv","doc":"The inverse of the right unitor as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.rightUnitorInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">rightUnitorInv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L330-L331","name":"Mathlib.Tactic.Monoidal.NormalExpr.rightUnitor","line":330,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.rightUnitor","doc":"The right unitor as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.rightUnitor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">rightUnitor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L326-L327","name":"Mathlib.Tactic.Monoidal.NormalExpr.leftUnitorInv","line":326,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.leftUnitorInv","doc":"The inverse of the left unitor as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.leftUnitorInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">leftUnitorInv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L322-L323","name":"Mathlib.Tactic.Monoidal.NormalExpr.leftUnitor","line":322,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.leftUnitor","doc":"The left unitor as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.leftUnitor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">leftUnitor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L318-L319","name":"Mathlib.Tactic.Monoidal.NormalExpr.associatorInv","line":318,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.associatorInv","doc":"The inverse of the associator as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.associatorInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">associatorInv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L314-L315","name":"Mathlib.Tactic.Monoidal.NormalExpr.associator","line":314,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.associator","doc":"The associator as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.associator\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">associator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L309-L311","name":"Mathlib.Tactic.Monoidal.NormalExpr.tgt","line":309,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.tgt","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.tgt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">tgt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L304-L306","name":"Mathlib.Tactic.Monoidal.NormalExpr.src","line":304,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.src","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.src\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">src</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L295-L301","name":"Mathlib.Tactic.Monoidal.Structural.tgt","line":295,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.tgt","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.tgt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span>.<span class=\"name\">tgt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L286-L292","name":"Mathlib.Tactic.Monoidal.Structural.src","line":286,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.src","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.src\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span>.<span class=\"name\">src</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L277-L283","name":"Mathlib.Tactic.Monoidal.StructuralAtom.tgt","line":277,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.tgt","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.tgt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span>.<span class=\"name\">tgt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L268-L274","name":"Mathlib.Tactic.Monoidal.StructuralAtom.src","line":268,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.src","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.src\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span>.<span class=\"name\">src</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L263-L265","name":"Mathlib.Tactic.Monoidal.WhiskerLeftExpr.tgt","line":263,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.tgt","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.tgt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerLeftExpr</span>.<span class=\"name\">tgt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L258-L260","name":"Mathlib.Tactic.Monoidal.WhiskerLeftExpr.src","line":258,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.src","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.src\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerLeftExpr</span>.<span class=\"name\">src</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L253-L255","name":"Mathlib.Tactic.Monoidal.WhiskerRightExpr.tgt","line":253,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.tgt","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.tgt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerRightExpr</span>.<span class=\"name\">tgt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\">Mathlib.Tactic.Monoidal.WhiskerRightExpr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L248-L250","name":"Mathlib.Tactic.Monoidal.WhiskerRightExpr.src","line":248,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.src","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.src\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerRightExpr</span>.<span class=\"name\">src</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\">Mathlib.Tactic.Monoidal.WhiskerRightExpr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L245-L245","name":"Mathlib.Tactic.Monoidal.Atom.tgt","line":245,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom.tgt","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom.tgt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Atom</span>.<span class=\"name\">tgt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom\">Mathlib.Tactic.Monoidal.Atom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L242-L242","name":"Mathlib.Tactic.Monoidal.Atom.src","line":242,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom.src","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom.src\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Atom</span>.<span class=\"name\">src</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom\">Mathlib.Tactic.Monoidal.Atom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L236-L239","name":"Mathlib.Tactic.Monoidal.tgt","line":236,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.tgt","doc":"The codomain of a morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.tgt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">tgt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L230-L233","name":"Mathlib.Tactic.Monoidal.src","line":230,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.src","doc":"The domain of a morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.src\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">src</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L227-L227","name":"Mathlib.Tactic.Monoidal.instInhabitedNormalExpr","line":227,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedNormalExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedNormalExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instInhabitedNormalExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L225-L226","name":"Mathlib.Tactic.Monoidal.NormalExpr.cons","line":225,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.cons","doc":"Construct the normalized expression of 2-morphisms recursively. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(head_structural : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(head : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tail : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L223-L224","name":"Mathlib.Tactic.Monoidal.NormalExpr.nil","line":223,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.nil","doc":"Construct the expression for a structural 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr.nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\">Mathlib.Tactic.Monoidal.NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L222-L227","name":"Mathlib.Tactic.Monoidal.NormalExpr","line":222,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr","doc":"Normalized expressions for 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.NormalExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">NormalExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L219-L219","name":"Mathlib.Tactic.Monoidal.instInhabitedStructural","line":219,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedStructural","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedStructural\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instInhabitedStructural</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L217-L218","name":"Mathlib.Tactic.Monoidal.Structural.monoidalCoherence","line":217,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.monoidalCoherence","doc":"Expressions for `α` in the monoidal composition `η ⊗≫ θ := η ≫ α ≫ θ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.monoidalCoherence\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span>.<span class=\"name\">monoidalCoherence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L215-L216","name":"Mathlib.Tactic.Monoidal.Structural.whiskerRight","line":215,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.whiskerRight","doc":"Expressions for the right whiskering `η ▷ f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.whiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span>.<span class=\"name\">whiskerRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L213-L214","name":"Mathlib.Tactic.Monoidal.Structural.whiskerLeft","line":213,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.whiskerLeft","doc":"Expressions for the left whiskering `f ◁ η`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.whiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span>.<span class=\"name\">whiskerLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L211-L212","name":"Mathlib.Tactic.Monoidal.Structural.comp","line":211,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.comp","doc":"Expressions for the composition `η ≫ θ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.comp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span>.<span class=\"name\">comp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L209-L210","name":"Mathlib.Tactic.Monoidal.Structural.id","line":209,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.id","doc":"Expressions for the identity `𝟙 f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.id\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L207-L208","name":"Mathlib.Tactic.Monoidal.Structural.atom","line":207,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.atom","doc":"Expressions for atomic structural 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural.atom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span>.<span class=\"name\">atom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\">Mathlib.Tactic.Monoidal.Structural</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L206-L219","name":"Mathlib.Tactic.Monoidal.Structural","line":206,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural","doc":"Expressions for structural 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Structural\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Structural</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L203-L203","name":"Mathlib.Tactic.Monoidal.instInhabitedWhiskerLeftExpr","line":203,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedWhiskerLeftExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedWhiskerLeftExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instInhabitedWhiskerLeftExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L201-L202","name":"Mathlib.Tactic.Monoidal.WhiskerLeftExpr.whisker","line":201,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.whisker","doc":"Construct the expression for `f ◁ η`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.whisker\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerLeftExpr</span>.<span class=\"name\">whisker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁\">Mathlib.Tactic.Monoidal.Atom₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L199-L200","name":"Mathlib.Tactic.Monoidal.WhiskerLeftExpr.of","line":199,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.of","doc":"Construct the expression for a right-whiskered 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr.of\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerLeftExpr</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\">Mathlib.Tactic.Monoidal.WhiskerRightExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\">Mathlib.Tactic.Monoidal.WhiskerLeftExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L198-L203","name":"Mathlib.Tactic.Monoidal.WhiskerLeftExpr","line":198,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr","doc":"Expressions of the form `f₁ ◁ ... ◁ fₙ ◁ η`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerLeftExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerLeftExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L195-L195","name":"Mathlib.Tactic.Monoidal.instInhabitedWhiskerRightExpr","line":195,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedWhiskerRightExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedWhiskerRightExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instInhabitedWhiskerRightExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\">Mathlib.Tactic.Monoidal.WhiskerRightExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L193-L194","name":"Mathlib.Tactic.Monoidal.WhiskerRightExpr.whisker","line":193,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.whisker","doc":"Construct the expression for `η ▷ f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.whisker\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerRightExpr</span>.<span class=\"name\">whisker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\">Mathlib.Tactic.Monoidal.WhiskerRightExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁\">Mathlib.Tactic.Monoidal.Atom₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\">Mathlib.Tactic.Monoidal.WhiskerRightExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L191-L192","name":"Mathlib.Tactic.Monoidal.WhiskerRightExpr.of","line":191,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.of","doc":"Construct the expression for an atomic 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr.of\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerRightExpr</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(η : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom\">Mathlib.Tactic.Monoidal.Atom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\">Mathlib.Tactic.Monoidal.WhiskerRightExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L190-L195","name":"Mathlib.Tactic.Monoidal.WhiskerRightExpr","line":190,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr","doc":"Expressions of the form `η ▷ f₁ ▷ ... ▷ fₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.WhiskerRightExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">WhiskerRightExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L187-L187","name":"Mathlib.Tactic.Monoidal.instInhabitedAtom","line":187,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedAtom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedAtom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instInhabitedAtom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom\">Mathlib.Tactic.Monoidal.Atom</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L186-L186","name":"Mathlib.Tactic.Monoidal.Atom.e","line":186,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom.e","doc":"Extract a Lean expression from an `Atom` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Atom</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom\">Mathlib.Tactic.Monoidal.Atom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L184-L184","name":"Mathlib.Tactic.Monoidal.Atom.mk","line":184,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Atom</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom\">Mathlib.Tactic.Monoidal.Atom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L184-L187","name":"Mathlib.Tactic.Monoidal.Atom","line":184,"kind":"structure","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom","doc":"Expressions for atomic non-structural 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Atom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L161-L181","name":"Mathlib.Tactic.Monoidal.structuralAtom?","line":161,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.structuralAtom?","doc":"Construct a `StructuralAtom` expression from a Lean expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.structuralAtom?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">structuralAtom?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L158-L158","name":"Mathlib.Tactic.Monoidal.instInhabitedStructuralAtom","line":158,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedStructuralAtom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedStructuralAtom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instInhabitedStructuralAtom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L156-L157","name":"Mathlib.Tactic.Monoidal.StructuralAtom.rightUnitorInv","line":156,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.rightUnitorInv","doc":"The expression for the inverse of the right unitor `(ρ_ f).inv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.rightUnitorInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span>.<span class=\"name\">rightUnitorInv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L154-L155","name":"Mathlib.Tactic.Monoidal.StructuralAtom.rightUnitor","line":154,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.rightUnitor","doc":"The expression for the right unitor `(ρ_ f).hom`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.rightUnitor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span>.<span class=\"name\">rightUnitor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L152-L153","name":"Mathlib.Tactic.Monoidal.StructuralAtom.leftUnitorInv","line":152,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.leftUnitorInv","doc":"The expression for the inverse of the left unitor `(λ_ f).inv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.leftUnitorInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span>.<span class=\"name\">leftUnitorInv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L150-L151","name":"Mathlib.Tactic.Monoidal.StructuralAtom.leftUnitor","line":150,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.leftUnitor","doc":"The expression for the left unitor `(λ_ f).hom`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.leftUnitor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span>.<span class=\"name\">leftUnitor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L148-L149","name":"Mathlib.Tactic.Monoidal.StructuralAtom.associatorInv","line":148,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.associatorInv","doc":"The expression for the inverse of the associator `(α_ f g h).inv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.associatorInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span>.<span class=\"name\">associatorInv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L146-L147","name":"Mathlib.Tactic.Monoidal.StructuralAtom.associator","line":146,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.associator","doc":"The expression for the associator `(α_ f g h).hom`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom.associator\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span>.<span class=\"name\">associator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\">Mathlib.Tactic.Monoidal.StructuralAtom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L145-L158","name":"Mathlib.Tactic.Monoidal.StructuralAtom","line":145,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom","doc":"Expressions for atomic structural 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.StructuralAtom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralAtom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L136-L142","name":"Mathlib.Tactic.Monoidal.toMor₁","line":136,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.toMor₁","doc":"Construct a `Mor₁` expression from a Lean expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.toMor₁\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">toMor₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L122-L133","name":"Mathlib.Tactic.Monoidal.isTensorObj?","line":122,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.isTensorObj?","doc":"Returns `(f, g)` if the expression `e` is of the form `f ⊗ g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.isTensorObj?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">isTensorObj?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L110-L119","name":"Mathlib.Tactic.Monoidal.isTensorUnit?","line":110,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.isTensorUnit?","doc":"Returns `𝟙_ C` if the expression `e` is of the form `𝟙_ C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.isTensorUnit?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">isTensorUnit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L104-L107","name":"Mathlib.Tactic.Monoidal.Mor₁.toList","line":104,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.toList","doc":"Converts a 1-morphism into a list of its components. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.toList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Mor₁</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁\">Mathlib.Tactic.Monoidal.Atom₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L101-L101","name":"Mathlib.Tactic.Monoidal.instInhabitedMor₁","line":101,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedMor₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.instInhabitedMor₁\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instInhabitedMor₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L99-L100","name":"Mathlib.Tactic.Monoidal.Mor₁.of","line":99,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.of","doc":"Construct the expression for an atomic 1-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.of\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Mor₁</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁\">Mathlib.Tactic.Monoidal.Atom₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L97-L98","name":"Mathlib.Tactic.Monoidal.Mor₁.comp","line":97,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.comp","doc":"`comp X Y` is the expression for `X ⊗ Y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.comp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Mor₁</span>.<span class=\"name\">comp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L95-L96","name":"Mathlib.Tactic.Monoidal.Mor₁.id","line":95,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.id","doc":"`id` is the expression for `𝟙_ C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁.id\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Mor₁</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\">Mathlib.Tactic.Monoidal.Mor₁</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L94-L101","name":"Mathlib.Tactic.Monoidal.Mor₁","line":94,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁","doc":"Expressions for 1-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Mor₁\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Mor₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L91-L91","name":"Mathlib.Tactic.Monoidal.Atom₁.e","line":91,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁.e","doc":"Extract a Lean expression from an `Atom₁` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Atom₁</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁\">Mathlib.Tactic.Monoidal.Atom₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L89-L89","name":"Mathlib.Tactic.Monoidal.Atom₁.mk","line":89,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Atom₁</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁\">Mathlib.Tactic.Monoidal.Atom₁</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L89-L91","name":"Mathlib.Tactic.Monoidal.Atom₁","line":89,"kind":"structure","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁","doc":"Expressions for atomic 1-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Atom₁\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Atom₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L85-L86","name":"Mathlib.Tactic.Monoidal.MonoidalM.run","line":85,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM.run","doc":"Run a computation in the `M` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM.run\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">MonoidalM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context\">Mathlib.Tactic.Monoidal.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\">Mathlib.Tactic.Monoidal.MonoidalM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L82-L82","name":"Mathlib.Tactic.Monoidal.MonoidalM","line":82,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM","doc":"The monad for the normalization of 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.MonoidalM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">MonoidalM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L74-L79","name":"Mathlib.Tactic.Monoidal.mkContext","line":74,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.mkContext","doc":"Populate a `context` object for evaluating `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.mkContext\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">mkContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context\">Mathlib.Tactic.Monoidal.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L71-L71","name":"Mathlib.Tactic.Monoidal.Context.C","line":71,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context.C","doc":"The expression for the underlying category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context.C\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span>.<span class=\"name\">C</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context\">Mathlib.Tactic.Monoidal.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L69-L69","name":"Mathlib.Tactic.Monoidal.Context.mk","line":69,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context\">Mathlib.Tactic.Monoidal.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/CategoryTheory/Monoidal.lean#L69-L71","name":"Mathlib.Tactic.Monoidal.Context","line":69,"kind":"structure","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context","doc":"The context for evaluating expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal.html#Mathlib.Tactic.Monoidal.Context\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}