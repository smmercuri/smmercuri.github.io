{"name":"Mathlib.Tactic.Conv","instances":[],"imports":["Init","Lean.Elab.Tactic.Conv.Basic","Lean.Elab.Command"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L125-L132","name":"Mathlib.Tactic.Conv.«command#simpOnly_=>__»","line":125,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«command#simpOnly_=>__»","doc":"* `#simp => e` runs `simp` on the expression `e` and displays the resulting expression after\n  simplification.\n* `#simp only [lems] => e` runs `simp only [lems]` on `e`.\n* The `=>` is optional, so `#simp e` and `#simp only [lems] e` have the same behavior.\n  It is mostly useful for disambiguating the expression `e` from the lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«command#simpOnly_=&gt;__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">«command#simpOnly_=&gt;__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L123-L123","name":"Mathlib.Tactic.Conv.«command#whnfR_»","line":123,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«command#whnfR_»","doc":"The command `#whnfR e` evaluates `e` to Weak Head Normal Form with Reducible transparency,\nthat is, it uses `whnf` but only unfolding reducible definitions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«command#whnfR_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">«command#whnfR_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L117-L117","name":"Mathlib.Tactic.Conv.«command#whnf_»","line":117,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«command#whnf_»","doc":"The command `#whnf e` evaluates `e` to Weak Head Normal Form, which means that the \"head\"\nof the expression is reduced to a primitive - a lambda or forall, or an axiom or inductive type.\nIt is similar to `#reduce e`, but it does not reduce the expression completely,\nonly until the first constructor is exposed. For example:\n```\nopen Nat List\nset_option pp.notation false\n#whnf [1, 2, 3].map succ\n-- cons (succ 1) (map succ (cons 2 (cons 3 nil)))\n#reduce [1, 2, 3].map succ\n-- cons 2 (cons 3 (cons 4 nil))\n```\nThe head of this expression is the `List.cons` constructor,\nso we can see from this much that the list is not empty,\nbut the subterms `Nat.succ 1` and `List.map Nat.succ (List.cons 2 (List.cons 3 List.nil))` are\nstill unevaluated. `#reduce` is equivalent to using `#whnf` on every subexpression.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«command#whnf_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">«command#whnf_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L96-L97","name":"Mathlib.Tactic.Conv.withReducible","line":96,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.withReducible","doc":"`with_reducible tacs` executes `tacs` using the reducible transparency setting.\nIn this setting only definitions tagged as `[reducible]` are unfolded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.withReducible\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">withReducible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L72-L93","name":"Mathlib.Tactic.Conv.«command#conv_=>_»","line":72,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«command#conv_=>_»","doc":"The command `#conv tac => e` will run a conv tactic `tac` on `e`, and display the resulting\nexpression (discarding the proof).\nFor example, `#conv rw [true_and] => True ∧ False` displays `False`.\nThere are also shorthand commands for several common conv tactics:\n\n* `#whnf e` is short for `#conv whnf => e`\n* `#simp e` is short for `#conv simp => e`\n* `#norm_num e` is short for `#conv norm_num => e`\n* `#push_neg e` is short for `#conv push_neg => e`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«command#conv_=&gt;_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">«command#conv_=&gt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L69-L69","name":"Mathlib.Tactic.Conv.convRefine_","line":69,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.convRefine_","doc":"Use `refine` in `conv` mode. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.convRefine_\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">convRefine_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L52-L66","name":"Mathlib.Tactic.Conv.elabDischargeConv","line":52,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.elabDischargeConv","doc":"Elaborator for the `discharge` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.elabDischargeConv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">elabDischargeConv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L44-L49","name":"Mathlib.Tactic.Conv.dischargeConv","line":44,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.dischargeConv","doc":"* `discharge => tac` is a conv tactic which rewrites target `p` to `True` if `tac` is a tactic\n  which proves the goal `⊢ p`.\n* `discharge` without argument returns `⊢ p` as a subgoal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.dischargeConv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">dischargeConv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L41-L42","name":"Mathlib.Tactic.Conv.«convConvIn__=>_»","line":41,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«convConvIn__=>_»","doc":"`conv in pat => cs` runs the `conv` tactic sequence `cs`\non the first subexpression matching the pattern `pat` in the target.\nThe converted expression becomes the new target subgoal, like `conv => cs`.\n\nThe arguments `in` are the same as those as the in `pattern`.\nIn fact, `conv in pat => cs` is a macro for `conv => pattern pat; cs`.\n\nThe syntax also supports the `occs` clause. Example:\n```lean\nconv in (occs := *) x + y => rw [add_comm]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.«convConvIn__=&gt;_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">«convConvIn__=&gt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L26-L26","name":"Mathlib.Tactic.Conv.convRun_conv_","line":26,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.convRun_conv_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.convRun_conv_\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">convRun_conv_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L21-L21","name":"Mathlib.Tactic.Conv.convRHS","line":21,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.convRHS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.convRHS\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">convRHS</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Conv.lean#L16-L16","name":"Mathlib.Tactic.Conv.convLHS","line":16,"kind":"def","docLink":"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.convLHS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Conv.html#Mathlib.Tactic.Conv.convLHS\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">convLHS</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}