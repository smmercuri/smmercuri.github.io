{"name":"Mathlib.Tactic.FunProp.Mor","instances":[{"typeNames":["Mathlib.Meta.FunProp.Mor.Arg"],"name":"Mathlib.Meta.FunProp.Mor.instInhabitedArg","className":"Inhabited"}],"imports":["Init","Lean","Mathlib.Data.FunLike.Basic","Mathlib.Tactic.FunProp.ToBatteries"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L148-L152","name":"Mathlib.Meta.FunProp.Mor.mkAppN","line":148,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.mkAppN","doc":"`mkAppN f #[a₀, ..., aₙ]` ==> `f a₀ a₁ .. aₙ` where `f` can be bundled morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.mkAppN\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">mkAppN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L145-L145","name":"Mathlib.Meta.FunProp.Mor.getAppArgs","line":145,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.getAppArgs","doc":"Given `f a₁ a₂ ... aₙ`, returns `#[a₁, ..., aₙ]` where `f` can be bundled morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.getAppArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">getAppArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L132-L142","name":"Mathlib.Meta.FunProp.Mor.getAppFn","line":132,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.getAppFn","doc":"If the given expression is a sequence of morphism applications `f a₁ .. aₙ`, return `f`.\nOtherwise return the input expression.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.getAppFn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">getAppFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L116-L125","name":"Mathlib.Meta.FunProp.Mor.withApp.go","line":116,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.withApp.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.withApp.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">withApp</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L112-L125","name":"Mathlib.Meta.FunProp.Mor.withApp","line":112,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.withApp","doc":"Given `e = f a₁ a₂ ... aₙ`, returns `k f #[a₁, ..., aₙ]` where `f` can be bundled morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.withApp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">withApp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L105-L108","name":"Mathlib.Meta.FunProp.Mor.app","line":105,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.app","doc":"Morphism application "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.app\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L102-L102","name":"Mathlib.Meta.FunProp.Mor.instInhabitedArg","line":102,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.instInhabitedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.instInhabitedArg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">instInhabitedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L101-L101","name":"Mathlib.Meta.FunProp.Mor.Arg.coe","line":101,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.coe","doc":"coercion `F → α → β` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.coe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">Arg</span>.<span class=\"name\">coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L99-L99","name":"Mathlib.Meta.FunProp.Mor.Arg.expr","line":99,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.expr","doc":"argument of type `α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.expr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">Arg</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L97-L97","name":"Mathlib.Meta.FunProp.Mor.Arg.mk","line":97,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">Arg</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(coe : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L97-L102","name":"Mathlib.Meta.FunProp.Mor.Arg","line":97,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg","doc":"Argument of morphism application that stores corresponding coercion if necessary "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">Arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L92-L93","name":"Mathlib.Meta.FunProp.Mor.whnf","line":92,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.whnf","doc":"Weak normal head form of an expression involving morphism applications.\n\nFor example calling this on `coe (f a) b` will put `f` in weak normal head form instead of `coe`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.whnf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">whnf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">zetaDelta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L67-L85","name":"Mathlib.Meta.FunProp.Mor.whnfPred","line":67,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.whnfPred","doc":"Weak normal head form of an expression involving morphism applications. Additionally, `pred`\ncan specify which when to unfold definitions.\n\nFor example calling this on `coe (f a) b` will put `f` in weak normal head form instead of `coe`.\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.whnfPred\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">whnfPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">zetaDelta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L53-L59","name":"Mathlib.Meta.FunProp.Mor.isMorApp?","line":53,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isMorApp?","doc":"Is `e` morphism application? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isMorApp?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">isMorApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">Mathlib.Meta.FunProp.Mor.App</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L50-L50","name":"Mathlib.Meta.FunProp.Mor.App.arg","line":50,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.arg","doc":"morphism argument "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.arg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">Mathlib.Meta.FunProp.Mor.App</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L48-L48","name":"Mathlib.Meta.FunProp.Mor.App.fn","line":48,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.fn","doc":"bundled morphism "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.fn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span>.<span class=\"name\">fn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">Mathlib.Meta.FunProp.Mor.App</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L46-L46","name":"Mathlib.Meta.FunProp.Mor.App.coe","line":46,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.coe","doc":"morphism coercion "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.coe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span>.<span class=\"name\">coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">Mathlib.Meta.FunProp.Mor.App</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L44-L44","name":"Mathlib.Meta.FunProp.Mor.App.mk","line":44,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(coe : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\">Mathlib.Meta.FunProp.Mor.App</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L44-L50","name":"Mathlib.Meta.FunProp.Mor.App","line":44,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App","doc":"Morphism application "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.App\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">App</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L38-L41","name":"Mathlib.Meta.FunProp.Mor.isCoeFun","line":38,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isCoeFun","doc":"Is `e` a coerction from some function space to functiosn? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isCoeFun\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">isCoeFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/FunProp/Mor.lean#L33-L35","name":"Mathlib.Meta.FunProp.Mor.isCoeFunName","line":33,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isCoeFunName","doc":"Is `name` a coerction from some function space to functiosn? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.isCoeFunName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Mor</span>.<span class=\"name\">isCoeFunName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}