{"name":"Mathlib.Tactic.FunProp.Types","instances":[{"typeNames":["Mathlib.Meta.FunProp.Origin"],"name":"Mathlib.Meta.FunProp.instInhabitedOrigin","className":"Inhabited"},{"typeNames":["Mathlib.Meta.FunProp.Origin"],"name":"Mathlib.Meta.FunProp.instBEqOrigin","className":"BEq"},{"typeNames":["Mathlib.Meta.FunProp.Config"],"name":"Mathlib.Meta.FunProp.instInhabitedConfig","className":"Inhabited"}],"imports":["Init","Std.Data.RBMap.Basic","Mathlib.Tactic.FunProp.FunctionData","Std.Lean.HashSet"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L152-L154","name":"Mathlib.Meta.FunProp.logError","line":152,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.logError","doc":"Log error message that will displayed to the user at the end. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.logError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">logError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L144-L149","name":"Mathlib.Meta.FunProp.increaseSteps","line":144,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.increaseSteps","doc":"Increase heartbeat, throws error when `maxSteps` was reached "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.increaseSteps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">increaseSteps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L139-L141","name":"Mathlib.Meta.FunProp.unfoldNamePred","line":139,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.unfoldNamePred","doc":"Get predicate on names indicating if theys shoulds be unfolded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.unfoldNamePred\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">unfoldNamePred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L135-L136","name":"Mathlib.Meta.FunProp.defaultUnfoldPred","line":135,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.defaultUnfoldPred","doc":"Default names to unfold "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.defaultUnfoldPred\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">defaultUnfoldPred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L128-L132","name":"Mathlib.Meta.FunProp.withTheorem","line":128,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.withTheorem","doc":"Puts the theorem to the stack of used theorems. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.withTheorem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">withTheorem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(thmOrigin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(go : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L122-L125","name":"Mathlib.Meta.FunProp.previouslyUsedThm","line":122,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.previouslyUsedThm","doc":"Check if previously used theorem was `thmOrigin`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.previouslyUsedThm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">previouslyUsedThm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmOrigin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L119-L119","name":"Mathlib.Meta.FunProp.Result.proof","line":119,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result.proof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result.proof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Result</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L117-L117","name":"Mathlib.Meta.FunProp.Result.mk","line":117,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L117-L119","name":"Mathlib.Meta.FunProp.Result","line":117,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result","doc":"Result of `funProp`, it is a proof of function property `P f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L113-L113","name":"Mathlib.Meta.FunProp.FunPropM","line":113,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunPropM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L109-L110","name":"Mathlib.Meta.FunProp.Config.increaseDepth","line":109,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.increaseDepth","doc":"Increase depth "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.increaseDepth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">increaseDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L105-L106","name":"Mathlib.Meta.FunProp.Config.addThm","line":105,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.addThm","doc":"Log used theorem "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.addThm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">addThm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L102-L102","name":"Mathlib.Meta.FunProp.State.msgLog","line":102,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.msgLog","doc":"Log progress and failures messages that should be displayed to the user at the end. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.msgLog\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">msgLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">Mathlib.Meta.FunProp.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L100-L100","name":"Mathlib.Meta.FunProp.State.numSteps","line":100,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.numSteps","doc":"Count the number of steps and stop when maxSteps is reached. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.numSteps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">numSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">Mathlib.Meta.FunProp.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L98-L98","name":"Mathlib.Meta.FunProp.State.cache","line":98,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.cache","doc":"Simp's cache is used as the `funProp` tactic is designed to be used inside of simp and utilize\nits cache "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.cache\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">Mathlib.Meta.FunProp.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Cache\">Lean.Meta.Simp.Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L95-L95","name":"Mathlib.Meta.FunProp.State.mk","line":95,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cache : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Cache\">Lean.Meta.Simp.Cache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numSteps : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msgLog : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\">Mathlib.Meta.FunProp.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L95-L102","name":"Mathlib.Meta.FunProp.State","line":95,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State","doc":"`fun_prop` state "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.State\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L92-L92","name":"Mathlib.Meta.FunProp.instInhabitedConfig","line":92,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L91-L91","name":"Mathlib.Meta.FunProp.Config.maxSteps","line":91,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.maxSteps","doc":"Maximum number of steps `fun_prop` can take. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.maxSteps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L89-L89","name":"Mathlib.Meta.FunProp.Config.thmStack","line":89,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.thmStack","doc":"Stack of used theorem, used to prevent trivial loops. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.thmStack\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">thmStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L87-L87","name":"Mathlib.Meta.FunProp.Config.depth","line":87,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.depth","doc":"current depth "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.depth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">depth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L85-L85","name":"Mathlib.Meta.FunProp.Config.maxDepth","line":85,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.maxDepth","doc":"Maximal number of transitions between function properties\ne.g. inferring differentiability from linearity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.maxDepth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L82-L82","name":"Mathlib.Meta.FunProp.Config.disch","line":82,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.disch","doc":"Custom discharger to satisfy theorem hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.disch\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">disch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L79-L79","name":"Mathlib.Meta.FunProp.Config.constToUnfold","line":79,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.constToUnfold","doc":"Name to unfold "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.constToUnfold\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">constToUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L77-L77","name":"Mathlib.Meta.FunProp.Config.mk","line":77,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constToUnfold : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(disch : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxDepth : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(depth : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmStack : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxSteps : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\">Mathlib.Meta.FunProp.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L77-L92","name":"Mathlib.Meta.FunProp.Config","line":77,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config","doc":"`fun_prop` configuration "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L73-L74","name":"Mathlib.Meta.FunProp.defaultNamesToUnfold","line":73,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.defaultNamesToUnfold","doc":"Default names to be considered reducible by `fun_prop` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.defaultNamesToUnfold\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">defaultNamesToUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L66-L70","name":"Mathlib.Meta.FunProp.FunctionData.getFnOrigin","line":66,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunctionData.getFnOrigin","doc":"Get origin of the head function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunctionData.getFnOrigin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">getFnOrigin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L60-L63","name":"Mathlib.Meta.FunProp.ppOrigin'","line":60,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.ppOrigin'","doc":"Pretty print `FunProp.Origin`. Returns string unlike `ppOrigin`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.ppOrigin'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">ppOrigin'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(origin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L55-L57","name":"Mathlib.Meta.FunProp.ppOrigin","line":55,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.ppOrigin","doc":"Pretty print `FunProp.Origin`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.ppOrigin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">ppOrigin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L49-L52","name":"Mathlib.Meta.FunProp.Origin.getValue","line":49,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.getValue","doc":"Get the expression specified by `origin`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.getValue\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span>.<span class=\"name\">getValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(origin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L43-L46","name":"Mathlib.Meta.FunProp.Origin.name","line":43,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.name","doc":"Name of the origin. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.name\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(origin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L40-L40","name":"Mathlib.Meta.FunProp.instBEqOrigin","line":40,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instBEqOrigin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instBEqOrigin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instBEqOrigin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L40-L40","name":"Mathlib.Meta.FunProp.instInhabitedOrigin","line":40,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedOrigin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.instInhabitedOrigin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instInhabitedOrigin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L38-L39","name":"Mathlib.Meta.FunProp.Origin.fvar","line":38,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.fvar","doc":"It is a free variable in the local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.fvar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L36-L37","name":"Mathlib.Meta.FunProp.Origin.decl","line":36,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.decl","doc":"It is a constant defined in the environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin.decl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Types.lean#L35-L40","name":"Mathlib.Meta.FunProp.Origin","line":35,"kind":"inductive","docLink":"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin","doc":"Indicated origin of a function or a statement. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">Origin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}