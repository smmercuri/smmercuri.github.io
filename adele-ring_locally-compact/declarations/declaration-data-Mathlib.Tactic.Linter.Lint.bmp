{"name":"Mathlib.Tactic.Linter.Lint","instances":[],"imports":["Init","Lean.Linter.Util","Batteries.Data.Array.Basic","Batteries.Data.String.Matcher","Batteries.Tactic.Lint"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L235-L261","name":"Mathlib.Linter.LongLine.longLineLinter","line":235,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.LongLine.longLineLinter","doc":"The \"longLine\" linter emits a warning on lines longer than 100 characters.\nWe allow lines containing URLs to be longer, though. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.LongLine.longLineLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">LongLine</span>.<span class=\"name\">longLineLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L232-L232","name":"Mathlib.Linter.LongLine.getLinterHash","line":232,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.LongLine.getLinterHash","doc":"Gets the value of the `linter.longLine` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.LongLine.getLinterHash\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">LongLine</span>.<span class=\"name\">getLinterHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L222-L227","name":"Mathlib.Linter.linter.longLine","line":222,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.longLine","doc":"The \"longLine\" linter emits a warning on lines longer than 100 characters.\nWe allow lines containing URLs to be longer, though. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.longLine\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">longLine</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L210-L216","name":"Mathlib.Linter.CDotLinter.cdotLinter","line":210,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.CDotLinter.cdotLinter","doc":"The `cdot` linter flags uses of the \"cdot\" `·` that are achieved by typing a character\ndifferent from `·`.\nFor instance, a \"plain\" dot `.` is allowed syntax, but is flagged by the linter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.CDotLinter.cdotLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">CDotLinter</span>.<span class=\"name\">cdotLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L207-L207","name":"Mathlib.Linter.CDotLinter.getLinterHash","line":207,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.CDotLinter.getLinterHash","doc":"Gets the value of the `linter.generic` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.CDotLinter.getLinterHash\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">CDotLinter</span>.<span class=\"name\">getLinterHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L201-L202","name":"Mathlib.Linter.unwanted_cdot","line":201,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.unwanted_cdot","doc":"`unwanted_cdot stx` returns an array of syntax atoms within `stx`\ncorresponding to `cdot`s that are not written with the character `·`.\nThis is precisely what the `cdot` linter flags.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.unwanted_cdot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">unwanted_cdot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L189-L195","name":"Mathlib.Linter.findCDot","line":189,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.findCDot","doc":"`findCDot stx` extracts from `stx` the syntax nodes of `kind` `Lean.Parser.Term.cdot` or `cdotTk`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.findCDot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">findCDot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L181-L184","name":"Mathlib.Linter.isCDot?","line":181,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.isCDot?","doc":"`isCDot? stx` checks whether `stx` is a `Syntax` node corresponding to a `cdot` typed with\nthe character `·`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.isCDot?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">isCDot?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L170-L177","name":"Mathlib.Linter.linter.cdot","line":170,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.cdot","doc":"The `cdot` linter flags uses of the \"cdot\" `·` that are achieved by typing a character\ndifferent from `·`.\nFor instance, a \"plain\" dot `.` is allowed syntax, but is flagged by the linter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.cdot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">cdot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L137-L156","name":"Mathlib.Linter.MissingEnd.missingEndLinter","line":137,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.MissingEnd.missingEndLinter","doc":"The \"missing end\" linter emits a warning on non-closed `section`s and `namespace`s.\nIt allows the \"outermost\" `noncomputable section` to be left open (whether or not it is named).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.MissingEnd.missingEndLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">MissingEnd</span>.<span class=\"name\">missingEndLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L134-L134","name":"Mathlib.Linter.MissingEnd.getLinterHash","line":134,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.MissingEnd.getLinterHash","doc":"Gets the value of the `linter.missingEnd` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.MissingEnd.getLinterHash\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">MissingEnd</span>.<span class=\"name\">getLinterHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L123-L129","name":"Mathlib.Linter.linter.missingEnd","line":123,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.missingEnd","doc":"The \"missing end\" linter emits a warning on non-closed `section`s and `namespace`s.\nIt allows the \"outermost\" `noncomputable section` to be left open (whether or not it is named).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.missingEnd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">missingEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L97-L108","name":"Mathlib.Linter.DupNamespaceLinter.dupNamespace","line":97,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.DupNamespaceLinter.dupNamespace","doc":"The `dupNamespace` linter is set on by default.  Lean emits a warning on any declaration that\ncontains the same namespace at least twice consecutively.\n\nFor instance, `Nat.Nat.foo` and `One.two.two` trigger a warning, while `Nat.One.Nat` does not.\n\n*Note.*\nThis linter will not detect duplication in namespaces of autogenerated declarations\n(other than the one whose `declId` is present in the source declaration).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.DupNamespaceLinter.dupNamespace\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DupNamespaceLinter</span>.<span class=\"name\">dupNamespace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L89-L94","name":"Mathlib.Linter.DupNamespaceLinter.getIds","line":89,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.DupNamespaceLinter.getIds","doc":"`getIds stx` extracts the `declId` nodes from the `Syntax` `stx`.\nIf `stx` is an `alias` or an `export`, then it extracts an `ident`, instead of a `declId`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.DupNamespaceLinter.getIds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DupNamespaceLinter</span>.<span class=\"name\">getIds</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L84-L84","name":"Mathlib.Linter.DupNamespaceLinter.getLinterDupNamespace","line":84,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.DupNamespaceLinter.getLinterDupNamespace","doc":"Gets the value of the `linter.dupNamespace` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.DupNamespaceLinter.getLinterDupNamespace\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DupNamespaceLinter</span>.<span class=\"name\">getLinterDupNamespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L64-L77","name":"Mathlib.Linter.linter.dupNamespace","line":64,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.dupNamespace","doc":"The `dupNamespace` linter is set on by default.  Lean emits a warning on any declaration that\ncontains the same namespace at least twice consecutively.\n\nFor instance, `Nat.Nat.foo` and `One.two.two` trigger a warning, while `Nat.One.Nat` does not.\n\n*Note.*\nThis linter will not detect duplication in namespaces of autogenerated declarations\n(other than the one whose `declId` is present in the source declaration).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.dupNamespace\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">dupNamespace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L42-L49","name":"Std.Tactic.Lint.deprecatedNoSince","line":42,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Std.Tactic.Lint.deprecatedNoSince","doc":"Linter that check that all `deprecated` tags come with `since` dates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Std.Tactic.Lint.deprecatedNoSince\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">deprecatedNoSince</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/Lint.lean#L25-L39","name":"Std.Tactic.Lint.structureInType","line":25,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Std.Tactic.Lint.structureInType","doc":"Linter that checks whether a structure should be in Prop.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Std.Tactic.Lint.structureInType\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">structureInType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a></div></div>"}]}