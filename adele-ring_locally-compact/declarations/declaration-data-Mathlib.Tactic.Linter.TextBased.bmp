{"name":"Mathlib.Tactic.Linter.TextBased","instances":[{"typeNames":["BroadImports"],"name":"instBEqBroadImports","className":"BEq"},{"typeNames":["StyleError"],"name":"instBEqStyleError","className":"BEq"},{"typeNames":["ErrorFormat"],"name":"instBEqErrorFormat","className":"BEq"},{"typeNames":["ErrorContext"],"name":"instBEqErrorContext","className":"BEq"}],"imports":["Init","Batteries.Data.String.Matcher","Mathlib.Data.Nat.Notation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L345-L369","name":"lintModules","line":345,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#lintModules","doc":"Lint a collection of modules for style violations.\nPrint formatted errors for all unexpected style violations to standard output.\nReturn the number of files which had new style errors.\n`style` specifies if the error should be formatted for humans to read, github problem matchers\nto consume or for the style exceptions file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#lintModules\"><span class=\"name\">lintModules</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(moduleNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(style : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat\">ErrorFormat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L324-L338","name":"lintFile","line":324,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#lintFile","doc":"Read a file and apply all text-based linters. Return a list of all unexpected errors.\n`sizeLimit` is any pre-existing limit on this file's size.\n`exceptions` are any other style exceptions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#lintFile\"><span class=\"name\">lintFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(path : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sizeLimit : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exceptions : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L317-L319","name":"allLinters","line":317,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#allLinters","doc":"All text-based linters registered in this file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#allLinters\"><span class=\"name\">allLinters</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#TextbasedLinter\">TextbasedLinter</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L302-L312","name":"checkFileLength","line":302,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#checkFileLength","doc":"Error if a collection of lines is too large. \"Too large\" means more than 1500 lines\n**and** longer than an optional previous limit.\nIf the file is too large, return a matching `StyleError`, which includes a new size limit\n(which is somewhat larger than the current size). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#checkFileLength\"><span class=\"name\">checkFileLength</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lines : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(existing_limit : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L293-L296","name":"isImportsOnlyFile","line":293,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#isImportsOnlyFile","doc":"Whether a collection of lines consists *only* of imports, blank lines and single-line comments.\nIn practice, this means it's an imports-only file and exempt from almost all linting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#isImportsOnlyFile\"><span class=\"name\">isImportsOnlyFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lines : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L264-L289","name":"broadImportsLinter","line":264,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#broadImportsLinter","doc":"Lint a collection of input strings if one of them contains an unnecessarily broad import. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#broadImportsLinter\"><span class=\"name\">broadImportsLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#TextbasedLinter\">TextbasedLinter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L253-L261","name":"adaptationNoteLinter","line":253,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#adaptationNoteLinter","doc":"Lint on any occurrences of the string \"Adaptation note:\" or variants thereof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#adaptationNoteLinter\"><span class=\"name\">adaptationNoteLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#TextbasedLinter\">TextbasedLinter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L219-L250","name":"copyrightHeaderLinter","line":219,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#copyrightHeaderLinter","doc":"Lint a collection of input lines if they are missing an appropriate copyright header.\n\nA copyright header should start at the very beginning of the file and contain precisely five lines,\nincluding the copy year and holder, the license and main author(s) of the file (in this order).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#copyrightHeaderLinter\"><span class=\"name\">copyrightHeaderLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#TextbasedLinter\">TextbasedLinter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L207-L212","name":"isCorrectAuthorsLine","line":207,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#isCorrectAuthorsLine","doc":"Return if `line` looks like a correct authors line in a copyright header. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#isCorrectAuthorsLine\"><span class=\"name\">isCorrectAuthorsLine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(line : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L201-L201","name":"TextbasedLinter","line":201,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#TextbasedLinter","doc":"Core logic of a text based linter: given a collection of lines,\nreturn an array of all style errors with line numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#TextbasedLinter\"><span class=\"name\">TextbasedLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L195-L197","name":"formatErrors","line":195,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#formatErrors","doc":"Print information about all errors encountered to standard output.\n`style` specifies if the error should be formatted for humans to read, github problem matchers\nto consume, or for the style exceptions file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#formatErrors\"><span class=\"name\">formatErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(errors : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(style : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat\">ErrorFormat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L188-L190","name":"parseStyleExceptions","line":188,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#parseStyleExceptions","doc":"Parse all style exceptions for a line of input.\nReturn an array of all exceptions which could be parsed: invalid input is ignored. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#parseStyleExceptions\"><span class=\"name\">parseStyleExceptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lines : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L146-L184","name":"parse?_errorContext","line":146,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#parse?_errorContext","doc":"Try parsing an `ErrorContext` from a string: return `some` if successful, `none` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#parse?_errorContext\"><span class=\"name\">parse?_errorContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(line : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L128-L143","name":"outputMessage","line":128,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#outputMessage","doc":"Output the formatted error message, containing its context.\n`style` specifies if the error should be formatted for humans to read, github problem matchers\nto consume, or for the style exceptions file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#outputMessage\"><span class=\"name\">outputMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(errctx : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(style : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat\">ErrorFormat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L118-L123","name":"instBEqErrorContext","line":118,"kind":"instance","docLink":"./Mathlib/Tactic/Linter/TextBased.html#instBEqErrorContext","doc":"Careful: we do not want to compare `ErrorContexts` exactly; we ignore some details. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#instBEqErrorContext\"><span class=\"name\">instBEqErrorContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L110-L115","name":"StyleError.normalise","line":110,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#StyleError.normalise","doc":"The parts of a `StyleError` which are considered when matching against the existing\nstyle exceptions: for example, we ignore the particular line length of a \"line too long\" error. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError.normalise\"><span class=\"name\">StyleError</span>.<span class=\"name\">normalise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(err : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L106-L106","name":"ErrorContext.path","line":106,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext.path","doc":"The path to the file which was linted "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext.path\"><span class=\"name\">ErrorContext</span>.<span class=\"name\">path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L104-L104","name":"ErrorContext.lineNumber","line":104,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext.lineNumber","doc":"The line number of the error (1-based) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext.lineNumber\"><span class=\"name\">ErrorContext</span>.<span class=\"name\">lineNumber</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L102-L102","name":"ErrorContext.error","line":102,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext.error","doc":"The underlying `StyleError`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext.error\"><span class=\"name\">ErrorContext</span>.<span class=\"name\">error</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L100-L100","name":"ErrorContext.mk","line":100,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext.mk\"><span class=\"name\">ErrorContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(error : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lineNumber : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(path : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\">ErrorContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L100-L106","name":"ErrorContext","line":100,"kind":"structure","docLink":"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext","doc":"Context for a style error: the actual error, the line number in the file we're reading\nand the path to the file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorContext\"><span class=\"name\">ErrorContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L91-L96","name":"StyleError.errorCode","line":91,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#StyleError.errorCode","doc":"The error code for a given style error. Keep this in sync with `parse?_errorContext` below! "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError.errorCode\"><span class=\"name\">StyleError</span>.<span class=\"name\">errorCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(err : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L67-L86","name":"StyleError.errorMessage","line":67,"kind":"def","docLink":"./Mathlib/Tactic/Linter/TextBased.html#StyleError.errorMessage","doc":"Create the underlying error message for a given `StyleError`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError.errorMessage\"><span class=\"name\">StyleError</span>.<span class=\"name\">errorMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(err : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(style : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat\">ErrorFormat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L64-L64","name":"instBEqErrorFormat","line":64,"kind":"instance","docLink":"./Mathlib/Tactic/Linter/TextBased.html#instBEqErrorFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#instBEqErrorFormat\"><span class=\"name\">instBEqErrorFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat\">ErrorFormat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L61-L63","name":"ErrorFormat.github","line":61,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat.github","doc":"Produce output suitable for Github error annotations: in particular,\nduplicate the file path, line number and error code "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat.github\"><span class=\"name\">ErrorFormat</span>.<span class=\"name\">github</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat\">ErrorFormat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L58-L60","name":"ErrorFormat.exceptionsFile","line":58,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat.exceptionsFile","doc":"Produce an entry in the style-exceptions file: mention the error code, slightly uglier\nthan humand-readable output "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat.exceptionsFile\"><span class=\"name\">ErrorFormat</span>.<span class=\"name\">exceptionsFile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat\">ErrorFormat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L56-L57","name":"ErrorFormat.humanReadable","line":56,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat.humanReadable","doc":"Produce style error output aimed at humans: no error code, clickable file name "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat.humanReadable\"><span class=\"name\">ErrorFormat</span>.<span class=\"name\">humanReadable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat\">ErrorFormat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L55-L64","name":"ErrorFormat","line":55,"kind":"inductive","docLink":"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat","doc":"How to format style errors "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#ErrorFormat\"><span class=\"name\">ErrorFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L52-L52","name":"instBEqStyleError","line":52,"kind":"instance","docLink":"./Mathlib/Tactic/Linter/TextBased.html#instBEqStyleError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#instBEqStyleError\"><span class=\"name\">instBEqStyleError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L48-L51","name":"StyleError.fileTooLong","line":48,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#StyleError.fileTooLong","doc":"The current file was too large: this error contains the current number of lines\nas well as a size limit (slightly larger). On future runs, this linter will allow this file\nto grow up to this limit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError.fileTooLong\"><span class=\"name\">StyleError</span>.<span class=\"name\">fileTooLong</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(number_lines : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(new_size_limit : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L45-L47","name":"StyleError.broadImport","line":45,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#StyleError.broadImport","doc":"Lint against \"too broad\" imports, such as `Mathlib.Tactic` or any module in `Lake`\n(unless carefully measured) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError.broadImport\"><span class=\"name\">StyleError</span>.<span class=\"name\">broadImport</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(module : <a href=\"./Mathlib/Tactic/Linter/TextBased.html#BroadImports\">BroadImports</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L42-L44","name":"StyleError.adaptationNote","line":42,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#StyleError.adaptationNote","doc":"The bare string \"Adaptation note\" (or variants thereof): instead, the\n#adaptation_note command should be used. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError.adaptationNote\"><span class=\"name\">StyleError</span>.<span class=\"name\">adaptationNote</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L40-L41","name":"StyleError.authors","line":40,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#StyleError.authors","doc":"Malformed authors line in the copyright header "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError.authors\"><span class=\"name\">StyleError</span>.<span class=\"name\">authors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L37-L39","name":"StyleError.copyright","line":37,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#StyleError.copyright","doc":"Missing or malformed copyright header.\nUnlike in the python script, we may provide some context on the actual error. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError.copyright\"><span class=\"name\">StyleError</span>.<span class=\"name\">copyright</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(context : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\">StyleError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L36-L52","name":"StyleError","line":36,"kind":"inductive","docLink":"./Mathlib/Tactic/Linter/TextBased.html#StyleError","doc":"Possible errors that text-based linters can report. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#StyleError\"><span class=\"name\">StyleError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L32-L32","name":"instBEqBroadImports","line":32,"kind":"instance","docLink":"./Mathlib/Tactic/Linter/TextBased.html#instBEqBroadImports","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#instBEqBroadImports\"><span class=\"name\">instBEqBroadImports</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/Linter/TextBased.html#BroadImports\">BroadImports</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L29-L31","name":"BroadImports.Lake","line":29,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#BroadImports.Lake","doc":"Importing any module in `Lake`, unless carefully measured\nThis has caused unexpected regressions in the past. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#BroadImports.Lake\"><span class=\"name\">BroadImports</span>.<span class=\"name\">Lake</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#BroadImports\">BroadImports</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L27-L28","name":"BroadImports.TacticFolder","line":27,"kind":"ctor","docLink":"./Mathlib/Tactic/Linter/TextBased.html#BroadImports.TacticFolder","doc":"Importing the entire \"Mathlib.Tactic\" folder "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#BroadImports.TacticFolder\"><span class=\"name\">BroadImports</span>.<span class=\"name\">TacticFolder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/TextBased.html#BroadImports\">BroadImports</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/TextBased.lean#L26-L32","name":"BroadImports","line":26,"kind":"inductive","docLink":"./Mathlib/Tactic/Linter/TextBased.html#BroadImports","doc":"Different kinds of \"broad imports\" that are linted against. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/TextBased.html#BroadImports\"><span class=\"name\">BroadImports</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}