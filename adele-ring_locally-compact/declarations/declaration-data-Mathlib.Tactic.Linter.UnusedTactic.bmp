{"name":"Mathlib.Tactic.Linter.UnusedTactic","instances":[],"imports":["Init","Lean.Elab.Command","Lean.Linter.Util","Batteries.Data.List.Basic","Batteries.Tactic.Unreachable"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L204-L228","name":"Mathlib.Linter.UnusedTactic.unusedTacticLinter","line":204,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.unusedTacticLinter","doc":"The main entry point to the unused tactic linter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.unusedTacticLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">unusedTacticLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L201-L201","name":"Mathlib.Linter.UnusedTactic.getLinterHash","line":201,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.getLinterHash","doc":"Gets the value of the `linter.unusedTactic` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.getLinterHash\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">getLinterHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L175-L196","name":"Mathlib.Linter.UnusedTactic.eraseUsedTactics","line":175,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.eraseUsedTactics","doc":"Search for tactic executions in the info tree and remove the syntax of the tactics that\nchanged something. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.eraseUsedTactics\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">eraseUsedTactics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.M\">Mathlib.Linter.UnusedTactic.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L170-L171","name":"Mathlib.Linter.UnusedTactic.eraseUsedTacticsList","line":170,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.eraseUsedTacticsList","doc":"Search for tactic executions in the info tree and remove the syntax of the tactics that\nchanged something. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.eraseUsedTacticsList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">eraseUsedTacticsList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(trees : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.M\">Mathlib.Linter.UnusedTactic.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L162-L165","name":"Mathlib.Linter.UnusedTactic.getNames","line":162,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.getNames","doc":"`getNames mctx` extracts the names of all the local declarations implied by the\n`MetavarContext` `mctx`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.getNames\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">getNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L152-L158","name":"Mathlib.Linter.UnusedTactic.getTactics","line":152,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.getTactics","doc":"Accumulates the set of tactic syntaxes that should be evaluated at least once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.getTactics\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">getTactics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ignoreTacticKinds : <a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isTacKind : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.M\">Mathlib.Linter.UnusedTactic.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L147-L148","name":"Mathlib.Linter.UnusedTactic.addIgnoreTacticKind","line":147,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.addIgnoreTacticKind","doc":"Adds a new syntax kind whose children will be ignored by the `unusedTactic` linter.\nThis should be called from an `initialize` block.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.addIgnoreTacticKind\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">addIgnoreTacticKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L136-L141","name":"Mathlib.Linter.UnusedTactic.isIgnoreTacticKind","line":136,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.isIgnoreTacticKind","doc":"Is this a syntax kind that contains intentionally unused tactic subterms? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.isIgnoreTacticKind\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">isIgnoreTacticKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ignoreTacticKinds : <a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L112-L133","name":"Mathlib.Linter.UnusedTactic.ignoreTacticKindsRef","line":112,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.ignoreTacticKindsRef","doc":"A list of blacklisted syntax kinds, which are expected to have subterms that contain\nunevaluated tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.ignoreTacticKindsRef\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">ignoreTacticKindsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L97-L110","name":"Mathlib.Linter.UnusedTactic.«command#allow_unused_tactic_»","line":97,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.«command#allow_unused_tactic_»","doc":"`#allow_unused_tactic` takes an input a space-separated list of identifiers.\nThese identifiers are then allowed by the unused tactic linter:\neven if these tactics do not modify goals, there will be no warning emitted.\nNote: for this to work, these identifiers should be the `SyntaxNodeKind` of each tactic.\n\nFor instance, you can allow the `done` and `skip` tactics using\n```lean\n#allow_unused_tactic Lean.Parser.Tactic.done Lean.Parser.Tactic.skip\n```\nNotice that you should use the `SyntaxNodeKind` of the tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.«command#allow_unused_tactic_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">«command#allow_unused_tactic_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L69-L95","name":"Mathlib.Linter.UnusedTactic.allowedRef","line":69,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.allowedRef","doc":"`Parser`s allowed to not change the tactic state.\nThis can be increased dynamically, using `#allow_unused_tactic`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.allowedRef\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">allowedRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L67-L67","name":"Mathlib.Linter.UnusedTactic.M","line":67,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.M","doc":"The monad for collecting the ranges of the syntaxes that do not modify any goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.UnusedTactic.M\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Linter/UnusedTactic.lean#L58-L62","name":"Mathlib.Linter.linter.unusedTactic","line":58,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.linter.unusedTactic","doc":"The unused tactic linter makes sure that every tactic call actually changes *something*. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTactic.html#Mathlib.Linter.linter.unusedTactic\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">unusedTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}