{"name":"Mathlib.Tactic.NthRewrite","instances":[],"imports":["Init","Lean.Elab.Tactic.Rewrite"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/NthRewrite.lean#L140-L147","name":"Mathlib.Tactic.nthRwSeq","line":140,"kind":"def","docLink":"./Mathlib/Tactic/NthRewrite.html#Mathlib.Tactic.nthRwSeq","doc":"`nth_rw` is a variant of `rw` that only changes the `n`ᵗʰ _occurrence_ of the expression to be\nrewritten. Like `rw`, and unlike `nth_rewrite`, it will try to close the goal by trying `rfl`\nafterwards. `nth_rw n [eq₁, eq₂,..., eqₘ]` will rewrite the `n`ᵗʰ _occurrence_ of each of the\n`m` equalities `eqᵢ`in that order. Occurrences are counted beginning with `1` in\norder of precedence. For example,\n```lean\nexample (h : a = 1) : a + a + a + a + a = 5 := by\n  nth_rw 2 [h]\n/-\na: ℕ\nh: a = 1\n⊢ a + 1 + a + a + a = 5\n-/\n```\nNotice that the second occurrence of `a` from the left has been rewritten by `nth_rewrite`.\n\nTo understand the importance of order of precedence, consider the example below\n```lean\nexample (a b c : Nat) : (a + b) + c = (b + a) + c := by\n  nth_rewrite 2 [Nat.add_comm] -- ⊢ (b + a) + c = (b + a) + c\n```\nHere, although the occurrence parameter is `2`, `(a + b)` is rewritten to `(b + a)`. This happens\nbecause in order of precedence, the first occurrence of `_ + _` is the one that adds `a + b` to `c`.\nThe occurrence in `a + b` counts as the second occurrence.\n\nIf a term `t` is introduced by rewriting with `eqᵢ`, then this instance of `t` will be counted as an\n_occurrence_ of `t` for all subsequent rewrites of `t` with `eqⱼ` for `j > i`. This behaviour is\nillustrated by the example below\n```lean\nexample (h : a = a + b) : a + a + a + a + a = 0 := by\n  nth_rw 3 [h, h]\n/-\na b: ℕ\nh: a = a + b\n⊢ a + a + (a + b + b) + a + a = 0\n-/\n```\nHere, the first `nth_rw` with `h` introduces an additional occurrence of `a` in the goal. That is,\nthe goal state after the first rewrite looks like below\n```lean\n/-\na b: ℕ\nh: a = a + b\n⊢ a + a + (a + b) + a + a = 0\n-/\n```\nThis new instance of `a` also turns out to be the third _occurrence_ of `a`.  Therefore,\nthe next `nth_rw` with `h` rewrites this `a`.\n\nFurther, `nth_rw` will close the remaining goal with `rfl` if possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NthRewrite.html#Mathlib.Tactic.nthRwSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">nthRwSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/NthRewrite.lean#L72-L86","name":"Mathlib.Tactic.evalNthRewriteSeq","line":72,"kind":"def","docLink":"./Mathlib/Tactic/NthRewrite.html#Mathlib.Tactic.evalNthRewriteSeq","doc":"`nth_rewrite` is a variant of `rewrite` that only changes the `n`ᵗʰ _occurrence_ of the\nexpression to be rewritten. `nth_rewrite n [eq₁, eq₂,..., eqₘ]` will rewrite the `n`ᵗʰ _occurrence_\nof each of the `m` equalities `eqᵢ`in that order. Occurrences are counted beginning with `1` in\norder of precedence.\n\nFor example,\n```lean\nexample (h : a = 1) : a + a + a + a + a = 5 := by\n  nth_rewrite 2 [h]\n/-\na: ℕ\nh: a = 1\n⊢ a + 1 + a + a + a = 5\n-/\n```\nNotice that the second occurrence of `a` from the left has been rewritten by `nth_rewrite`.\n\nTo understand the importance of order of precedence, consider the example below\n```lean\nexample (a b c : Nat) : (a + b) + c = (b + a) + c := by\n  nth_rewrite 2 [Nat.add_comm] -- ⊢ (b + a) + c = (b + a) + c\n```\nHere, although the occurrence parameter is `2`, `(a + b)` is rewritten to `(b + a)`. This happens\nbecause in order of precedence, the first occurrence of `_ + _` is the one that adds `a + b` to `c`.\nThe occurrence in `a + b` counts as the second occurrence.\n\nIf a term `t` is introduced by rewriting with `eqᵢ`, then this instance of `t` will be counted as an\n_occurrence_ of `t` for all subsequent rewrites of `t` with `eqⱼ` for `j > i`. This behaviour is\nillustrated by the example below\n```lean\nexample (h : a = a + b) : a + a + a + a + a = 0 := by\n  nth_rewrite 3 [h, h]\n/-\na b: ℕ\nh: a = a + b\n⊢ a + a + (a + b + b) + a + a = 0\n-/\n```\nHere, the first `nth_rewrite` with `h` introduces an additional occurrence of `a` in the goal.\nThat is, the goal state after the first rewrite looks like below\n```lean\n/-\na b: ℕ\nh: a = a + b\n⊢ a + a + (a + b) + a + a = 0\n-/\n```\nThis new instance of `a` also turns out to be the third _occurrence_ of `a`.  Therefore,\nthe next `nth_rewrite` with `h` rewrites this `a`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NthRewrite.html#Mathlib.Tactic.evalNthRewriteSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalNthRewriteSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/NthRewrite.lean#L20-L70","name":"Mathlib.Tactic.nthRewriteSeq","line":20,"kind":"def","docLink":"./Mathlib/Tactic/NthRewrite.html#Mathlib.Tactic.nthRewriteSeq","doc":"`nth_rewrite` is a variant of `rewrite` that only changes the `n`ᵗʰ _occurrence_ of the\nexpression to be rewritten. `nth_rewrite n [eq₁, eq₂,..., eqₘ]` will rewrite the `n`ᵗʰ _occurrence_\nof each of the `m` equalities `eqᵢ`in that order. Occurrences are counted beginning with `1` in\norder of precedence.\n\nFor example,\n```lean\nexample (h : a = 1) : a + a + a + a + a = 5 := by\n  nth_rewrite 2 [h]\n/-\na: ℕ\nh: a = 1\n⊢ a + 1 + a + a + a = 5\n-/\n```\nNotice that the second occurrence of `a` from the left has been rewritten by `nth_rewrite`.\n\nTo understand the importance of order of precedence, consider the example below\n```lean\nexample (a b c : Nat) : (a + b) + c = (b + a) + c := by\n  nth_rewrite 2 [Nat.add_comm] -- ⊢ (b + a) + c = (b + a) + c\n```\nHere, although the occurrence parameter is `2`, `(a + b)` is rewritten to `(b + a)`. This happens\nbecause in order of precedence, the first occurrence of `_ + _` is the one that adds `a + b` to `c`.\nThe occurrence in `a + b` counts as the second occurrence.\n\nIf a term `t` is introduced by rewriting with `eqᵢ`, then this instance of `t` will be counted as an\n_occurrence_ of `t` for all subsequent rewrites of `t` with `eqⱼ` for `j > i`. This behaviour is\nillustrated by the example below\n```lean\nexample (h : a = a + b) : a + a + a + a + a = 0 := by\n  nth_rewrite 3 [h, h]\n/-\na b: ℕ\nh: a = a + b\n⊢ a + a + (a + b + b) + a + a = 0\n-/\n```\nHere, the first `nth_rewrite` with `h` introduces an additional occurrence of `a` in the goal.\nThat is, the goal state after the first rewrite looks like below\n```lean\n/-\na b: ℕ\nh: a = a + b\n⊢ a + a + (a + b) + a + a = 0\n-/\n```\nThis new instance of `a` also turns out to be the third _occurrence_ of `a`.  Therefore,\nthe next `nth_rewrite` with `h` rewrites this `a`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NthRewrite.html#Mathlib.Tactic.nthRewriteSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">nthRewriteSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}