{"name":"Mathlib.Tactic.Positivity.Core","instances":[{"typeNames":["Mathlib.Meta.Positivity.Strictness"],"name":"Mathlib.Meta.Positivity.instReprStrictness","className":"Repr"}],"imports":["Init","Mathlib.Tactic.NormNum.Core","Mathlib.Tactic.HaveI","Mathlib.Algebra.Order.Invertible","Mathlib.Algebra.Order.Ring.Cast","Mathlib.Data.Nat.Cast.Basic","Qq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L398-L413","name":"Mathlib.Tactic.Positivity.positivity","line":398,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Tactic.Positivity.positivity","doc":"Tactic solving goals of the form `0 ≤ x`, `0 < x` and `x ≠ 0`.  The tactic works recursively\naccording to the syntax of the expression `x`, if the atoms composing the expression all have\nnumeric lower bounds which can be proved positive/nonnegative/nonzero by `norm_num`.  This tactic\neither closes the goal or fails.\n\nExamples:\n```\nexample {a : ℤ} (ha : 3 < a) : 0 ≤ a ^ 3 + a := by positivity\n\nexample {a : ℤ} (ha : 1 < a) : 0 < |(3:ℤ) + a| := by positivity\n\nexample {b : ℤ} : 0 ≤ max (-3) (b ^ 2) := by positivity\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Tactic.Positivity.positivity\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">positivity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L387-L390","name":"Mathlib.Meta.Positivity.positivity","line":387,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.positivity","doc":"The main entry point to the `positivity` tactic. Given a goal `goal` of the form `0 [≤/</≠] e`,\nattempts to recurse on the structure of `e` to prove the goal.\nIt will either close `goal` or fail. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.positivity\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">positivity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L347-L382","name":"Mathlib.Meta.Positivity.solve","line":347,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.solve","doc":"An auxillary entry point to the `positivity` tactic. Given a proposition `t` of the form\n`0 [≤/</≠] e`, attempts to recurse on the structure of `t` to prove it. It returns a proof\nor fails. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.solve\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">solve</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L316-L333","name":"Mathlib.Meta.Positivity.core","line":316,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.core","doc":"Run each registered `positivity` extension on an expression, returning a `NormNum.Result`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.core\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">core</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L299-L313","name":"Mathlib.Meta.Positivity.orElse","line":299,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.orElse","doc":"The main combinator which combines multiple `positivity` results.\nIt assumes `t₁` has already been run for a result, and runs `t₂` and takes the best result.\nIt will skip `t₂` if `t₁` is already a proof of `.positive`, and can also combine\n`.nonnegative` and `.nonzero` to produce a `.positive` result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.orElse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L250-L292","name":"Mathlib.Meta.Positivity.compareHyp","line":250,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHyp","doc":"A variation on `assumption` which checks if the hypothesis `ldecl` is `a [</≤/=] e`\nwhere `a` is a numeral. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHyp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">compareHyp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ldecl : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L238-L243","name":"Mathlib.Meta.Positivity.compareHypEq","line":238,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHypEq","doc":"A variation on `assumption` when the hypothesis is `x = e` where `x` is a numeral. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHypEq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">compareHypEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$x»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$e»</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L231-L235","name":"Mathlib.Meta.Positivity.compareHypLT","line":231,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHypLT","doc":"A variation on `assumption` when the hypothesis is `lo < e` where `lo` is a numeral. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHypLT\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">compareHypLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$lo»</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">«$e»</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L224-L228","name":"Mathlib.Meta.Positivity.compareHypLE","line":224,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHypLE","doc":"A variation on `assumption` when the hypothesis is `lo ≤ e` where `lo` is a numeral. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.compareHypLE\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">compareHypLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$lo»</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">«$e»</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L218-L221","name":"Mathlib.Meta.Positivity.positivityCanon","line":218,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.positivityCanon","doc":"Attempts to prove that `e ≥ 0` using `zero_le` in a `CanonicallyOrderedAddCommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.positivityCanon\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">positivityCanon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L182-L215","name":"Mathlib.Meta.Positivity.normNumPositivity","line":182,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.normNumPositivity","doc":"Attempts to prove a `Strictness` result when `e` evaluates to a literal number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.normNumPositivity\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">normNumPositivity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L175-L179","name":"Mathlib.Meta.Positivity.throwNone","line":175,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.throwNone","doc":"Converts a `MetaM Strictness` which can return `.none`\ninto one which never returns `.none` but fails instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.throwNone\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">throwNone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L167-L170","name":"Mathlib.Meta.Positivity.catchNone","line":167,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.catchNone","doc":"Converts a `MetaM Strictness` which can fail\ninto one that never fails and returns `.none` instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.catchNone\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">catchNone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L155-L162","name":"Mathlib.Meta.Positivity.nz_of_isRat","line":155,"kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nz_of_isRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nz_of_isRat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">nz_of_isRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#LinearOrderedRing\">LinearOrderedRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsRat\">Mathlib.Meta.NormNum.IsRat</a> <span class=\"fn\">e</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L151-L153","name":"Mathlib.Meta.Positivity.nonneg_of_isRat","line":151,"kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nonneg_of_isRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nonneg_of_isRat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">nonneg_of_isRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#LinearOrderedRing\">LinearOrderedRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsRat\">Mathlib.Meta.NormNum.IsRat</a> <span class=\"fn\">e</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L143-L149","name":"Mathlib.Meta.Positivity.pos_of_isRat","line":143,"kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.pos_of_isRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.pos_of_isRat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">pos_of_isRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#LinearOrderedRing\">LinearOrderedRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsRat\">Mathlib.Meta.NormNum.IsRat</a> <span class=\"fn\">e</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L136-L141","name":"Mathlib.Meta.Positivity.nz_of_isNegNat","line":136,"kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nz_of_isNegNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nz_of_isNegNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">nz_of_isNegNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#StrictOrderedRing\">StrictOrderedRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\">e</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negOfNat\">Int.negOfNat</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.ble\">Nat.ble</a> <span class=\"fn\">1</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L131-L134","name":"Mathlib.Meta.Positivity.nonneg_of_isNat","line":131,"kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nonneg_of_isNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.nonneg_of_isNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">nonneg_of_isNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#OrderedSemiring\">OrderedSemiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">e</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L125-L129","name":"Mathlib.Meta.Positivity.pos_of_isNat","line":125,"kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.pos_of_isNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.pos_of_isNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">pos_of_isNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#StrictOrderedSemiring\">StrictOrderedSemiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">e</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.ble\">Nat.ble</a> <span class=\"fn\">1</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L122-L123","name":"Mathlib.Meta.Positivity.lt_of_le_of_ne'","line":122,"kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.lt_of_le_of_ne'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.lt_of_le_of_ne'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">lt_of_le_of_ne'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L80-L94","name":"Mathlib.Meta.Positivity.positivityExt","line":80,"kind":"opaque","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.positivityExt","doc":"Environment extensions for `positivity` declarations "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.positivityExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">positivityExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Entry\">Mathlib.Meta.Positivity.Entry</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Entry\">Mathlib.Meta.Positivity.Entry</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Entry\">Mathlib.Meta.Positivity.Entry</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L78-L78","name":"Mathlib.Meta.Positivity.Entry","line":78,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Entry","doc":"Each `positivity` extension is labelled with a collection of patterns\nwhich determine the expressions to which it should be applied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Entry\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">Entry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L74-L74","name":"Mathlib.Meta.Positivity.discrTreeConfig","line":74,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.discrTreeConfig","doc":"Configuration for `DiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.discrTreeConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">discrTreeConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L69-L71","name":"Mathlib.Meta.Positivity.mkPositivityExt","line":69,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.mkPositivityExt","doc":"Read a `positivity` extension from a declaration of the right type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.mkPositivityExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">mkPositivityExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L65-L65","name":"Mathlib.Meta.Positivity.PositivityExt.eval","line":65,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt.eval","doc":"Attempts to prove an expression `e : α` is `>0`, `≥0`, or `≠0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt.eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">PositivityExt</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L63-L63","name":"Mathlib.Meta.Positivity.PositivityExt.mk","line":63,"kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">PositivityExt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(eval : <span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>} →\n  <span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>} →\n    <span class=\"fn\">(<span class=\"fn\">zα</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>) →\n      <span class=\"fn\">(<span class=\"fn\">pα</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>) → <span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>) → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L63-L66","name":"Mathlib.Meta.Positivity.PositivityExt","line":63,"kind":"structure","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt","doc":"An extension for `positivity`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">PositivityExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L57-L60","name":"Mathlib.Meta.Positivity.Strictness.toNonzero","line":57,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.toNonzero","doc":"Extract a proof that `e` is nonzero, if possible, from `Strictness` information about `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.toNonzero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">Strictness</span>.<span class=\"name\">toNonzero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$e»</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L51-L54","name":"Mathlib.Meta.Positivity.Strictness.toNonneg","line":51,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.toNonneg","doc":"Extract a proof that `e` is nonnegative, if possible, from `Strictness` information about `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.toNonneg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">Strictness</span>.<span class=\"name\">toNonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">«$e»</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L43-L47","name":"Mathlib.Meta.Positivity.Strictness.toString","line":43,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.toString","doc":"Gives a generic description of the `positivity` result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.toString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">Strictness</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L40-L40","name":"Mathlib.Meta.Positivity.instReprStrictness","line":40,"kind":"instance","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.instReprStrictness","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.instReprStrictness\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">instReprStrictness</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>} →\n  <span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>} →\n    <span class=\"fn\">{<span class=\"fn\">zα</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>} →\n      <span class=\"fn\">{<span class=\"fn\">pα</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>} → <span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>} → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L39-L39","name":"Mathlib.Meta.Positivity.Strictness.none","line":39,"kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.none\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">Strictness</span>.<span class=\"name\">none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L38-L38","name":"Mathlib.Meta.Positivity.Strictness.nonzero","line":38,"kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.nonzero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.nonzero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">Strictness</span>.<span class=\"name\">nonzero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf : <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$e»</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L37-L37","name":"Mathlib.Meta.Positivity.Strictness.nonnegative","line":37,"kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.nonnegative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.nonnegative\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">Strictness</span>.<span class=\"name\">nonnegative</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf : <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">«$e»</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L36-L36","name":"Mathlib.Meta.Positivity.Strictness.positive","line":36,"kind":"ctor","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.positive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness.positive\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">Strictness</span>.<span class=\"name\">positive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pf : <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">«$e»</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\">Mathlib.Meta.Positivity.Strictness</a> <span class=\"fn\">zα</span> <span class=\"fn\">pα</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L35-L40","name":"Mathlib.Meta.Positivity.Strictness","line":35,"kind":"inductive","docLink":"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness","doc":"The result of `positivity` running on an expression `e` of type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.Strictness\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">Strictness</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L28-L28","name":"ne_of_ne_of_eq'","line":28,"kind":"theorem","docLink":"./Mathlib/Tactic/Positivity/Core.html#ne_of_ne_of_eq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#ne_of_ne_of_eq'\"><span class=\"name\">ne_of_ne_of_eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hab : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbc : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Tactic/Positivity/Core.lean#L25-L26","name":"positivity","line":25,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Core.html#positivity","doc":"Attribute for identifying `positivity` extensions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Core.html#positivity\"><span class=\"name\">positivity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}