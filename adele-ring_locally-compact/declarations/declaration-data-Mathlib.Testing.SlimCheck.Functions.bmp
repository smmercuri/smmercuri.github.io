{"name":"Mathlib.Testing.SlimCheck.Functions","instances":[{"typeNames":["SlimCheck.TotalFunction"],"name":"SlimCheck.TotalFunction.inhabited","className":"Inhabited"},{"typeNames":["SlimCheck.TotalFunction"],"name":"SlimCheck.TotalFunction.instRepr","className":"Repr"},{"typeNames":[],"name":"SlimCheck.TotalFunction.Pi.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Finsupp"],"name":"SlimCheck.TotalFunction.Finsupp.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["DFinsupp"],"name":"SlimCheck.TotalFunction.DFinsupp.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":[],"name":"SlimCheck.TotalFunction.PiPred.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":[],"name":"SlimCheck.TotalFunction.PiUncurry.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["SlimCheck.InjectiveFunction"],"name":"SlimCheck.instInhabitedInjectiveFunction","className":"Inhabited"},{"typeNames":["SlimCheck.InjectiveFunction"],"name":"SlimCheck.InjectiveFunction.instRepr","className":"Repr"},{"typeNames":["Subtype"],"name":"SlimCheck.InjectiveFunction.PiInjective.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Function.Injective"],"name":"SlimCheck.Injective.testable","className":"SlimCheck.Testable"},{"typeNames":["Monotone"],"name":"SlimCheck.Monotone.testable","className":"SlimCheck.Testable"},{"typeNames":["Antitone"],"name":"SlimCheck.Antitone.testable","className":"SlimCheck.Testable"}],"imports":["Init","Mathlib.Data.List.Sigma","Mathlib.Data.Int.Range","Mathlib.Data.Finsupp.Defs","Mathlib.Data.Finsupp.ToDFinsupp","Mathlib.Testing.SlimCheck.Sampleable","Mathlib.Testing.SlimCheck.Testable"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L496-L500","name":"SlimCheck.Antitone.testable","line":496,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.Antitone.testable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.Antitone.testable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Antitone</span>.<span class=\"name\">testable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[I : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">&quot;x&quot;</span>\n    <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">&quot;y&quot;</span> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">&quot;H&quot;</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span></span>)</span></span></span>)</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Antitone\">Antitone</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L490-L494","name":"SlimCheck.Monotone.testable","line":490,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.Monotone.testable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.Monotone.testable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Monotone</span>.<span class=\"name\">testable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[I : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">&quot;x&quot;</span>\n    <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">&quot;y&quot;</span> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">&quot;H&quot;</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span></span></span>)</span></span></span>)</span></span></span>)</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L484-L488","name":"SlimCheck.Injective.testable","line":484,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.Injective.testable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.Injective.testable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Injective</span>.<span class=\"name\">testable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[I : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">&quot;x&quot;</span>\n    <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">&quot;y&quot;</span> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">&quot;H&quot;</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span>)</span></span></span>)</span></span></span>)</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L466-L478","name":"SlimCheck.InjectiveFunction.PiInjective.sampleableExt","line":466,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.PiInjective.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.PiInjective.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">PiInjective</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">{ <span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> // <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">f</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L447-L464","name":"SlimCheck.InjectiveFunction.injective","line":447,"kind":"theorem","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.injective\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\">SlimCheck.InjectiveFunction</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\"><span class=\"fn\">f</span>.apply</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L438-L445","name":"SlimCheck.InjectiveFunction.mk","line":438,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.mk","doc":"Create an injective function from one list and a permutation of that list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.mk\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.Perm</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><span class=\"fn\">ys</span>.Nodup</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\">SlimCheck.InjectiveFunction</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L425-L435","name":"SlimCheck.InjectiveFunction.shrink","line":425,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.shrink","doc":"Shrink an injective function slicing a segment in the middle of the domain and removing\nthe corresponding elements in the codomain, hence maintaining the property that\none is a permutation of the other.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.shrink\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">shrink</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\">SlimCheck.InjectiveFunction</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\">SlimCheck.InjectiveFunction</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L408-L414","name":"SlimCheck.InjectiveFunction.shrinkPerm","line":408,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.shrinkPerm","doc":"Shrink a permutation of a list, slicing a segment in the middle.\n\nThe sizes of the slice being removed start at `n` (with `n` the length\nof the list) and then `n / 2`, then `n / 4`, etc down to 1. The slices\nwill be taken at index `0`, `n / k`, `2n / k`, `3n / k`, etc.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.shrinkPerm\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">shrinkPerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.Perm</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ys</span>.Nodup</span></span></span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.Perm</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ys</span>.Nodup</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L395-L400","name":"SlimCheck.InjectiveFunction.sliceSizes","line":395,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.sliceSizes","doc":"A list, in decreasing order, of sizes that should be\nsliced off a list of length `n`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.sliceSizes\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">sliceSizes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Data/PNat/Defs.html#PNat\">ℕ+</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L385-L390","name":"SlimCheck.InjectiveFunction.Perm.slice","line":385,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.Perm.slice","doc":"Remove a slice of length `m` at index `n` in a list and a permutation, maintaining the property\nthat it is a permutation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.Perm.slice\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">Perm</span>.<span class=\"name\">slice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.Perm</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ys</span>.Nodup</span></span></span></span> → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.Perm</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ys</span>.Nodup</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L352-L376","name":"SlimCheck.InjectiveFunction.applyId_injective","line":352,"kind":"theorem","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.applyId_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.applyId_injective\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">applyId_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">xs</span>.Nodup</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.Perm</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId\">SlimCheck.InjectiveFunction.List.applyId</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.zip</span> <span class=\"fn\">ys</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L341-L350","name":"SlimCheck.InjectiveFunction.List.applyId_eq_self","line":341,"kind":"theorem","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId_eq_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId_eq_self\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">applyId_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId\">SlimCheck.InjectiveFunction.List.applyId</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.zip</span> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L308-L339","name":"SlimCheck.InjectiveFunction.applyId_mem_iff","line":308,"kind":"theorem","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.applyId_mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.applyId_mem_iff\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">applyId_mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">xs</span>.Nodup</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.Perm</span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId\">SlimCheck.InjectiveFunction.List.applyId</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.zip</span> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L286-L306","name":"SlimCheck.InjectiveFunction.List.applyId_zip_eq","line":286,"kind":"theorem","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId_zip_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId_zip_eq\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">applyId_zip_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">xs</span>.Nodup</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ys</span>.length</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>[<span class=\"fn\">i</span>]?</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId\">SlimCheck.InjectiveFunction.List.applyId</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.zip</span> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>[<span class=\"fn\">i</span>]?</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L276-L279","name":"SlimCheck.InjectiveFunction.List.applyId_cons","line":276,"kind":"theorem","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId_cons\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">applyId_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId\">SlimCheck.InjectiveFunction.List.applyId</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">y</span>, <span class=\"fn\">z</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> then <span class=\"fn\">z</span> else <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId\">SlimCheck.InjectiveFunction.List.applyId</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L272-L273","name":"SlimCheck.InjectiveFunction.List.applyId","line":272,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId","doc":"Interpret a list of pairs as a total function, defaulting to\nthe identity function when no entries are found for a given function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.List.applyId\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">applyId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L267-L268","name":"SlimCheck.InjectiveFunction.instRepr","line":267,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.instRepr\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\">SlimCheck.InjectiveFunction</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L264-L265","name":"SlimCheck.InjectiveFunction.repr","line":264,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.repr","doc":"Produce a string for a given `InjectiveFunction`.\nThe output is of the form `[x₀ ↦ f x₀, .. xₙ ↦ f xₙ, x ↦ x]`.\nUnlike for `TotalFunction`, the default value is not a constant\nbut the identity function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.repr\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\">SlimCheck.InjectiveFunction</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L256-L257","name":"SlimCheck.InjectiveFunction.apply","line":256,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.apply","doc":"Apply a total function to an argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.apply\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\">SlimCheck.InjectiveFunction</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L250-L251","name":"SlimCheck.instInhabitedInjectiveFunction","line":250,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.instInhabitedInjectiveFunction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.instInhabitedInjectiveFunction\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">instInhabitedInjectiveFunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\">SlimCheck.InjectiveFunction</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L247-L248","name":"SlimCheck.InjectiveFunction.mapToSelf","line":247,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.mapToSelf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction.mapToSelf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">mapToSelf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">(_ : <span class=\"fn\">α</span>) × <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Sigma.fst</span> <span class=\"fn\">xs</span></span>)</span>.Perm</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Sigma.snd</span> <span class=\"fn\">xs</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Sigma.snd</span> <span class=\"fn\">xs</span></span>)</span>.Nodup</span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\">SlimCheck.InjectiveFunction</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L246-L248","name":"SlimCheck.InjectiveFunction","line":246,"kind":"inductive","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction","doc":"Data structure specifying a total function using a list of pairs\nand a default value returned when the input is not in the domain of\nthe partial function.\n\n`mapToSelf f` encodes `x ↦ f x` when `x ∈ f` and `x ↦ x`,\ni.e. `x` to itself, otherwise.\n\nWe use `Σ` to encode mappings instead of `×` because we\nrely on the association list API defined in `Mathlib/Data/List/Sigma.lean`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.InjectiveFunction\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">InjectiveFunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L216-L221","name":"SlimCheck.TotalFunction.PiUncurry.sampleableExt","line":216,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.PiUncurry.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.PiUncurry.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">PiUncurry</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L209-L214","name":"SlimCheck.TotalFunction.PiPred.sampleableExt","line":209,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.PiPred.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.PiPred.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">PiPred</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L196-L201","name":"SlimCheck.TotalFunction.DFinsupp.sampleableExt","line":196,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.DFinsupp.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.DFinsupp.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">DFinsupp</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">Π₀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L188-L193","name":"SlimCheck.TotalFunction.Finsupp.sampleableExt","line":188,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.Finsupp.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.Finsupp.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">Finsupp</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L163-L184","name":"SlimCheck.TotalFunction.applyFinsupp","line":163,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.applyFinsupp","doc":"Create a finitely supported function from a total function by taking the default value to\nzero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.applyFinsupp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">applyFinsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(tf : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L157-L159","name":"SlimCheck.TotalFunction.zeroDefaultSupp","line":157,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.zeroDefaultSupp","doc":"The support of a zero default `TotalFunction`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.zeroDefaultSupp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">zeroDefaultSupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L150-L151","name":"SlimCheck.TotalFunction.zeroDefault","line":150,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.zeroDefault","doc":"Map a total_function to one whose default value is zero so that it represents a finsupp. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.zeroDefault\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">zeroDefault</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L131-L140","name":"SlimCheck.TotalFunction.Pi.sampleableExt","line":131,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.Pi.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.Pi.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">Pi</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L125-L127","name":"SlimCheck.TotalFunction.shrink","line":125,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.shrink","doc":"Shrink a total function by shrinking the lists that represent it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.shrink\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">shrink</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L105-L106","name":"SlimCheck.TotalFunction.List.toFinmap'","line":105,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.List.toFinmap'","doc":"Create a `finmap` from a list of pairs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.List.toFinmap'\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">toFinmap'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">(_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L101-L102","name":"SlimCheck.TotalFunction.instRepr","line":101,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.instRepr\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L98-L99","name":"SlimCheck.TotalFunction.repr","line":98,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.repr","doc":"Produce a string for a given `TotalFunction`.\nThe output is of the form `[x₀ ↦ f x₀, .. xₙ ↦ f xₙ, _ ↦ y]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.repr\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L89-L93","name":"SlimCheck.TotalFunction.reprAux","line":89,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.reprAux","doc":"Implementation of `Repr (TotalFunction α β)`.\n\nCreates a string for a given `finmap` and output, `x₀ ↦ y₀, .. xₙ ↦ yₙ`\nfor each of the entries. The brackets are provided by the calling function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.reprAux\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">reprAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">(_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L81-L82","name":"SlimCheck.TotalFunction.apply","line":81,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.apply","doc":"Apply a total function to an argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.apply\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L76-L78","name":"SlimCheck.TotalFunction.comp","line":76,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.comp","doc":"Compose a total function with a regular function on the left "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.comp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L69-L70","name":"SlimCheck.TotalFunction.inhabited","line":69,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.inhabited\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L67-L67","name":"SlimCheck.TotalFunction.withDefault","line":67,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.withDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction.withDefault\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">withDefault</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">(_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\">SlimCheck.TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Functions.lean#L66-L67","name":"SlimCheck.TotalFunction","line":66,"kind":"inductive","docLink":"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction","doc":"Data structure specifying a total function using a list of pairs\nand a default value returned when the input is not in the domain of\nthe partial function.\n\n`withDefault f y` encodes `x ↦ f x` when `x ∈ f` and `x ↦ y`\notherwise.\n\nWe use `Σ` to encode mappings instead of `×` because we\nrely on the association list API defined in `Mathlib/Data/List/Sigma.lean`.\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Functions.html#SlimCheck.TotalFunction\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TotalFunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"}]}