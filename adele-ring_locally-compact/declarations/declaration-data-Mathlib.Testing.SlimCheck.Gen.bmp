{"name":"Mathlib.Testing.SlimCheck.Gen","instances":[],"imports":["Init","Mathlib.Control.Random","Batteries.Data.List.Perm"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L115-L117","name":"SlimCheck.Gen.run","line":115,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.run","doc":"Execute a `Gen` inside the `IO` monad using `size` as the example size"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.run\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L107-L110","name":"SlimCheck.Gen.prodOf","line":107,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.prodOf","doc":"Given two generators produces a tuple consisting out of the result of both "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.prodOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">prodOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L99-L104","name":"SlimCheck.Gen.permutationOf","line":99,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.permutationOf","doc":"Generate a random permutation of a given list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.permutationOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">permutationOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">{ <span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.Perm</span> <span class=\"fn\">ys</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L93-L95","name":"SlimCheck.Gen.elements","line":93,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.elements","doc":"Given a list of examples, choose one to create an example. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.elements\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">elements</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L88-L90","name":"SlimCheck.Gen.oneOf","line":88,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.oneOf","doc":"Given a list of example generators, choose one to create an example. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.oneOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">oneOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.size</span></span>)</span> <a href=\"./Mathlib/Testing/SlimCheck/Gen.html#_auto._@.Mathlib.Testing.SlimCheck.Gen._hyg.529\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L84-L85","name":"SlimCheck.Gen.listOf","line":84,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.listOf","doc":"Create a `List` of examples using `x`. The size is controlled\nby the size parameter of `Gen`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.listOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">listOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L75-L80","name":"SlimCheck.Gen.arrayOf","line":75,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.arrayOf","doc":"Create an `Array` of examples using `x`. The size is controlled\nby the size parameter of `Gen`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.arrayOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">arrayOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L68-L69","name":"SlimCheck.Gen.resize","line":68,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.resize","doc":"Apply a function to the size parameter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.resize\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">resize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L64-L65","name":"SlimCheck.Gen.getSize","line":64,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.getSize","doc":"Get access to the size parameter of the `Gen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.getSize\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">getSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L60-L61","name":"SlimCheck.Gen.chooseNatLt","line":60,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseNatLt","doc":"Generate a `Nat` example between `x` and `y` (exclusively). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseNatLt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseNatLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">{ <span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L51-L57","name":"SlimCheck.Gen.chooseNatLt_aux","line":51,"kind":"theorem","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseNatLt_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseNatLt_aux\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseNatLt_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span>.succ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">a</span>.pred</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.pred</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L47-L49","name":"SlimCheck.Gen.choose","line":47,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.choose","doc":"Lift `BoundedRandom.randomR` to the `Gen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.choose\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">choose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Random.html#BoundedRandom\">BoundedRandom</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lo : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L43-L44","name":"SlimCheck.Gen.chooseAny","line":43,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseAny","doc":"Lift `Random.random` to the `Gen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseAny\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Random.html#Random\">Random</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Gen.lean#L38-L38","name":"SlimCheck.Gen","line":38,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen","doc":"Monad to generate random examples to test properties with.\nIt has a `Nat` parameter so that the caller can decide on the\nsize of the examples. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}