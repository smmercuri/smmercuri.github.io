{"name":"Mathlib.Testing.SlimCheck.Sampleable","instances":[{"typeNames":["Nat"],"name":"SlimCheck.Nat.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Fin"],"name":"SlimCheck.Fin.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Int"],"name":"SlimCheck.Int.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Rat"],"name":"SlimCheck.Rat.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Bool"],"name":"SlimCheck.Bool.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Char"],"name":"SlimCheck.Char.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Prod"],"name":"SlimCheck.Prod.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Sigma"],"name":"SlimCheck.Sigma.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["List"],"name":"SlimCheck.List.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["Nat"],"name":"SlimCheck.Nat.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Fin"],"name":"SlimCheck.Fin.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Int"],"name":"SlimCheck.Int.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Rat"],"name":"SlimCheck.Rat.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Bool"],"name":"SlimCheck.Bool.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["Char"],"name":"SlimCheck.Char.sampleableDefault","className":"SlimCheck.SampleableExt"},{"typeNames":["Prod"],"name":"SlimCheck.Prod.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["_builtin_prop"],"name":"SlimCheck.Prop.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["List"],"name":"SlimCheck.List.sampleableExt","className":"SlimCheck.SampleableExt"},{"typeNames":["SlimCheck.NoShrink"],"name":"SlimCheck.NoShrink.inhabited","className":"Inhabited"},{"typeNames":["SlimCheck.NoShrink"],"name":"SlimCheck.NoShrink.repr","className":"Repr"},{"typeNames":["SlimCheck.NoShrink"],"name":"SlimCheck.NoShrink.shrinkable","className":"SlimCheck.Shrinkable"},{"typeNames":["SlimCheck.NoShrink"],"name":"SlimCheck.NoShrink.sampleableExt","className":"SlimCheck.SampleableExt"}],"imports":["Init","Mathlib.Algebra.Order.Ring.Int","Mathlib.Init.Data.List.Instances","Mathlib.Testing.SlimCheck.Gen"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L307-L349","name":"SlimCheck.«command#sample_»","line":307,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.«command#sample_»","doc":"`#sample type`, where `type` has an instance of `SampleableExt`, prints ten random\nvalues of type `type` using an increasing size parameter.\n\n```lean\n#sample Nat\n-- prints\n-- 0\n-- 0\n-- 2\n-- 24\n-- 64\n-- 76\n-- 5\n-- 132\n-- 8\n-- 449\n-- or some other sequence of numbers\n\n#sample List Int\n-- prints\n-- []\n-- [1, 1]\n-- [-7, 9, -6]\n-- [36]\n-- [-500, 105, 260]\n-- [-290]\n-- [17, 156]\n-- [-2364, -7599, 661, -2411, -3576, 5517, -3823, -968]\n-- [-643]\n-- [11892, 16329, -15095, -15461]\n-- or whatever\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.«command#sample_»\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">«command#sample_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L291-L304","name":"SlimCheck.mkGenerator","line":291,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.mkGenerator","doc":"Create a `Gen α` expression from the argument of `#sample` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.mkGenerator\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">mkGenerator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>) ×\n    <span class=\"fn\">(<span class=\"fn\">α</span> :\n      <span class=\"fn\">let <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n      <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span></span>) ×\n      <span class=\"fn\"><span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">«$α»</span></span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">«$α»</span></span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L284-L286","name":"SlimCheck.printSamples","line":284,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.printSamples","doc":"Print (at most) 10 samples of a given type to stdout for debugging.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.printSamples\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">printSamples</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L273-L274","name":"SlimCheck.NoShrink.sampleableExt","line":273,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">NoShrink</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink\">SlimCheck.NoShrink</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L270-L271","name":"SlimCheck.NoShrink.shrinkable","line":270,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.shrinkable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">NoShrink</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink\">SlimCheck.NoShrink</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L268-L268","name":"SlimCheck.NoShrink.repr","line":268,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.repr\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">NoShrink</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[inst : <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink\">SlimCheck.NoShrink</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L267-L267","name":"SlimCheck.NoShrink.inhabited","line":267,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.inhabited\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">NoShrink</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[inst : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink\">SlimCheck.NoShrink</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L265-L265","name":"SlimCheck.NoShrink.get","line":265,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.get\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">NoShrink</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink\">SlimCheck.NoShrink</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L264-L264","name":"SlimCheck.NoShrink.mk","line":264,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink.mk\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">NoShrink</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink\">SlimCheck.NoShrink</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L260-L260","name":"SlimCheck.NoShrink","line":260,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink","doc":"An annotation for values that should never get shrinked. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.NoShrink\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">NoShrink</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L252-L255","name":"SlimCheck.List.sampleableExt","line":252,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.List.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.List.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">List</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L245-L250","name":"SlimCheck.Prop.sampleableExt","line":245,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Prop.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Prop.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Prop</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L237-L243","name":"SlimCheck.Prod.sampleableExt","line":237,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Prod.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Prod.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Prod</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L234-L235","name":"SlimCheck.Char.sampleableDefault","line":234,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Char.sampleableDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Char.sampleableDefault\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Char</span>.<span class=\"name\">sampleableDefault</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L224-L232","name":"SlimCheck.Char.sampleable","line":224,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Char.sampleable","doc":"This can be specialized into customized `SampleableExt Char` instances.\nThe resulting instance has `1 / length` chances of making an unrestricted choice of characters\nand it otherwise chooses a character from `chars` with uniform probabilities.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Char.sampleable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Char</span>.<span class=\"name\">sampleable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(length : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(chars : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">chars</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L218-L219","name":"SlimCheck.Bool.sampleableExt","line":218,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Bool.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Bool.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Bool</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L211-L216","name":"SlimCheck.Rat.sampleableExt","line":211,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Rat.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Rat.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Rat</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L206-L209","name":"SlimCheck.Int.sampleableExt","line":206,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Int.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Int.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Int</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L201-L204","name":"SlimCheck.Fin.sampleableExt","line":201,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Fin.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Fin.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Fin</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L198-L199","name":"SlimCheck.Nat.sampleableExt","line":198,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Nat.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Nat.sampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Nat</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L187-L190","name":"SlimCheck.List.shrinkable","line":187,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.List.shrinkable","doc":"Shrink a list of a shrinkable type, either by discarding an element or shrinking an element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.List.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">List</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L177-L182","name":"SlimCheck.Sigma.shrinkable","line":177,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Sigma.shrinkable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Sigma.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Sigma</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[shrA : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[shrB : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">(<span class=\"fn\">(_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L170-L175","name":"SlimCheck.Prod.shrinkable","line":170,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Prod.shrinkable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Prod.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Prod</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[shrA : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[shrB : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L168-L168","name":"SlimCheck.Char.shrinkable","line":168,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Char.shrinkable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Char.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Char</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L167-L167","name":"SlimCheck.Bool.shrinkable","line":167,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Bool.shrinkable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Bool.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Bool</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L163-L165","name":"SlimCheck.Rat.shrinkable","line":163,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Rat.shrinkable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Rat.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Rat</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L160-L161","name":"SlimCheck.Int.shrinkable","line":160,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Int.shrinkable","doc":"`Int.shrinkable` operates like `Nat.shrinkable` but also includes the negative variants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Int.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Int</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L156-L157","name":"SlimCheck.Fin.shrinkable","line":156,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Fin.shrinkable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Fin.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Fin</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.succ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L153-L154","name":"SlimCheck.Nat.shrinkable","line":153,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Nat.shrinkable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Nat.shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Nat</span>.<span class=\"name\">shrinkable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L143-L151","name":"SlimCheck.Nat.shrink","line":143,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Nat.shrink","doc":"`Nat.shrink' n` creates a list of smaller natural numbers by\nsuccessively dividing `n` by 2 . For example, `Nat.shrink 5 = [2, 1, 0]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Nat.shrink\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Nat</span>.<span class=\"name\">shrink</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L134-L135","name":"SlimCheck.SampleableExt.interpSample","line":134,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.interpSample","doc":"First samples a proxy value and interprets it. Especially useful if\nthe proxy and target type are the same. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.interpSample\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">SampleableExt</span>.<span class=\"name\">interpSample</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L125-L130","name":"SlimCheck.SampleableExt.mkSelfContained","line":125,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.mkSelfContained","doc":"Use to generate instance whose purpose is to simply generate values\nof a type directly using the `Gen` monad "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.mkSelfContained\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">SampleableExt</span>.<span class=\"name\">mkSelfContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sample : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L116-L116","name":"SlimCheck.SampleableExt.interp","line":116,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.interp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.interp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">SampleableExt</span>.<span class=\"name\">interp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy\">SlimCheck.SampleableExt.proxy</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L115-L115","name":"SlimCheck.SampleableExt.sample","line":115,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.sample","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.sample\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">SampleableExt</span>.<span class=\"name\">sample</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy\">SlimCheck.SampleableExt.proxy</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L114-L114","name":"SlimCheck.SampleableExt.shrink","line":114,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.shrink","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.shrink\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">SampleableExt</span>.<span class=\"name\">shrink</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy\">SlimCheck.SampleableExt.proxy</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L113-L113","name":"SlimCheck.SampleableExt.proxyRepr","line":113,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxyRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxyRepr\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">SampleableExt</span>.<span class=\"name\">proxyRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy\">SlimCheck.SampleableExt.proxy</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L112-L112","name":"SlimCheck.SampleableExt.proxy","line":112,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">SampleableExt</span>.<span class=\"name\">proxy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> v</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L111-L111","name":"SlimCheck.SampleableExt.mk","line":111,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.mk\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">SampleableExt</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(proxy : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[proxyRepr : <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">proxy</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[shrink : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">proxy</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sample : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">proxy</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(interp : <span class=\"fn\"><span class=\"fn\">proxy</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L111-L116","name":"SlimCheck.SampleableExt","line":111,"kind":"class","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt","doc":"`SampleableExt` can be used in two ways. The first (and most common)\nis to simply generate values of a type directly using the `Gen` monad,\nif this is what you want to do then `SampleableExt.mkSelfContained` is\nthe way to go.\n\nFurthermore it makes it possible to express generators for types that\ndo not lend themselves to introspection, such as `ℕ → ℕ`.\nIf we test a quantification over functions the\ncounter-examples cannot be shrunken or printed meaningfully.\nFor that purpose, `SampleableExt` provides a proxy representation\n`proxy` that can be printed and shrunken as well\nas interpreted (using `interp`) as an object of the right type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">SampleableExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max u (v + 2))</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L97-L97","name":"SlimCheck.Shrinkable.shrink","line":97,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable.shrink","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable.shrink\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Shrinkable</span>.<span class=\"name\">shrink</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L96-L96","name":"SlimCheck.Shrinkable.mk","line":96,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable.mk\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Shrinkable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(shrink : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\">SlimCheck.Shrinkable</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Testing/SlimCheck/Sampleable.lean#L96-L97","name":"SlimCheck.Shrinkable","line":96,"kind":"class","docLink":"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable","doc":"Given an example `x : α`, `Shrinkable α` gives us a way to shrink it\nand suggest simpler examples. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.Shrinkable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Shrinkable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}