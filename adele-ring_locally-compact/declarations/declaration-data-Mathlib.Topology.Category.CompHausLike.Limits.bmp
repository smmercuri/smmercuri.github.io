{"name":"Mathlib.Topology.Category.CompHausLike.Limits","instances":[{"typeNames":[],"name":"CompHausLike.instHasCoproduct","className":"CategoryTheory.Limits.HasColimit"},{"typeNames":["CategoryTheory.Discrete","CompHausLike"],"name":"CompHausLike.instHasColimitsOfShapeDiscreteOfHasExplicitFiniteCoproductsOfFinite","className":"CategoryTheory.Limits.HasColimitsOfShape"},{"typeNames":["CompHausLike"],"name":"CompHausLike.instHasFiniteCoproductsOfHasExplicitFiniteCoproducts","className":"CategoryTheory.Limits.HasFiniteCoproducts"},{"typeNames":["CompHausLike.compHausLikeToTop"],"name":"CompHausLike.instPreservesFiniteCoproductsTopCatCompHausLikeToTopOfHasExplicitFiniteCoproducts","className":"CategoryTheory.Limits.PreservesFiniteCoproducts"},{"typeNames":["CompHausLike.toCompHausLike"],"name":"CompHausLike.instPreservesFiniteCoproductsToCompHausLike","className":"CategoryTheory.Limits.PreservesFiniteCoproducts"},{"typeNames":["CategoryTheory.Limits.cospan"],"name":"CompHausLike.instHasLimitWalkingCospanCospan","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["CategoryTheory.Limits.cospan","CompHausLike.compHausLikeToTop"],"name":"CompHausLike.instCreatesLimitTopCatWalkingCospanCospanCompHausLikeToTop","className":"CategoryTheory.CreatesLimit"},{"typeNames":["CategoryTheory.Limits.cospan","CompHausLike.compHausLikeToTop"],"name":"CompHausLike.instPreservesLimitTopCatWalkingCospanCospanCompHausLikeToTop","className":"CategoryTheory.Limits.PreservesLimit"},{"typeNames":["CategoryTheory.Limits.cospan","CompHausLike.toCompHausLike"],"name":"CompHausLike.instPreservesLimitWalkingCospanCospanToCompHausLike","className":"CategoryTheory.Limits.PreservesLimit"},{"typeNames":["CompHausLike"],"name":"CompHausLike.instHasPullbacksOfHasExplicitPullbacks","className":"CategoryTheory.Limits.HasLimitsOfShape"},{"typeNames":[],"name":"CompHausLike.instHasExplicitPullbacksOfInclusionsOfHasExplicitPullbacks","className":"CompHausLike.HasExplicitPullbacksOfInclusions"},{"typeNames":["CompHausLike"],"name":"CompHausLike.instHasPullbacksOfInclusionsOfHasExplicitPullbacksOfInclusions","className":"CategoryTheory.HasPullbacksOfInclusions"},{"typeNames":["CompHausLike.compHausLikeToTop"],"name":"CompHausLike.instPreservesPullbacksOfInclusionsTopCatCompHausLikeToTopOfHasExplicitPullbacksOfInclusions","className":"CategoryTheory.PreservesPullbacksOfInclusions"},{"typeNames":["CompHausLike"],"name":"CompHausLike.instFinitaryExtensiveOfHasExplicitPullbacksOfInclusions","className":"CategoryTheory.FinitaryExtensive"}],"imports":["Init","Mathlib.CategoryTheory.Extensive","Mathlib.CategoryTheory.Limits.Preserves.Finite","Mathlib.Topology.Category.CompHausLike.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L350-L354","name":"CompHausLike.isTerminalPUnit","line":350,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.isTerminalPUnit","doc":"A one-element space is terminal in `CompHaus` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.isTerminalPUnit\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">isTerminalPUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">CompHausLike.HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">CompHausLike.of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L337-L341","name":"CompHausLike.finitaryExtensive","line":337,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finitaryExtensive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finitaryExtensive\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finitaryExtensive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hP' : <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#OpenEmbedding\">OpenEmbedding</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Extensive.html#CategoryTheory.FinitaryExtensive\">CategoryTheory.FinitaryExtensive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L334-L335","name":"CompHausLike.instFinitaryExtensiveOfHasExplicitPullbacksOfInclusions","line":334,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instFinitaryExtensiveOfHasExplicitPullbacksOfInclusions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instFinitaryExtensiveOfHasExplicitPullbacksOfInclusions\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instFinitaryExtensiveOfHasExplicitPullbacksOfInclusions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions\">CompHausLike.HasExplicitPullbacksOfInclusions</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Extensive.html#CategoryTheory.FinitaryExtensive\">CategoryTheory.FinitaryExtensive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L328-L332","name":"CompHausLike.instPreservesPullbacksOfInclusionsTopCatCompHausLikeToTopOfHasExplicitPullbacksOfInclusions","line":328,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesPullbacksOfInclusionsTopCatCompHausLikeToTopOfHasExplicitPullbacksOfInclusions","doc":"The functor to `TopCat` preserves pullbacks of inclusions if they exist. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesPullbacksOfInclusionsTopCatCompHausLikeToTopOfHasExplicitPullbacksOfInclusions\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instPreservesPullbacksOfInclusionsTopCatCompHausLikeToTopOfHasExplicitPullbacksOfInclusions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions\">CompHausLike.HasExplicitPullbacksOfInclusions</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Extensive.html#CategoryTheory.PreservesPullbacksOfInclusions\">CategoryTheory.PreservesPullbacksOfInclusions</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.compHausLikeToTop\">CompHausLike.compHausLikeToTop</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L318-L325","name":"CompHausLike.hasPullbacksOfInclusions","line":318,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.hasPullbacksOfInclusions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.hasPullbacksOfInclusions\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">hasPullbacksOfInclusions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hP' : <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#OpenEmbedding\">OpenEmbedding</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions\">CompHausLike.HasExplicitPullbacksOfInclusions</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L315-L316","name":"CompHausLike.instHasPullbacksOfInclusionsOfHasExplicitPullbacksOfInclusions","line":315,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasPullbacksOfInclusionsOfHasExplicitPullbacksOfInclusions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasPullbacksOfInclusionsOfHasExplicitPullbacksOfInclusions\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instHasPullbacksOfInclusionsOfHasExplicitPullbacksOfInclusions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions\">CompHausLike.HasExplicitPullbacksOfInclusions</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Extensive.html#CategoryTheory.HasPullbacksOfInclusions\">CategoryTheory.HasPullbacksOfInclusions</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L305-L307","name":"CompHausLike.instHasExplicitPullbacksOfInclusionsOfHasExplicitPullbacks","line":305,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasExplicitPullbacksOfInclusionsOfHasExplicitPullbacks","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasExplicitPullbacksOfInclusionsOfHasExplicitPullbacks\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instHasExplicitPullbacksOfInclusionsOfHasExplicitPullbacks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">CompHausLike.HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions\">CompHausLike.HasExplicitPullbacksOfInclusions</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L301-L301","name":"CompHausLike.HasExplicitPullbacksOfInclusions.hasProp","line":301,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions.hasProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions.hasProp\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitPullbacksOfInclusions</span>.<span class=\"name\">hasProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions\">CompHausLike.HasExplicitPullbacksOfInclusions</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.coprod\">⨿</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">CategoryTheory.Limits.coprod.inl</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L300-L300","name":"CompHausLike.HasExplicitPullbacksOfInclusions.mk","line":300,"kind":"ctor","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions.mk\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitPullbacksOfInclusions</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hasProp : <span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.coprod\">⨿</a> <span class=\"fn\">Y</span></span></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">CategoryTheory.Limits.coprod.inl</span> <span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions\">CompHausLike.HasExplicitPullbacksOfInclusions</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L300-L301","name":"CompHausLike.HasExplicitPullbacksOfInclusions","line":300,"kind":"class","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions","doc":"A typeclass describing the property that explicit pullbacks along inclusion maps into disjoint\nunions is stable under the property `P`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacksOfInclusions\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitPullbacksOfInclusions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L292-L293","name":"CompHausLike.instHasPullbacksOfHasExplicitPullbacks","line":292,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasPullbacksOfHasExplicitPullbacks","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasPullbacksOfHasExplicitPullbacks\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instHasPullbacksOfHasExplicitPullbacks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">CompHausLike.HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/HasPullback.html#CategoryTheory.Limits.HasPullbacks\">CategoryTheory.Limits.HasPullbacks</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L288-L288","name":"CompHausLike.HasExplicitPullbacks.hasProp","line":288,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks.hasProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks.hasProp\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitPullbacks</span>.<span class=\"name\">hasProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">CompHausLike.HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L287-L287","name":"CompHausLike.HasExplicitPullbacks.mk","line":287,"kind":"ctor","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks.mk\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitPullbacks</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hasProp : <span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">CompHausLike.HasExplicitPullbacks</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L287-L288","name":"CompHausLike.HasExplicitPullbacks","line":287,"kind":"class","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks","doc":"A typeclass describing the property that forming all explicit pullbacks is stable under the\nproperty `P`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitPullbacks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L275-L280","name":"CompHausLike.instPreservesLimitWalkingCospanCospanToCompHausLike","line":275,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesLimitWalkingCospanCospanToCompHausLike","doc":"The functor to another `CompHausLike` preserves pullbacks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesLimitWalkingCospanCospanToCompHausLike\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instPreservesLimitWalkingCospanCospanToCompHausLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P' : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><span class=\"fn\">X</span>.toTop</span></span> → <span class=\"fn\"><span class=\"fn\">P'</span> <span class=\"fn\"><span class=\"fn\">X</span>.toTop</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimit\">CategoryTheory.Limits.PreservesLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/Cospan.html#CategoryTheory.Limits.cospan\">CategoryTheory.Limits.cospan</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toCompHausLike\">CompHausLike.toCompHausLike</a> <span class=\"fn\">h</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L271-L272","name":"CompHausLike.instPreservesLimitTopCatWalkingCospanCospanCompHausLikeToTop","line":271,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesLimitTopCatWalkingCospanCospanCompHausLikeToTop","doc":"The functor to `TopCat` preserves pullbacks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesLimitTopCatWalkingCospanCospanCompHausLikeToTop\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instPreservesLimitTopCatWalkingCospanCospanCompHausLikeToTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimit\">CategoryTheory.Limits.PreservesLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/Cospan.html#CategoryTheory.Limits.cospan\">CategoryTheory.Limits.cospan</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.compHausLikeToTop\">CompHausLike.compHausLikeToTop</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L264-L268","name":"CompHausLike.instCreatesLimitTopCatWalkingCospanCospanCompHausLikeToTop","line":264,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instCreatesLimitTopCatWalkingCospanCospanCompHausLikeToTop","doc":"The functor to `TopCat` creates pullbacks if they exist. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instCreatesLimitTopCatWalkingCospanCospanCompHausLikeToTop\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instCreatesLimitTopCatWalkingCospanCospanCompHausLikeToTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Creates.html#CategoryTheory.CreatesLimit\">CategoryTheory.CreatesLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/Cospan.html#CategoryTheory.Limits.cospan\">CategoryTheory.Limits.cospan</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.compHausLikeToTop\">CompHausLike.compHausLikeToTop</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L260-L261","name":"CompHausLike.instHasLimitWalkingCospanCospan","line":260,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasLimitWalkingCospanCospan","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasLimitWalkingCospanCospan\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instHasLimitWalkingCospanCospan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimit\">CategoryTheory.Limits.HasLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/Cospan.html#CategoryTheory.Limits.cospan\">CategoryTheory.Limits.cospan</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L253-L258","name":"CompHausLike.pullback.isLimit","line":253,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.isLimit","doc":"The explicit pullback cone is a limit cone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.isLimit\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">isLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.cone\">CompHausLike.pullback.cone</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L252-L252","name":"CompHausLike.pullback.isLimit_lift","line":252,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.isLimit_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.isLimit_lift\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">isLimit_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/PullbackCone.html#CategoryTheory.Limits.PullbackCone\">CategoryTheory.Limits.PullbackCone</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.isLimit\">CompHausLike.pullback.isLimit</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span>.lift</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift\">CompHausLike.pullback.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\"><span class=\"fn\">s</span>.fst</span> <span class=\"fn\"><span class=\"fn\">s</span>.snd</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L246-L247","name":"CompHausLike.pullback.cone","line":246,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.cone","doc":"The pullback cone whose cone point is the explicit pullback.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.cone\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">cone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/PullbackCone.html#CategoryTheory.Limits.PullbackCone\">CategoryTheory.Limits.PullbackCone</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L245-L245","name":"CompHausLike.pullback.cone_π","line":245,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.cone_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.cone_π\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">cone_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.cone\">CompHausLike.pullback.cone</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span>.π</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{\n    <span class=\"fn\">app</span> := <span class=\"fn\">fun (<span class=\"fn\">j</span> : <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/Cospan.html#CategoryTheory.Limits.WalkingCospan\">CategoryTheory.Limits.WalkingCospan</a>) =&gt;\n      <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.rec\">Option.rec</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst\">CompHausLike.pullback.fst</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">f</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">val</span> : <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair\">CategoryTheory.Limits.WalkingPair</a>) =&gt;\n          <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair.rec\">CategoryTheory.Limits.WalkingPair.rec</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst\">CompHausLike.pullback.fst</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.snd\">CompHausLike.pullback.snd</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">val</span></span></span>)</span>\n        <span class=\"fn\">j</span></span></span>,\n    <span class=\"fn\">naturality</span> := <span class=\"fn\">⋯</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L245-L245","name":"CompHausLike.pullback.cone_pt","line":245,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.cone_pt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.cone_pt\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">cone_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.cone\">CompHausLike.pullback.cone</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span>.pt</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback\">CompHausLike.pullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L232-L240","name":"CompHausLike.pullback.hom_ext","line":232,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.hom_ext\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback\">CompHausLike.pullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback\">CompHausLike.pullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfst : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst\">CompHausLike.pullback.fst</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst\">CompHausLike.pullback.fst</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsnd : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.snd\">CompHausLike.pullback.snd</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.snd\">CompHausLike.pullback.snd</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L229-L230","name":"CompHausLike.pullback.lift_snd","line":229,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift_snd\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">lift_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">b</span> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift\">CompHausLike.pullback.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.snd\">CompHausLike.pullback.snd</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L228-L228","name":"CompHausLike.pullback.lift_snd_assoc","line":228,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift_snd_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift_snd_assoc\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">lift_snd_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">Z✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">Z✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">b</span> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift\">CompHausLike.pullback.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">w</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.snd\">CompHausLike.pullback.snd</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">b</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L225-L226","name":"CompHausLike.pullback.lift_fst","line":225,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift_fst\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">lift_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">b</span> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift\">CompHausLike.pullback.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst\">CompHausLike.pullback.fst</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L224-L224","name":"CompHausLike.pullback.lift_fst_assoc","line":224,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift_fst_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift_fst_assoc\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">lift_fst_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">Z✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">Z✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">b</span> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift\">CompHausLike.pullback.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">w</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst\">CompHausLike.pullback.fst</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L216-L222","name":"CompHausLike.pullback.lift","line":216,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift","doc":"Construct a morphism to the explicit pullback given morphisms to the factors\nwhich are compatible with the maps to the base.\nThis is essentially the universal property of the pullback.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.lift\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">b</span> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback\">CompHausLike.pullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L208-L209","name":"CompHausLike.pullback.condition","line":208,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.condition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.condition\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">condition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst\">CompHausLike.pullback.fst</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.snd\">CompHausLike.pullback.snd</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L207-L207","name":"CompHausLike.pullback.condition_assoc","line":207,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.condition_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.condition_assoc\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">condition_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst\">CompHausLike.pullback.fst</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.snd\">CompHausLike.pullback.snd</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L203-L205","name":"CompHausLike.pullback.snd","line":203,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.snd","doc":"The projection from the pullback to the second component.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.snd\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback\">CompHausLike.pullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L196-L198","name":"CompHausLike.pullback.fst","line":196,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst","doc":"The projection from the pullback to the first component.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback.fst\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span>.<span class=\"name\">fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback\">CompHausLike.pullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L186-L191","name":"CompHausLike.pullback","line":186,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback","doc":"The pullback of two morphisms `f,g` in `CompHaus`, constructed explicitly as the set of\npairs `(x,y)` such that `f x = g y`, with the topology induced by the product.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.pullback\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">pullback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\">CompHausLike.HasExplicitPullback</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L178-L178","name":"CompHausLike.HasExplicitPullback","line":178,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback","doc":"A typeclass describing the property that an explicit pullback is stable under the property `P`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullback\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitPullback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L162-L167","name":"CompHausLike.instPreservesFiniteCoproductsToCompHausLike","line":162,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesFiniteCoproductsToCompHausLike","doc":"The functor to another `CompHausLike` preserves finite coproducts if they exist. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesFiniteCoproductsToCompHausLike\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instPreservesFiniteCoproductsToCompHausLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P' : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><span class=\"fn\">X</span>.toTop</span></span> → <span class=\"fn\"><span class=\"fn\">P'</span> <span class=\"fn\"><span class=\"fn\">X</span>.toTop</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteCoproducts\">CategoryTheory.Limits.PreservesFiniteCoproducts</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toCompHausLike\">CompHausLike.toCompHausLike</a> <span class=\"fn\">h</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L153-L159","name":"CompHausLike.instPreservesFiniteCoproductsTopCatCompHausLikeToTopOfHasExplicitFiniteCoproducts","line":153,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesFiniteCoproductsTopCatCompHausLikeToTopOfHasExplicitFiniteCoproducts","doc":"The functor to `TopCat` preserves finite coproducts if they exist. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instPreservesFiniteCoproductsTopCatCompHausLikeToTopOfHasExplicitFiniteCoproducts\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instPreservesFiniteCoproductsTopCatCompHausLikeToTopOfHasExplicitFiniteCoproducts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteCoproducts\">CategoryTheory.Limits.PreservesFiniteCoproducts</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.compHausLikeToTop\">CompHausLike.compHausLikeToTop</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L143-L150","name":"CompHausLike.Sigma.openEmbedding_ι","line":143,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.Sigma.openEmbedding_ι","doc":"The inclusion maps into the abstract finite coproduct are open embeddings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.Sigma.openEmbedding_ι\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">Sigma</span>.<span class=\"name\">openEmbedding_ι</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#OpenEmbedding\">OpenEmbedding</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Sigma.ι\">CategoryTheory.Limits.Sigma.ι</a> <span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L138-L140","name":"CompHausLike.finiteCoproduct.openEmbedding_ι","line":138,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.openEmbedding_ι","doc":"The inclusion maps into the explicit finite coproduct are open embeddings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.openEmbedding_ι\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">openEmbedding_ι</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#OpenEmbedding\">OpenEmbedding</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι\">CompHausLike.finiteCoproduct.ι</a> <span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L127-L131","name":"CompHausLike.instHasFiniteCoproductsOfHasExplicitFiniteCoproducts","line":127,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasFiniteCoproductsOfHasExplicitFiniteCoproducts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasFiniteCoproductsOfHasExplicitFiniteCoproducts\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instHasFiniteCoproductsOfHasExplicitFiniteCoproducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/FiniteProducts.html#CategoryTheory.Limits.HasFiniteCoproducts\">CategoryTheory.Limits.HasFiniteCoproducts</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L123-L125","name":"CompHausLike.instHasColimitsOfShapeDiscreteOfHasExplicitFiniteCoproductsOfFinite","line":123,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasColimitsOfShapeDiscreteOfHasExplicitFiniteCoproductsOfFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasColimitsOfShapeDiscreteOfHasExplicitFiniteCoproductsOfFinite\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instHasColimitsOfShapeDiscreteOfHasExplicitFiniteCoproductsOfFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasColimitsOfShape\">CategoryTheory.Limits.HasColimitsOfShape</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L112-L112","name":"CompHausLike.HasExplicitFiniteCoproducts.hasProp","line":112,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts.hasProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts.hasProp\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitFiniteCoproducts</span>.<span class=\"name\">hasProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L111-L111","name":"CompHausLike.HasExplicitFiniteCoproducts.mk","line":111,"kind":"ctor","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts.mk\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitFiniteCoproducts</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hasProp : <span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>] (<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">CompHausLike.HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L111-L112","name":"CompHausLike.HasExplicitFiniteCoproducts","line":111,"kind":"class","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts","doc":"A typeclass describing the property that forming all finite disjoint unions is stable under the\nproperty `P`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitFiniteCoproducts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L103-L104","name":"CompHausLike.instHasCoproduct","line":103,"kind":"instance","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasCoproduct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.instHasCoproduct\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">instHasCoproduct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasCoproduct\">CategoryTheory.Limits.HasCoproduct</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L97-L101","name":"CompHausLike.finiteCoproduct.ι_desc_apply","line":97,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_desc_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_desc_apply\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">ι_desc_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>)</span></span>)</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.desc\">CompHausLike.finiteCoproduct.desc</a> <span class=\"fn\">X</span> <span class=\"fn\">π</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι\">CompHausLike.finiteCoproduct.ι</a> <span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L94-L95","name":"CompHausLike.finiteCoproduct.ι_jointly_surjective","line":94,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_jointly_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_jointly_surjective\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">ι_jointly_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct\">CompHausLike.finiteCoproduct</a> <span class=\"fn\">X</span></span>)</span>.toTop</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">r</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span>.toTop</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι\">CompHausLike.finiteCoproduct.ι</a> <span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">r</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L90-L92","name":"CompHausLike.finiteCoproduct.ι_injective","line":90,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_injective\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">ι_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι\">CompHausLike.finiteCoproduct.ι</a> <span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L83-L88","name":"CompHausLike.finiteCoproduct.isColimit","line":83,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.isColimit","doc":"The explicit finite coproduct cocone is a colimit cocone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.isColimit\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">isColimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.cofan\">CompHausLike.finiteCoproduct.cofan</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L79-L80","name":"CompHausLike.finiteCoproduct.cofan","line":79,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.cofan","doc":"The coproduct cocone associated to the explicit finite coproduct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.cofan\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">cofan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Cofan\">CategoryTheory.Limits.Cofan</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L71-L76","name":"CompHausLike.finiteCoproduct.hom_ext","line":71,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.hom_ext\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct\">CompHausLike.finiteCoproduct</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct\">CompHausLike.finiteCoproduct</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι\">CompHausLike.finiteCoproduct.ι</a> <span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι\">CompHausLike.finiteCoproduct.ι</a> <span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">g</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L68-L69","name":"CompHausLike.finiteCoproduct.ι_desc","line":68,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_desc\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">ι_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι\">CompHausLike.finiteCoproduct.ι</a> <span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.desc\">CompHausLike.finiteCoproduct.desc</a> <span class=\"fn\">X</span> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L67-L67","name":"CompHausLike.finiteCoproduct.ι_desc_assoc","line":67,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_desc_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι_desc_assoc\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">ι_desc_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι\">CompHausLike.finiteCoproduct.ι</a> <span class=\"fn\">X</span> <span class=\"fn\">a</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.desc\">CompHausLike.finiteCoproduct.desc</a> <span class=\"fn\">X</span> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L60-L65","name":"CompHausLike.finiteCoproduct.desc","line":60,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.desc","doc":"To construct a morphism from the explicit finite coproduct, it suffices to\nspecify a morphism from each of its factors.\nThis is essentially the universal property of the coproduct.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.desc\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct\">CompHausLike.finiteCoproduct</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L51-L53","name":"CompHausLike.finiteCoproduct.ι","line":51,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι","doc":"The inclusion of one of the factors into the explicit finite coproduct.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct.ι\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span>.<span class=\"name\">ι</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct\">CompHausLike.finiteCoproduct</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L46-L46","name":"CompHausLike.finiteCoproduct","line":46,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct","doc":"The coproduct of a finite family of objects in `CompHaus`, constructed as the disjoint\nunion with its usual topology.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">finiteCoproduct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\">CompHausLike.HasExplicitFiniteCoproduct</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/CompHausLike/Limits.lean#L38-L38","name":"CompHausLike.HasExplicitFiniteCoproduct","line":38,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct","doc":"A typeclass describing the property that forming the disjoint union is stable under the\nproperty `P`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproduct\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">HasExplicitFiniteCoproduct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}