{"name":"Mathlib.Topology.Category.LightProfinite.AsLimit","instances":[],"imports":["Init","Mathlib.Topology.Category.LightProfinite.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L133-L136","name":"LightProfinite.surjective_transitionMapLE","line":133,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.surjective_transitionMapLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.surjective_transitionMapLE\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">surjective_transitionMapLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.transitionMapLE</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L129-L131","name":"LightProfinite.surjective_transitionMap","line":129,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.surjective_transitionMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.surjective_transitionMap\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">surjective_transitionMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.transitionMap</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L124-L127","name":"LightProfinite.proj_comp_transitionMapLE'","line":124,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_comp_transitionMapLE'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_comp_transitionMapLE'\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">proj_comp_transitionMapLE'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.transitionMapLE</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">m</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L120-L122","name":"LightProfinite.proj_comp_transitionMapLE","line":120,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_comp_transitionMapLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_comp_transitionMapLE\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">proj_comp_transitionMapLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.diagram</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">CategoryTheory.homOfLE</a> <span class=\"fn\">h</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L116-L118","name":"LightProfinite.proj_comp_transitionMap'","line":116,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_comp_transitionMap'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_comp_transitionMap'\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">proj_comp_transitionMap'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.transitionMap</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L112-L114","name":"LightProfinite.proj_comp_transitionMap","line":112,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_comp_transitionMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_comp_transitionMap\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">proj_comp_transitionMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.diagram</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">CategoryTheory.homOfLE</a> <span class=\"fn\">⋯</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L109-L110","name":"LightProfinite.transitionMapLE","line":109,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.transitionMapLE","doc":"The transition map from `S_m` to `S_n` in `S.diagram`, when `m ≤ n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.transitionMapLE\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">transitionMapLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.component</span> <span class=\"fn\">m</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.component</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L105-L106","name":"LightProfinite.transitionMap","line":105,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.transitionMap","doc":"The transition map from `S_{n+1}` to `S_n` in `S.diagram`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.transitionMap\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">transitionMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.component</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.component</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L102-L102","name":"LightProfinite.component","line":102,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.component","doc":"An abbreviation for the `n`th component of `S.diagram`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.component\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">component</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L96-L99","name":"LightProfinite.proj_surjective","line":96,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj_surjective\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">proj_surjective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L88-L94","name":"LightProfinite.lightToProfinite_map_proj_eq","line":88,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.lightToProfinite_map_proj_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.lightToProfinite_map_proj_eq\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">lightToProfinite_map_proj_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#lightToProfinite\">lightToProfinite</a>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.proj</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#lightToProfinite\">lightToProfinite</a>.obj</span> <span class=\"fn\">S</span></span>)</span>.asLimitCone</span>.π</span>.app</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Countable.html#CategoryTheory.Limits.sequentialFunctor\">CategoryTheory.Limits.sequentialFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/DiscreteQuotient.html#DiscreteQuotient\">DiscreteQuotient</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#lightToProfinite\">lightToProfinite</a>.obj</span> <span class=\"fn\">S</span></span>)</span>.toTop</span></span></span>)</span></span>)</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L80-L86","name":"LightProfinite.map_liftedLimit","line":80,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.map_liftedLimit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.map_liftedLimit\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">map_liftedLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_4, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_5, u_2}</a>      <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_6, u_3}</a>      <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Creates.html#CategoryTheory.CreatesLimit\">CategoryTheory.CreatesLimit</a> <span class=\"fn\">K</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span>.comp</span> <span class=\"fn\">F</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Creates.html#CategoryTheory.liftedLimitMapsToOriginal\">CategoryTheory.liftedLimitMapsToOriginal</a> <span class=\"fn\">t</span></span>)</span>.inv</span>.hom</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Creates.html#CategoryTheory.liftLimit\">CategoryTheory.liftLimit</a> <span class=\"fn\">t</span></span>)</span>.π</span>.app</span> <span class=\"fn\">n</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.π</span>.app</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L78-L78","name":"LightProfinite.proj","line":78,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj","doc":"The projection from `S` to the `n`th component of `S.diagram`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.proj\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.diagram</span>.obj</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L75-L75","name":"LightProfinite.lim","line":75,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.lim","doc":"A bundled version of `S.asLimitCone` and `S.asLimit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.lim\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">lim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.LimitCone\">CategoryTheory.Limits.LimitCone</a> <span class=\"fn\"><span class=\"fn\">S</span>.diagram</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L70-L72","name":"LightProfinite.asLimit","line":70,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimit","doc":"`S.asLimitCone` is indeed a limit cone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimit\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">asLimit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\"><span class=\"fn\">S</span>.asLimitCone</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L62-L67","name":"LightProfinite.asLimitCone","line":62,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitCone","doc":"A cone over `S.diagram` whose cone point is `S`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitCone\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">asLimitCone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\"><span class=\"fn\">S</span>.diagram</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L56-L59","name":"LightProfinite.asLimitAux","line":56,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitAux","doc":"`S.asLimitConeAux` is indeed a limit cone.\n(Auxiliary definition, use `S.asLimit` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitAux\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">asLimitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\"><span class=\"fn\">S</span>.asLimitConeAux</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L47-L50","name":"LightProfinite.isoMapCone","line":47,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.isoMapCone","doc":"An auxiliary isomorphism of cones used to prove that `S.asLimitConeAux` is a limit cone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.isoMapCone\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">isoMapCone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#lightToProfinite\">lightToProfinite</a>.mapCone</span> <span class=\"fn\"><span class=\"fn\">S</span>.asLimitConeAux</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.toLightDiagram</span>.cone</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L41-L44","name":"LightProfinite.asLimitConeAux","line":41,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitConeAux","doc":"A cone over `S.diagram` whose cone point is isomorphic to `S`.\n(Auxiliary definition, use `S.asLimitCone` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitConeAux\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">asLimitConeAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\"><span class=\"fn\">S</span>.diagram</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L35-L35","name":"LightProfinite.diagram","line":35,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.diagram","doc":"An abbreviation for `S.fintypeDiagram ⋙ FintypeCat.toProfinite`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.diagram\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">diagram</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/AsLimit.lean#L32-L32","name":"LightProfinite.fintypeDiagram","line":32,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.fintypeDiagram","doc":"The functor `ℕᵒᵖ ⥤ FintypeCat` whose limit is isomorphic to `S`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.fintypeDiagram\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">fintypeDiagram</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></span></div></div>"}]}