{"name":"Mathlib.Topology.Category.LightProfinite.EffectiveEpi","instances":[{"typeNames":["LightProfinite"],"name":"LightProfinite.instPreregular","className":"CategoryTheory.Preregular"},{"typeNames":["LightProfinite"],"name":"LightProfinite.instPrecoherent","className":"CategoryTheory.Precoherent"}],"imports":["Init","Mathlib.Topology.Category.LightProfinite.Limits","Mathlib.CategoryTheory.Sites.Coherent.Comparison"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/EffectiveEpi.lean#L71-L71","name":"LightProfinite.instPrecoherent","line":71,"kind":"instance","docLink":"./Mathlib/Topology/Category/LightProfinite/EffectiveEpi.html#LightProfinite.instPrecoherent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/EffectiveEpi.html#LightProfinite.instPrecoherent\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">instPrecoherent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/EffectiveEpi.lean#L61-L68","name":"LightProfinite.instPreregular","line":61,"kind":"instance","docLink":"./Mathlib/Topology/Category/LightProfinite/EffectiveEpi.html#LightProfinite.instPreregular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/EffectiveEpi.html#LightProfinite.instPreregular\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">instPreregular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.Preregular\">CategoryTheory.Preregular</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/EffectiveEpi.lean#L55-L59","name":"LightProfinite.effectiveEpi_iff_surjective","line":55,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/EffectiveEpi.html#LightProfinite.effectiveEpi_iff_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/EffectiveEpi.html#LightProfinite.effectiveEpi_iff_surjective\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">effectiveEpi_iff_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/LightProfinite/EffectiveEpi.lean#L37-L53","name":"LightProfinite.EffectiveEpi.struct","line":37,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/EffectiveEpi.html#LightProfinite.EffectiveEpi.struct","doc":"Implementation: if `π` is a surjective morphism in `LightProfinite`, then it is an effective epi.\nThe theorem `LightProfinite.effectiveEpi_iff_surjective` should be used instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/EffectiveEpi.html#LightProfinite.EffectiveEpi.struct\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">EffectiveEpi</span>.<span class=\"name\">struct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(π : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">π</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpiStruct\">CategoryTheory.EffectiveEpiStruct</a> <span class=\"fn\">π</span></span></div></div>"}]}