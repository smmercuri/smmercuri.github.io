{"name":"Mathlib.Topology.Category.LightProfinite.IsLight","instances":[{"typeNames":["Profinite.of"],"name":"Profinite.instIsLightProd","className":"Profinite.IsLight"},{"typeNames":["DiscreteQuotient"],"name":"Profinite.instCountableDiscreteQuotientOfIsLight","className":"Countable"},{"typeNames":["LightProfinite.toProfinite"],"name":"LightProfinite.instIsLightToProfinite","className":"Profinite.IsLight"},{"typeNames":["Prefunctor.obj"],"name":"LightProfinite.instIsLightObjLightProfiniteToQuiverToCategoryStructInstCategoryLightProfiniteProfiniteCategoryToPrefunctorLightToProfinite","className":"Profinite.IsLight"},{"typeNames":["CategoryTheory.Limits.IsLimit.lift"],"name":"Profinite.instIsIsoProfiniteMaxCategoryPtOppositeNatOppositeSmallCategoryToPreorderToPartialOrderStrictOrderedSemiringCompFintypeCatInstCategoryFintypeCatLightProfiniteDiagramOfHomToProfiniteLightProfiniteConeOfHomLimitConeLiftLimitConeIsLimit","className":"CategoryTheory.IsIso"}],"imports":["Init","Mathlib.CategoryTheory.Limits.Shapes.Countable","Mathlib.Topology.Category.LightProfinite.Basic","Mathlib.Topology.Category.Profinite.AsLimit","Mathlib.Topology.Category.Profinite.CofilteredLimit","Mathlib.Topology.ClopenBox"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L218-L220","name":"Profinite.isLight_of_mono","line":218,"kind":"theorem","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.isLight_of_mono","doc":"`lightProfiniteOfMono` phrased in terms of `Profinite.IsLight`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.isLight_of_mono\"><span class=\"name\">Profinite</span>.<span class=\"name\">isLight_of_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L214-L215","name":"Profinite.lightProfiniteOfMono","line":214,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteOfMono","doc":"Putting together all of the above, we get a `LightProfinite` whose underlying `Profinite` is `X`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteOfMono\"><span class=\"name\">Profinite</span>.<span class=\"name\">lightProfiniteOfMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.toProfinite\">LightProfinite.toProfinite</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L206-L209","name":"Profinite.lightProfiniteIsLimitOfMono","line":206,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteIsLimitOfMono","doc":"When `f` is a monomorphism the cone `lightProfiniteConeOfHom` is limiting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteIsLimitOfMono\"><span class=\"name\">Profinite</span>.<span class=\"name\">lightProfiniteIsLimitOfMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.toProfinite\">LightProfinite.toProfinite</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteConeOfHom\">Profinite.lightProfiniteConeOfHom</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L161-L201","name":"Profinite.instIsIsoProfiniteMaxCategoryPtOppositeNatOppositeSmallCategoryToPreorderToPartialOrderStrictOrderedSemiringCompFintypeCatInstCategoryFintypeCatLightProfiniteDiagramOfHomToProfiniteLightProfiniteConeOfHomLimitConeLiftLimitConeIsLimit","line":161,"kind":"instance","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.instIsIsoProfiniteMaxCategoryPtOppositeNatOppositeSmallCategoryToPreorderToPartialOrderStrictOrderedSemiringCompFintypeCatInstCategoryFintypeCatLightProfiniteDiagramOfHomToProfiniteLightProfiniteConeOfHomLimitConeLiftLimitConeIsLimit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.instIsIsoProfiniteMaxCategoryPtOppositeNatOppositeSmallCategoryToPreorderToPartialOrderStrictOrderedSemiringCompFintypeCatInstCategoryFintypeCatLightProfiniteDiagramOfHomToProfiniteLightProfiniteConeOfHomLimitConeLiftLimitConeIsLimit\"><span class=\"name\">Profinite</span>.<span class=\"name\">instIsIsoProfiniteMaxCategoryPtOppositeNatOppositeSmallCategoryToPreorderToPartialOrderStrictOrderedSemiringCompFintypeCatInstCategoryFintypeCatLightProfiniteDiagramOfHomToProfiniteLightProfiniteConeOfHomLimitConeLiftLimitConeIsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.toProfinite\">LightProfinite.toProfinite</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.limitConeIsLimit\">Profinite.limitConeIsLimit</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteDiagramOfHom\">Profinite.lightProfiniteDiagramOfHom</a> <span class=\"fn\">f</span></span>)</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite\">FintypeCat.toProfinite</a></span>)</span></span>)</span>.lift</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteConeOfHom\">Profinite.lightProfiniteConeOfHom</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L146-L159","name":"Profinite.lightProfiniteConeOfHom","line":146,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteConeOfHom","doc":"The cone on `lightProfiniteDiagramOfHom` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteConeOfHom\"><span class=\"name\">Profinite</span>.<span class=\"name\">lightProfiniteConeOfHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.toProfinite\">LightProfinite.toProfinite</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteDiagramOfHom\">Profinite.lightProfiniteDiagramOfHom</a> <span class=\"fn\">f</span></span>)</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite\">FintypeCat.toProfinite</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L132-L142","name":"Profinite.lightProfiniteConeOfHom_π_app","line":132,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteConeOfHom_π_app","doc":"An auxiliary definition for `lightProfiniteConeOfHom`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteConeOfHom_π_app\"><span class=\"name\">Profinite</span>.<span class=\"name\">lightProfiniteConeOfHom_π_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.toProfinite\">LightProfinite.toProfinite</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteDiagramOfHom\">Profinite.lightProfiniteDiagramOfHom</a> <span class=\"fn\">f</span></span>)</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite\">FintypeCat.toProfinite</a></span>)</span>.obj</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L126-L129","name":"Profinite.lightProfiniteConeOfHom_π_app'","line":126,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteConeOfHom_π_app'","doc":"An auxiliary definition to prove continuity in `lightProfiniteConeOfHom_π_app`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteConeOfHom_π_app'\"><span class=\"name\">Profinite</span>.<span class=\"name\">lightProfiniteConeOfHom_π_app'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.toProfinite\">LightProfinite.toProfinite</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.cone</span>.π</span>.app</span> <span class=\"fn\">n</span></span>)</span></span>)</span></span></span>)</span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L100-L123","name":"Profinite.lightProfiniteDiagramOfHom","line":100,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteDiagramOfHom","doc":"The image of `f` in the diagram of `Y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.lightProfiniteDiagramOfHom\"><span class=\"name\">Profinite</span>.<span class=\"name\">lightProfiniteDiagramOfHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.toProfinite\">LightProfinite.toProfinite</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L83-L84","name":"LightProfinite.instIsLightObjLightProfiniteToQuiverToCategoryStructInstCategoryLightProfiniteProfiniteCategoryToPrefunctorLightToProfinite","line":83,"kind":"instance","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#LightProfinite.instIsLightObjLightProfiniteToQuiverToCategoryStructInstCategoryLightProfiniteProfiniteCategoryToPrefunctorLightToProfinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#LightProfinite.instIsLightObjLightProfiniteToQuiverToCategoryStructInstCategoryLightProfiniteProfiniteCategoryToPrefunctorLightToProfinite\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">instIsLightObjLightProfiniteToQuiverToCategoryStructInstCategoryLightProfiniteProfiniteCategoryToPrefunctorLightToProfinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.lightToProfinite\">LightProfinite.lightToProfinite</a>.obj</span> <span class=\"fn\">S</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L65-L81","name":"LightProfinite.instIsLightToProfinite","line":65,"kind":"instance","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#LightProfinite.instIsLightToProfinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#LightProfinite.instIsLightToProfinite\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">instIsLightToProfinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite.toProfinite\">LightProfinite.toProfinite</a> <span class=\"fn\">S</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L60-L63","name":"LightProfinite.ofIsLight","line":60,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#LightProfinite.ofIsLight","doc":"A profinite space which is light gives rise to a light profinite space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#LightProfinite.ofIsLight\"><span class=\"name\">LightProfinite</span>.<span class=\"name\">ofIsLight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L52-L53","name":"Profinite.instCountableDiscreteQuotientOfIsLight","line":52,"kind":"instance","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.instCountableDiscreteQuotientOfIsLight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.instCountableDiscreteQuotientOfIsLight\"><span class=\"name\">Profinite</span>.<span class=\"name\">instCountableDiscreteQuotientOfIsLight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/DiscreteQuotient.html#DiscreteQuotient\">DiscreteQuotient</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.toCompHaus</span>.toTop</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L48-L50","name":"Profinite.instIsLightProd","line":48,"kind":"instance","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.instIsLightProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.instIsLightProd\"><span class=\"name\">Profinite</span>.<span class=\"name\">instIsLightProd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.of\">Profinite.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span>.toTop</span></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L44-L44","name":"Profinite.IsLight.countable_clopens","line":44,"kind":"def","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight.countable_clopens","doc":"The set of clopens is countable "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight.countable_clopens\"><span class=\"name\">Profinite</span>.<span class=\"name\">IsLight</span>.<span class=\"name\">countable_clopens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Closeds.html#TopologicalSpace.Clopens\">TopologicalSpace.Clopens</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.toCompHaus</span>.toTop</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L42-L42","name":"Profinite.IsLight.mk","line":42,"kind":"ctor","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight.mk\"><span class=\"name\">Profinite</span>.<span class=\"name\">IsLight</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(countable_clopens : <span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Closeds.html#TopologicalSpace.Clopens\">TopologicalSpace.Clopens</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.toCompHaus</span>.toTop</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\">Profinite.IsLight</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Category/LightProfinite/IsLight.lean#L42-L44","name":"Profinite.IsLight","line":42,"kind":"class","docLink":"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight","doc":"A profinite space *is light* if it has countably many clopen subsets.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/LightProfinite/IsLight.html#Profinite.IsLight\"><span class=\"name\">Profinite</span>.<span class=\"name\">IsLight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}