{"name":"Mathlib.Topology.Category.Stonean.Basic","instances":[{"typeNames":["CategoryTheory.Bundled.α"],"name":"CompHaus.instExtremallyDisconnectedαTopologicalSpaceToTopTrueOfProjective","className":"ExtremallyDisconnected"},{"typeNames":["Stonean"],"name":"Stonean.instLargeCategory","className":"CategoryTheory.Category"},{"typeNames":["Stonean.toCompHaus"],"name":"Stonean.instFullCompHausToCompHaus","className":"CategoryTheory.Functor.Full"},{"typeNames":["Stonean.toCompHaus"],"name":"Stonean.instFaithfulCompHausToCompHaus","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["Stonean"],"name":"Stonean.instConcreteCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["Stonean","_builtin_typeu"],"name":"Stonean.instCoeSortType","className":"CoeSort"},{"typeNames":["Quiver.Hom","CoeSort.coe","CoeSort.coe"],"name":"Stonean.instFunLikeHomCoe","className":"DFunLike"},{"typeNames":["CoeSort.coe"],"name":"Stonean.instTopologicalSpace","className":"TopologicalSpace"},{"typeNames":["CoeSort.coe"],"name":"Stonean.instCompactSpaceCoe","className":"CompactSpace"},{"typeNames":["CoeSort.coe"],"name":"Stonean.instT2SpaceCoe","className":"T2Space"},{"typeNames":["CoeSort.coe"],"name":"Stonean.instExtremallyDisconnectedCoe","className":"ExtremallyDisconnected"},{"typeNames":["Stonean.toProfinite"],"name":"Stonean.instFullProfiniteToProfinite","className":"CategoryTheory.Functor.Full"},{"typeNames":["Stonean.toProfinite"],"name":"Stonean.instFaithfulProfiniteToProfinite","className":"CategoryTheory.Functor.Faithful"},{"typeNames":[],"name":"Stonean.instEpiCompHaus","className":"CategoryTheory.Epi"},{"typeNames":[],"name":"Stonean.instEpiOfCompHaus","className":"CategoryTheory.Epi"},{"typeNames":["Stonean.compHaus"],"name":"Stonean.instProjectiveCompHausCompHaus","className":"CategoryTheory.Projective"},{"typeNames":["Prefunctor.obj"],"name":"Stonean.instProjectiveProfiniteObjToProfinite","className":"CategoryTheory.Projective"},{"typeNames":[],"name":"Stonean.instProjective","className":"CategoryTheory.Projective"},{"typeNames":["CompHaus.presentation.π"],"name":"CompHaus.presentation.epi_π","className":"CategoryTheory.Epi"},{"typeNames":["Profinite.presentation.π"],"name":"Profinite.presentation.epi_π","className":"CategoryTheory.Epi"}],"imports":["Init","Mathlib.Topology.ExtremallyDisconnected","Mathlib.Topology.Category.CompHaus.Projective","Mathlib.Topology.Category.Profinite.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L380-L384","name":"Profinite.projective_of_extrDisc","line":380,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.projective_of_extrDisc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.projective_of_extrDisc\"><span class=\"name\">Profinite</span>.<span class=\"name\">projective_of_extrDisc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hX : <span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toTop</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L370-L377","name":"Profinite.lift_lifts","line":370,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift_lifts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift_lifts\"><span class=\"name\">Profinite</span>.<span class=\"name\">lift_lifts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.obj</span> <span class=\"fn\">Z</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift\">Profinite.lift</a> <span class=\"fn\">e</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L369-L369","name":"Profinite.lift_lifts_assoc","line":369,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift_lifts_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift_lifts_assoc\"><span class=\"name\">Profinite</span>.<span class=\"name\">lift_lifts_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.obj</span> <span class=\"fn\">Z✝</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift\">Profinite.lift</a> <span class=\"fn\">e</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">e</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L359-L366","name":"Profinite.lift","line":359,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift","doc":"```\n               X\n               |\n              (f)\n               |\n               \\/\n  Z ---(e)---> Y\n```\nIf `Z` is a Stonean space, `f : X ⟶ Y` an epi in `Profinite` and `e : Z ⟶ Y` is arbitrary,\nthen `lift e f` is a fixed (but arbitrary) lift of `e` to a morphism `Z ⟶ X`. It is\n`CompHaus.lift e f` as a morphism in `Profinite`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift\"><span class=\"name\">Profinite</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.obj</span> <span class=\"fn\">Z</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.obj</span> <span class=\"fn\">Z</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L339-L343","name":"Profinite.presentation.epi_π","line":339,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.epi_π","doc":"The morphism from `presentation X` to `X` is an epimorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.epi_π\"><span class=\"name\">Profinite</span>.<span class=\"name\">presentation</span>.<span class=\"name\">epi_π</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.π\">Profinite.presentation.π</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L334-L335","name":"Profinite.presentation.π","line":334,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.π","doc":"The morphism from `presentation X` to `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.π\"><span class=\"name\">Profinite</span>.<span class=\"name\">presentation</span>.<span class=\"name\">π</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.obj</span> <span class=\"fn\"><span class=\"fn\">X</span>.presentation</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L328-L330","name":"Profinite.presentation","line":328,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation","doc":"If `X` is profinite, `presentation X` is a Stonean space equipped with an epimorphism down to\n`X` (see `Profinite.presentation.π` and `Profinite.presentation.epi_π`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation\"><span class=\"name\">Profinite</span>.<span class=\"name\">presentation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L310-L319","name":"CompHaus.Gleason","line":310,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.Gleason","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.Gleason\"><span class=\"name\">CompHaus</span>.<span class=\"name\">Gleason</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toTop</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L307-L308","name":"CompHaus.lift_lifts","line":307,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift_lifts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift_lifts\"><span class=\"name\">CompHaus</span>.<span class=\"name\">lift_lifts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Z</span>.compHaus</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift\">CompHaus.lift</a> <span class=\"fn\">e</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L306-L306","name":"CompHaus.lift_lifts_assoc","line":306,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift_lifts_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift_lifts_assoc\"><span class=\"name\">CompHaus</span>.<span class=\"name\">lift_lifts_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Z✝</span>.compHaus</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift\">CompHaus.lift</a> <span class=\"fn\">e</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">e</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L302-L304","name":"CompHaus.lift","line":302,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift","doc":"```\n               X\n               |\n              (f)\n               |\n               \\/\n  Z ---(e)---> Y\n```\nIf `Z` is a Stonean space, `f : X ⟶ Y` an epi in `CompHaus` and `e : Z ⟶ Y` is arbitrary, then\n`lift e f` is a fixed (but arbitrary) lift of `e` to a morphism `Z ⟶ X`. It exists because\n`Z` is a projective object in `CompHaus`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift\"><span class=\"name\">CompHaus</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Z</span>.compHaus</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Z</span>.compHaus</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L285-L286","name":"CompHaus.presentation.epi_π","line":285,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.epi_π","doc":"The morphism from `presentation X` to `X` is an epimorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.epi_π\"><span class=\"name\">CompHaus</span>.<span class=\"name\">presentation</span>.<span class=\"name\">epi_π</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.π\">CompHaus.presentation.π</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L280-L281","name":"CompHaus.presentation.π","line":280,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.π","doc":"The morphism from `presentation X` to `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.π\"><span class=\"name\">CompHaus</span>.<span class=\"name\">presentation</span>.<span class=\"name\">π</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.presentation</span>.compHaus</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L265-L276","name":"CompHaus.presentation","line":265,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation","doc":"If `X` is compact Hausdorff, `presentation X` is a Stonean space equipped with an epimorphism\ndown to `X` (see `CompHaus.presentation.π` and `CompHaus.presentation.epi_π`). It is a\n\"constructive\" witness to the fact that `CompHaus` has enough projectives. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation\"><span class=\"name\">CompHaus</span>.<span class=\"name\">presentation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L247-L255","name":"Stonean.instProjective","line":247,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjective","doc":"Every Stonean space is projective in `Stonean`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjective\"><span class=\"name\">Stonean</span>.<span class=\"name\">instProjective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L236-L244","name":"Stonean.instProjectiveProfiniteObjToProfinite","line":236,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjectiveProfiniteObjToProfinite","doc":"Every Stonean space is projective in `Profinite` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjectiveProfiniteObjToProfinite\"><span class=\"name\">Stonean</span>.<span class=\"name\">instProjectiveProfiniteObjToProfinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.obj</span> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L225-L233","name":"Stonean.instProjectiveCompHausCompHaus","line":225,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjectiveCompHausCompHaus","doc":"Every Stonean space is projective in `CompHaus` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjectiveCompHausCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">instProjectiveCompHausCompHaus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\"><span class=\"fn\">X</span>.compHaus</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L220-L222","name":"Stonean.instEpiOfCompHaus","line":220,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instEpiOfCompHaus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instEpiOfCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">instEpiOfCompHaus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L216-L218","name":"Stonean.instEpiCompHaus","line":216,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instEpiCompHaus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instEpiCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">instEpiCompHaus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L186-L214","name":"Stonean.epi_iff_surjective","line":186,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.epi_iff_surjective","doc":"A morphism in `Stonean` is an epi iff it is surjective.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.epi_iff_surjective\"><span class=\"name\">Stonean</span>.<span class=\"name\">epi_iff_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L175-L181","name":"Stonean.mkFinite","line":175,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.mkFinite","doc":"A finite discrete space as a Stonean space.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.mkFinite\"><span class=\"name\">Stonean</span>.<span class=\"name\">mkFinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L166-L170","name":"Stonean.isoEquivHomeo","line":166,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo","doc":"The equivalence between isomorphisms in `Stonean` and homeomorphisms\nof topological spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo\"><span class=\"name\">Stonean</span>.<span class=\"name\">isoEquivHomeo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">Y</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L164-L164","name":"Stonean.isoEquivHomeo_symm_apply_hom_apply","line":164,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo_symm_apply_hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo_symm_apply_hom_apply\"><span class=\"name\">Stonean</span>.<span class=\"name\">isoEquivHomeo_symm_apply_hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Stonean.isoEquivHomeo</span>.symm</span> <span class=\"fn\">f</span></span>)</span>.hom</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L164-L164","name":"Stonean.isoEquivHomeo_symm_apply_inv","line":164,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo_symm_apply_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo_symm_apply_inv\"><span class=\"name\">Stonean</span>.<span class=\"name\">isoEquivHomeo_symm_apply_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Stonean.isoEquivHomeo</span>.symm</span> <span class=\"fn\">f</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\">⇑<span class=\"fn\">f</span></span>, <span class=\"fn\">continuous_toFun</span> := <span class=\"fn\">⋯</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L164-L164","name":"Stonean.isoEquivHomeo_apply_apply","line":164,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo_apply_apply\"><span class=\"name\">Stonean</span>.<span class=\"name\">isoEquivHomeo_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.obj</span> <span class=\"fn\">X</span></span>)</span>.toTop</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Stonean.isoEquivHomeo</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.hom</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L164-L164","name":"Stonean.isoEquivHomeo_apply_symm_apply","line":164,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo_apply_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoEquivHomeo_apply_symm_apply\"><span class=\"name\">Stonean</span>.<span class=\"name\">isoEquivHomeo_apply_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.obj</span> <span class=\"fn\">Y</span></span>)</span>.toTop</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Stonean.isoEquivHomeo</span> <span class=\"fn\">f</span></span>)</span>.symm</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.inv</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L160-L160","name":"Stonean.homeoOfIso","line":160,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.homeoOfIso","doc":"Construct a homeomorphism from an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.homeoOfIso\"><span class=\"name\">Stonean</span>.<span class=\"name\">homeoOfIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L159-L159","name":"Stonean.homeoOfIso_symm_apply","line":159,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.homeoOfIso_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.homeoOfIso_symm_apply\"><span class=\"name\">Stonean</span>.<span class=\"name\">homeoOfIso_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.obj</span> <span class=\"fn\">Y</span></span>)</span>.toTop</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.homeoOfIso\">Stonean.homeoOfIso</a> <span class=\"fn\">f</span></span>)</span>.symm</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.inv</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L159-L159","name":"Stonean.homeoOfIso_apply","line":159,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.homeoOfIso_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.homeoOfIso_apply\"><span class=\"name\">Stonean</span>.<span class=\"name\">homeoOfIso_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.obj</span> <span class=\"fn\">X</span></span>)</span>.toTop</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.homeoOfIso\">Stonean.homeoOfIso</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.hom</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L154-L156","name":"Stonean.isoOfHomeo","line":154,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoOfHomeo","doc":"Construct an isomorphism from a homeomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoOfHomeo\"><span class=\"name\">Stonean</span>.<span class=\"name\">isoOfHomeo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L152-L152","name":"Stonean.isoOfHomeo_inv","line":152,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoOfHomeo_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoOfHomeo_inv\"><span class=\"name\">Stonean</span>.<span class=\"name\">isoOfHomeo_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoOfHomeo\">Stonean.isoOfHomeo</a> <span class=\"fn\">f</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\">⇑<span class=\"fn\">f</span></span>, <span class=\"fn\">continuous_toFun</span> := <span class=\"fn\">⋯</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L152-L152","name":"Stonean.isoOfHomeo_hom","line":152,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoOfHomeo_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoOfHomeo_hom\"><span class=\"name\">Stonean</span>.<span class=\"name\">isoOfHomeo_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.isoOfHomeo\">Stonean.isoOfHomeo</a> <span class=\"fn\">f</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\">⇑<span class=\"fn\">f</span></span>, <span class=\"fn\">continuous_toFun</span> := <span class=\"fn\">⋯</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L144-L144","name":"Stonean.instFaithfulProfiniteToProfinite","line":144,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFaithfulProfiniteToProfinite","doc":"The functor from Stonean spaces to profinite spaces is faithful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFaithfulProfiniteToProfinite\"><span class=\"name\">Stonean</span>.<span class=\"name\">instFaithfulProfiniteToProfinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.Faithful</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L140-L141","name":"Stonean.instFullProfiniteToProfinite","line":140,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFullProfiniteToProfinite","doc":"The functor from Stonean spaces to profinite spaces is full. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFullProfiniteToProfinite\"><span class=\"name\">Stonean</span>.<span class=\"name\">instFullProfiniteToProfinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.Full</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L133-L137","name":"Stonean.toProfinite","line":133,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite","doc":"The functor from Stonean spaces to profinite spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\"><span class=\"name\">Stonean</span>.<span class=\"name\">toProfinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L132-L132","name":"Stonean.toProfinite_map","line":132,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite_map\"><span class=\"name\">Stonean</span>.<span class=\"name\">toProfinite_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L132-L132","name":"Stonean.toProfinite_obj_toTop","line":132,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite_obj_toTop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite_obj_toTop\"><span class=\"name\">Stonean</span>.<span class=\"name\">toProfinite_obj_toTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.obj</span> <span class=\"fn\">X</span></span>)</span>.toTop</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.compHaus</span>.toTop</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L128-L129","name":"Stonean.instExtremallyDisconnectedCoe","line":128,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instExtremallyDisconnectedCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instExtremallyDisconnectedCoe\"><span class=\"name\">Stonean</span>.<span class=\"name\">instExtremallyDisconnectedCoe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L125-L126","name":"Stonean.instT2SpaceCoe","line":125,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instT2SpaceCoe","doc":"Stonean spaces are Hausdorff. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instT2SpaceCoe\"><span class=\"name\">Stonean</span>.<span class=\"name\">instT2SpaceCoe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L121-L122","name":"Stonean.instCompactSpaceCoe","line":121,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instCompactSpaceCoe","doc":"Stonean spaces are compact. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instCompactSpaceCoe\"><span class=\"name\">Stonean</span>.<span class=\"name\">instCompactSpaceCoe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L117-L118","name":"Stonean.instTopologicalSpace","line":117,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instTopologicalSpace","doc":"Stonean spaces are topological spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instTopologicalSpace\"><span class=\"name\">Stonean</span>.<span class=\"name\">instTopologicalSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L114-L114","name":"Stonean.instFunLikeHomCoe","line":114,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFunLikeHomCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFunLikeHomCoe\"><span class=\"name\">Stonean</span>.<span class=\"name\">instFunLikeHomCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort.coe\">CoeSort.coe</a> <span class=\"fn\">Y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L113-L113","name":"Stonean.instCoeSortType","line":113,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instCoeSortType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instCoeSortType\"><span class=\"name\">Stonean</span>.<span class=\"name\">instCoeSortType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L110-L111","name":"Stonean.instConcreteCategory","line":110,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instConcreteCategory","doc":"Stonean spaces are a concrete category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instConcreteCategory\"><span class=\"name\">Stonean</span>.<span class=\"name\">instConcreteCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L107-L107","name":"Stonean.instFaithfulCompHausToCompHaus","line":107,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFaithfulCompHausToCompHaus","doc":"The forgetful functor `Stonean ⥤ CompHaus` is faithful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFaithfulCompHausToCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">instFaithfulCompHausToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.Faithful</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L104-L104","name":"Stonean.instFullCompHausToCompHaus","line":104,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFullCompHausToCompHaus","doc":"The forgetful functor `Stonean ⥤ CompHaus` is full. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instFullCompHausToCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">instFullCompHausToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.Full</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L99-L101","name":"Stonean.of","line":99,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.of","doc":"Construct a term of `Stonean` from a type endowed with the structure of a\ncompact, Hausdorff and extremally disconnected topological space.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.of\"><span class=\"name\">Stonean</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L93-L94","name":"Stonean.fullyFaithfulToCompHaus","line":93,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.fullyFaithfulToCompHaus","doc":"The forgetful functor `Stonean ⥤ CompHaus` is fully faithful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.fullyFaithfulToCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">fullyFaithfulToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.FullyFaithful</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L89-L90","name":"Stonean.toCompHaus","line":89,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus","doc":"The (forgetful) functor from Stonean spaces to compact Hausdorff spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">toCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L88-L88","name":"Stonean.toCompHaus_obj","line":88,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus_obj\"><span class=\"name\">Stonean</span>.<span class=\"name\">toCompHaus_obj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.obj</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.compHaus</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L88-L88","name":"Stonean.toCompHaus_map","line":88,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus_map\"><span class=\"name\">Stonean</span>.<span class=\"name\">toCompHaus_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.InducedCategory\">CategoryTheory.InducedCategory</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.compHaus</span></span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.map</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L84-L85","name":"Stonean.instLargeCategory","line":84,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instLargeCategory","doc":"Stonean spaces form a large category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instLargeCategory\"><span class=\"name\">Stonean</span>.<span class=\"name\">instLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.LargeCategory\">CategoryTheory.LargeCategory</a> <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L75-L77","name":"CompHaus.toStonean","line":75,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.toStonean","doc":"`Projective` implies `Stonean`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.toStonean\"><span class=\"name\">CompHaus</span>.<span class=\"name\">toStonean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L74-L74","name":"CompHaus.toStonean_compHaus","line":74,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.toStonean_compHaus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.toStonean_compHaus\"><span class=\"name\">CompHaus</span>.<span class=\"name\">toStonean_compHaus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toStonean</span>.compHaus</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L53-L71","name":"CompHaus.instExtremallyDisconnectedαTopologicalSpaceToTopTrueOfProjective","line":53,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.instExtremallyDisconnectedαTopologicalSpaceToTopTrueOfProjective","doc":"`Projective` implies `ExtremallyDisconnected`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.instExtremallyDisconnectedαTopologicalSpaceToTopTrueOfProjective\"><span class=\"name\">CompHaus</span>.<span class=\"name\">instExtremallyDisconnectedαTopologicalSpaceToTopTrueOfProjective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toTop</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L48-L48","name":"Stonean.extrDisc","line":48,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.extrDisc","doc":"A Stonean space is extremally disconnected "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.extrDisc\"><span class=\"name\">Stonean</span>.<span class=\"name\">extrDisc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.compHaus</span>.toTop</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L46-L46","name":"Stonean.compHaus","line":46,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.compHaus","doc":"The underlying compact Hausdorff space of a Stonean space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.compHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">compHaus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L44-L44","name":"Stonean.mk","line":44,"kind":"ctor","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.mk\"><span class=\"name\">Stonean</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(compHaus : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[extrDisc : <span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">compHaus</span>.toTop</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/caac5b13fb72ba0c5d0b35a0067de108db65e964/Mathlib/Topology/Category/Stonean/Basic.lean#L44-L48","name":"Stonean","line":44,"kind":"structure","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean","doc":"`Stonean` is the category of extremally disconnected compact Hausdorff spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\"><span class=\"name\">Stonean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}