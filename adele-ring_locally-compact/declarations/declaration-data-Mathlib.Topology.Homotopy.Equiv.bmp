{"name":"Mathlib.Topology.Homotopy.Equiv","instances":[{"typeNames":["ContinuousMap.HomotopyEquiv"],"name":"ContinuousMap.HomotopyEquiv.instCoeFunHomotopyEquivForAll","className":"CoeFun"},{"typeNames":["ContinuousMap.HomotopyEquiv"],"name":"ContinuousMap.HomotopyEquiv.instInhabitedHomotopyEquivUnitInstTopologicalSpacePUnit","className":"Inhabited"}],"imports":["Init","Mathlib.Topology.Homotopy.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L199-L201","name":"Homeomorph.trans_toHomotopyEquiv","line":199,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.trans_toHomotopyEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.trans_toHomotopyEquiv\"><span class=\"name\">Homeomorph</span>.<span class=\"name\">trans_toHomotopyEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Z</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.toHomotopyEquiv\">Homeomorph.toHomotopyEquiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph.trans\">Homeomorph.trans</a> <span class=\"fn\">h₀</span> <span class=\"fn\">h₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans\">ContinuousMap.HomotopyEquiv.trans</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.toHomotopyEquiv\">Homeomorph.toHomotopyEquiv</a> <span class=\"fn\">h₀</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.toHomotopyEquiv\">Homeomorph.toHomotopyEquiv</a> <span class=\"fn\">h₁</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L194-L195","name":"Homeomorph.symm_toHomotopyEquiv","line":194,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.symm_toHomotopyEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.symm_toHomotopyEquiv\"><span class=\"name\">Homeomorph</span>.<span class=\"name\">symm_toHomotopyEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.toHomotopyEquiv\">Homeomorph.toHomotopyEquiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph.symm\">Homeomorph.symm</a> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\">ContinuousMap.HomotopyEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.toHomotopyEquiv\">Homeomorph.toHomotopyEquiv</a> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L188-L190","name":"Homeomorph.refl_toHomotopyEquiv","line":188,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.refl_toHomotopyEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.refl_toHomotopyEquiv\"><span class=\"name\">Homeomorph</span>.<span class=\"name\">refl_toHomotopyEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.toHomotopyEquiv\">Homeomorph.toHomotopyEquiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph.refl\">Homeomorph.refl</a> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.refl\">ContinuousMap.HomotopyEquiv.refl</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L171-L177","name":"ContinuousMap.HomotopyEquiv.piCongrRight","line":171,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.piCongrRight","doc":"If `X i` is homotopy equivalent to `Y i` for each `i`, then the space of functions (a.k.a. the\nindexed product) `∀ i, X i` is homotopy equivalent to `∀ i, Y i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.piCongrRight\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">piCongrRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">Y</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L163-L167","name":"ContinuousMap.HomotopyEquiv.prodCongr","line":163,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.prodCongr","doc":"If `X` is homotopy equivalent to `Y` and `Z` is homotopy equivalent to `Z'`, then `X × Z` is\nhomotopy equivalent to `Z × Z'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.prodCongr\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">prodCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z' : <a href=\"./foundational_types.html\">Type</a> x}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Z</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Z'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">Z</span> <span class=\"fn\">Z'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Z</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Z'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L158-L158","name":"ContinuousMap.HomotopyEquiv.symm_trans","line":158,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm_trans\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">symm_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Z</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\">ContinuousMap.HomotopyEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans\">ContinuousMap.HomotopyEquiv.trans</a> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans\">ContinuousMap.HomotopyEquiv.trans</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\">ContinuousMap.HomotopyEquiv.symm</a> <span class=\"fn\">h₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\">ContinuousMap.HomotopyEquiv.symm</a> <span class=\"fn\">h₁</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L145-L153","name":"ContinuousMap.HomotopyEquiv.trans","line":145,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans","doc":"If `X` is homotopy equivalent to `Y`, and `Y` is homotopy equivalent to `Z`, then `X` is homotopy\nequivalent to `Z`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Z</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L144-L144","name":"ContinuousMap.HomotopyEquiv.trans_apply","line":144,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans_apply\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">trans_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Z</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans\">ContinuousMap.HomotopyEquiv.trans</a> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span>)</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">h₂</span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">h₁</span></span> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L144-L144","name":"ContinuousMap.HomotopyEquiv.trans_symm_apply","line":144,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans_symm_apply\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">trans_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Z</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">Z</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\">ContinuousMap.HomotopyEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.trans\">ContinuousMap.HomotopyEquiv.trans</a> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span>)</span></span>)</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\">ContinuousMap.HomotopyEquiv.symm</a> <span class=\"fn\">h₁</span></span>)</span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\">ContinuousMap.HomotopyEquiv.symm</a> <span class=\"fn\">h₂</span></span>)</span></span> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L137-L138","name":"ContinuousMap.HomotopyEquiv.instInhabitedHomotopyEquivUnitInstTopologicalSpacePUnit","line":137,"kind":"instance","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.instInhabitedHomotopyEquivUnitInstTopologicalSpacePUnit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.instInhabitedHomotopyEquivUnitInstTopologicalSpacePUnit\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">instInhabitedHomotopyEquivUnitInstTopologicalSpacePUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L131-L132","name":"ContinuousMap.HomotopyEquiv.refl","line":131,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.refl","doc":"Any topological space is homotopy equivalent to itself.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.refl\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L130-L130","name":"ContinuousMap.HomotopyEquiv.refl_symm_apply","line":130,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.refl_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.refl_symm_apply\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">refl_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\">ContinuousMap.HomotopyEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.refl\">ContinuousMap.HomotopyEquiv.refl</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L130-L130","name":"ContinuousMap.HomotopyEquiv.refl_apply","line":130,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.refl_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.refl_apply\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">refl_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.refl\">ContinuousMap.HomotopyEquiv.refl</a> <span class=\"fn\">X</span></span>)</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L121-L122","name":"ContinuousMap.HomotopyEquiv.Simps.symm_apply","line":121,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.Simps.symm_apply","doc":"See Note [custom simps projection]. We need to specify this projection explicitly in this case,\nbecause it is a composition of multiple projections. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.Simps.symm_apply\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">Simps</span>.<span class=\"name\">symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Y</span> → <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L115-L116","name":"ContinuousMap.HomotopyEquiv.Simps.apply","line":115,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.Simps.apply","doc":"See Note [custom simps projection]. We need to specify this projection explicitly in this case,\nbecause it is a composition of multiple projections. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.Simps.apply\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">Simps</span>.<span class=\"name\">apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L109-L110","name":"ContinuousMap.HomotopyEquiv.coe_invFun","line":109,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.coe_invFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.coe_invFun\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">coe_invFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">h</span>.invFun</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\">ContinuousMap.HomotopyEquiv.symm</a> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L101-L105","name":"ContinuousMap.HomotopyEquiv.symm","line":101,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm","doc":"If `X` is homotopy equivalent to `Y`, then `Y` is homotopy equivalent to `X`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.symm\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">Y</span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L89-L90","name":"Homeomorph.coe_toHomotopyEquiv","line":89,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.coe_toHomotopyEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.coe_toHomotopyEquiv\"><span class=\"name\">Homeomorph</span>.<span class=\"name\">coe_toHomotopyEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.toHomotopyEquiv\">Homeomorph.toHomotopyEquiv</a> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L81-L85","name":"Homeomorph.toHomotopyEquiv","line":81,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.toHomotopyEquiv","doc":"Any homeomorphism is a homotopy equivalence.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#Homeomorph.toHomotopyEquiv\"><span class=\"name\">Homeomorph</span>.<span class=\"name\">toHomotopyEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L67-L68","name":"ContinuousMap.HomotopyEquiv.continuous","line":67,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.continuous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.continuous\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">continuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">↑<span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L62-L63","name":"ContinuousMap.HomotopyEquiv.toFun_eq_coe","line":62,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.toFun_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.toFun_eq_coe\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">toFun_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">h</span>.toFun</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L59-L59","name":"ContinuousMap.HomotopyEquiv.instCoeFunHomotopyEquivForAll","line":59,"kind":"instance","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.instCoeFunHomotopyEquivForAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.instCoeFunHomotopyEquivForAll\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">instCoeFunHomotopyEquivForAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L57-L57","name":"ContinuousMap.HomotopyEquiv.toFun'","line":57,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.toFun'","doc":"Coercion of a `HomotopyEquiv` to function. While the Lean 4 way is to unfold coercions, this\nauxiliary definition will make porting of Lean 3 code easier.\n\nPorting note (#11215): TODO: drop this definition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.toFun'\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">toFun'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L49-L49","name":"ContinuousMap.«term_≃ₕ_»","line":49,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.«term_≃ₕ_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.«term_≃ₕ_»\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">«term_≃ₕ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L45-L45","name":"ContinuousMap.HomotopyEquiv.right_inv","line":45,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.right_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.right_inv\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">right_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Basic.html#ContinuousMap.Homotopic\">ContinuousMap.Homotopic</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.comp\">ContinuousMap.comp</a> <span class=\"fn\"><span class=\"fn\">self</span>.toFun</span> <span class=\"fn\"><span class=\"fn\">self</span>.invFun</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.id\">ContinuousMap.id</a> <span class=\"fn\">Y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L44-L44","name":"ContinuousMap.HomotopyEquiv.left_inv","line":44,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.left_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.left_inv\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">left_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Basic.html#ContinuousMap.Homotopic\">ContinuousMap.Homotopic</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.comp\">ContinuousMap.comp</a> <span class=\"fn\"><span class=\"fn\">self</span>.invFun</span> <span class=\"fn\"><span class=\"fn\">self</span>.toFun</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.id\">ContinuousMap.id</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L43-L43","name":"ContinuousMap.HomotopyEquiv.invFun","line":43,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.invFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.invFun\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">invFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\">Y</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L42-L42","name":"ContinuousMap.HomotopyEquiv.toFun","line":42,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.toFun\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">Y</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L41-L41","name":"ContinuousMap.HomotopyEquiv.mk","line":41,"kind":"ctor","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.mk\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toFun : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">Y</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(invFun : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\">Y</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(left_inv : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Basic.html#ContinuousMap.Homotopic\">ContinuousMap.Homotopic</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.comp\">ContinuousMap.comp</a> <span class=\"fn\">invFun</span> <span class=\"fn\">toFun</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.id\">ContinuousMap.id</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(right_inv : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Basic.html#ContinuousMap.Homotopic\">ContinuousMap.Homotopic</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.comp\">ContinuousMap.comp</a> <span class=\"fn\">toFun</span> <span class=\"fn\">invFun</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.id\">ContinuousMap.id</a> <span class=\"fn\">Y</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L41-L45","name":"ContinuousMap.HomotopyEquiv","line":41,"kind":"structure","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv","doc":"A homotopy equivalence between topological spaces `X` and `Y` are a pair of functions\n`toFun : C(X, Y)` and `invFun : C(Y, X)` such that `toFun.comp invFun` and `invFun.comp toFun`\nare both homotopic to corresponding identity maps.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L40-L40","name":"ContinuousMap.HomotopyEquiv.ext","line":40,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.ext\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>} {<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>} (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFun</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.invFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.invFun</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/Homotopy/Equiv.lean#L40-L40","name":"ContinuousMap.HomotopyEquiv.ext_iff","line":40,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv.ext_iff\"><span class=\"name\">ContinuousMap</span>.<span class=\"name\">HomotopyEquiv</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>} {<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>} (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Equiv.html#ContinuousMap.HomotopyEquiv\">ContinuousMap.HomotopyEquiv</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFun</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.invFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.invFun</span></span></span></span></span></div></div>"}]}