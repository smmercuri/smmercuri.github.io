{"name":"Mathlib.Topology.MetricSpace.GromovHausdorff","instances":[{"typeNames":["TopologicalSpace.NonemptyCompacts"],"name":"GromovHausdorff.IsometryRel.setoid","className":"Setoid"},{"typeNames":["GromovHausdorff.GHSpace"],"name":"GromovHausdorff.instInhabitedGHSpace","className":"Inhabited"},{"typeNames":["GromovHausdorff.GHSpace.Rep"],"name":"GromovHausdorff.repGHSpaceMetricSpace","className":"MetricSpace"},{"typeNames":["GromovHausdorff.GHSpace.Rep"],"name":"GromovHausdorff.rep_gHSpace_compactSpace","className":"CompactSpace"},{"typeNames":["GromovHausdorff.GHSpace.Rep"],"name":"GromovHausdorff.rep_gHSpace_nonempty","className":"Nonempty"},{"typeNames":["GromovHausdorff.GHSpace"],"name":"GromovHausdorff.instDistGHSpace","className":"Dist"},{"typeNames":["GromovHausdorff.GHSpace"],"name":"GromovHausdorff.instMetricSpaceGHSpace","className":"MetricSpace"},{"typeNames":["GromovHausdorff.GHSpace"],"name":"GromovHausdorff.instSecondCountableTopologyGHSpaceToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace","className":"SecondCountableTopology"},{"typeNames":["GromovHausdorff.AuxGluingStruct"],"name":"GromovHausdorff.instInhabitedAuxGluingStruct","className":"Inhabited"},{"typeNames":["GromovHausdorff.GHSpace"],"name":"GromovHausdorff.instCompleteSpaceGHSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace","className":"CompleteSpace"}],"imports":["Init","Mathlib.SetTheory.Cardinal.Basic","Mathlib.Topology.MetricSpace.Closeds","Mathlib.Topology.MetricSpace.Completion","Mathlib.Topology.MetricSpace.GromovHausdorffRealized","Mathlib.Topology.MetricSpace.Kuratowski"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L1009-L1091","name":"GromovHausdorff.instCompleteSpaceGHSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace","line":1009,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instCompleteSpaceGHSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace","doc":"The Gromov-Hausdorff space is complete. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instCompleteSpaceGHSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">instCompleteSpaceGHSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L999-L1005","name":"GromovHausdorff.auxGluing","line":999,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.auxGluing","doc":"Auxiliary sequence of metric spaces, containing copies of `X 0`, ..., `X n`, where each\n`X i` is glued to `X (i+1)` in an optimal way. The space at step `n+1` is obtained from the space\nat step `n` by adding `X (n+1)`, glued in an optimal way to the `X n` already sitting there. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.auxGluing\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">auxGluing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct\">GromovHausdorff.AuxGluingStruct</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L989-L994","name":"GromovHausdorff.instInhabitedAuxGluingStruct","line":989,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instInhabitedAuxGluingStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instInhabitedAuxGluingStruct\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">instInhabitedAuxGluingStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct\">GromovHausdorff.AuxGluingStruct</a> <span class=\"fn\">A</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L984-L984","name":"GromovHausdorff.AuxGluingStruct.isom","line":984,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.isom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.isom\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">AuxGluingStruct</span>.<span class=\"name\">isom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct\">GromovHausdorff.AuxGluingStruct</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\"><span class=\"fn\">self</span>.embed</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L983-L983","name":"GromovHausdorff.AuxGluingStruct.embed","line":983,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.embed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.embed\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">AuxGluingStruct</span>.<span class=\"name\">embed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct\">GromovHausdorff.AuxGluingStruct</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span> → <span class=\"fn\"><span class=\"fn\">self</span>.Space</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L982-L982","name":"GromovHausdorff.AuxGluingStruct.metric","line":982,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.metric","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.metric\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">AuxGluingStruct</span>.<span class=\"name\">metric</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct\">GromovHausdorff.AuxGluingStruct</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\"><span class=\"fn\">self</span>.Space</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L981-L981","name":"GromovHausdorff.AuxGluingStruct.Space","line":981,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.Space","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.Space\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">AuxGluingStruct</span>.<span class=\"name\">Space</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct\">GromovHausdorff.AuxGluingStruct</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L980-L980","name":"GromovHausdorff.AuxGluingStruct.mk","line":980,"kind":"ctor","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct.mk\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">AuxGluingStruct</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Space : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(metric : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">Space</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(embed : <span class=\"fn\"><span class=\"fn\">A</span> → <span class=\"fn\">Space</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isom : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">embed</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct\">GromovHausdorff.AuxGluingStruct</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L980-L984","name":"GromovHausdorff.AuxGluingStruct","line":980,"kind":"structure","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct","doc":"Auxiliary structure used to glue metric spaces below, recording an isometric embedding\nof a type `A` in another metric space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.AuxGluingStruct\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">AuxGluingStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L792-L957","name":"GromovHausdorff.totallyBounded","line":792,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.totallyBounded","doc":"Compactness criterion: a closed set of compact metric spaces is compact if the spaces have\na uniformly bounded diameter, and for all `ε` the number of balls of radius `ε` required\nto cover the spaces is uniformly bounded. This is an equivalence, but we only prove the\ninteresting direction that these conditions imply compactness. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.totallyBounded\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">totallyBounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ulim : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">u</span> <span class=\"fn\">Filter.atTop</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hdiam : <span class=\"fn\">∀ <span class=\"fn\">p</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Bounded.html#Metric.diam\">Metric.diam</a> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcov : <span class=\"fn\">∀ <span class=\"fn\">p</span> ∈ <span class=\"fn\">t</span>,\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>),\n    <span class=\"fn\">∃ (s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.Rep\">GromovHausdorff.GHSpace.Rep</a> <span class=\"fn\">p</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">n</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">Set.univ</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">⋃ x ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Metric.ball\">Metric.ball</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#TotallyBounded\">TotallyBounded</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L657-L786","name":"GromovHausdorff.instSecondCountableTopologyGHSpaceToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace","line":657,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instSecondCountableTopologyGHSpaceToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace","doc":"The Gromov-Hausdorff space is second countable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instSecondCountableTopologyGHSpaceToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">instSecondCountableTopologyGHSpaceToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceInstMetricSpaceGHSpace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L578-L650","name":"GromovHausdorff.ghDist_le_of_approx_subsets","line":578,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist_le_of_approx_subsets","doc":"If there are subsets which are `ε₁`-dense and `ε₃`-dense in two spaces, and\nisometric up to `ε₂`, then the Gromov-Hausdorff distance between the spaces is bounded by\n`ε₁ + ε₂/2 + ε₃`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist_le_of_approx_subsets\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">ghDist_le_of_approx_subsets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Φ : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">s</span></span> → <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε₁ : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε₂ : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε₃ : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\">∃ y ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ε₁</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">Y</span>), <span class=\"fn\">∃ (y : <span class=\"fn\">↑<span class=\"fn\">s</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ε₃</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\">↑<span class=\"fn\">s</span></span>), <span class=\"fn\"><span class=\"fn\">|<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">y</span></span>)</span></span></span>|</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ε₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist\">GromovHausdorff.ghDist</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ε₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ε₂</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ε₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L558-L560","name":"GromovHausdorff.toGHSpace_continuous","line":558,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace_continuous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace_continuous\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">toGHSpace_continuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">TopologicalSpace.NonemptyCompacts.toGHSpace</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L553-L555","name":"GromovHausdorff.toGHSpace_lipschitz","line":553,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace_lipschitz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace_lipschitz\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">toGHSpace_lipschitz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">1</span> <span class=\"fn\">TopologicalSpace.NonemptyCompacts.toGHSpace</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L542-L550","name":"GromovHausdorff.ghDist_le_nonemptyCompacts_dist","line":542,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist_le_nonemptyCompacts_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist_le_nonemptyCompacts_dist\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">ghDist_le_nonemptyCompacts_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.NonemptyCompacts\">TopologicalSpace.NonemptyCompacts</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.NonemptyCompacts\">TopologicalSpace.NonemptyCompacts</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#TopologicalSpace.NonemptyCompacts.toGHSpace\">TopologicalSpace.NonemptyCompacts.toGHSpace</a> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#TopologicalSpace.NonemptyCompacts.toGHSpace\">TopologicalSpace.NonemptyCompacts.toGHSpace</a> <span class=\"fn\">q</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L529-L531","name":"TopologicalSpace.NonemptyCompacts.toGHSpace","line":529,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#TopologicalSpace.NonemptyCompacts.toGHSpace","doc":"In particular, nonempty compacts of a metric space map to `GHSpace`.\nWe register this in the topological_space namespace to take advantage\nof the notation `p.toGHSpace`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#TopologicalSpace.NonemptyCompacts.toGHSpace\"><span class=\"name\">TopologicalSpace</span>.<span class=\"name\">NonemptyCompacts</span>.<span class=\"name\">toGHSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.NonemptyCompacts\">TopologicalSpace.NonemptyCompacts</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L417-L518","name":"GromovHausdorff.instMetricSpaceGHSpace","line":417,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instMetricSpaceGHSpace","doc":"The Gromov-Hausdorff distance defines a genuine distance on the Gromov-Hausdorff space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instMetricSpaceGHSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">instMetricSpaceGHSpace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L400-L413","name":"GromovHausdorff.ghDist_eq_hausdorffDist","line":400,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist_eq_hausdorffDist","doc":"The Gromov-Hausdorff distance can also be realized by a coupling in `ℓ^∞(ℝ)`, by embedding\nthe optimal coupling through its Kuratowski embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist_eq_hausdorffDist\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">ghDist_eq_hausdorffDist</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (Φ : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/lpSpace.html#lp\">lp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span></span>) (Ψ : <span class=\"fn\"><span class=\"fn\">Y</span> → <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/lpSpace.html#lp\">lp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">Φ</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">Ψ</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist\">GromovHausdorff.ghDist</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">Φ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">Ψ</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L255-L395","name":"GromovHausdorff.hausdorffDist_optimal","line":255,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.hausdorffDist_optimal","doc":"The optimal coupling constructed above realizes exactly the Gromov-Hausdorff distance,\nessentially by design. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.hausdorffDist_optimal\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">hausdorffDist_optimal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorffRealized.html#GromovHausdorff.optimalGHInjl\">GromovHausdorff.optimalGHInjl</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorffRealized.html#GromovHausdorff.optimalGHInjr\">GromovHausdorff.optimalGHInjr</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist\">GromovHausdorff.ghDist</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L197-L249","name":"GromovHausdorff.ghDist_le_hausdorffDist","line":197,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist_le_hausdorffDist","doc":"The Gromov-Hausdorff distance between two spaces is bounded by the Hausdorff distance\nof isometric copies of the spaces, in any metric space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist_le_hausdorffDist\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">ghDist_le_hausdorffDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Φ : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ψ : <span class=\"fn\"><span class=\"fn\">Y</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">Φ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">Ψ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist\">GromovHausdorff.ghDist</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/HausdorffDistance.html#Metric.hausdorffDist\">Metric.hausdorffDist</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">Φ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">Ψ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L191-L192","name":"GromovHausdorff.dist_ghDist","line":191,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.dist_ghDist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.dist_ghDist\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">dist_ghDist</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist\">GromovHausdorff.ghDist</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.Rep\">GromovHausdorff.GHSpace.Rep</a> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.Rep\">GromovHausdorff.GHSpace.Rep</a> <span class=\"fn\">q</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L186-L188","name":"GromovHausdorff.ghDist","line":186,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist","doc":"The Gromov-Hausdorff distance between two nonempty compact metric spaces, equal by definition to\nthe distance of the equivalence classes of these spaces in the Gromov-Hausdorff space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.ghDist\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">ghDist</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L180-L182","name":"GromovHausdorff.instDistGHSpace","line":180,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instDistGHSpace","doc":"Distance on `GHSpace`: the distance between two nonempty compact spaces is the infimum\nHausdorff distance between isometric copies of the two spaces in a metric space. For the definition,\nwe only consider embeddings in `ℓ^∞(ℝ)`, but we will prove below that it works for all spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instDistGHSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">instDistGHSpace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist\">Dist</a> <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L151-L174","name":"GromovHausdorff.toGHSpace_eq_toGHSpace_iff_isometryEquiv","line":151,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace_eq_toGHSpace_iff_isometryEquiv","doc":"Two nonempty compact spaces have the same image in `GHSpace` if and only if they are\nisometric. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace_eq_toGHSpace_iff_isometryEquiv\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">toGHSpace_eq_toGHSpace_iff_isometryEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace\">GromovHausdorff.toGHSpace</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace\">GromovHausdorff.toGHSpace</a> <span class=\"fn\">Y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#IsometryEquiv\">≃ᵢ</a> <span class=\"fn\">Y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L143-L146","name":"GromovHausdorff.GHSpace.toGHSpace_rep","line":143,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.toGHSpace_rep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.toGHSpace_rep\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">GHSpace</span>.<span class=\"name\">toGHSpace_rep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace\">GromovHausdorff.toGHSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.Rep\">GromovHausdorff.GHSpace.Rep</a> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L137-L138","name":"GromovHausdorff.rep_gHSpace_nonempty","line":137,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.rep_gHSpace_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.rep_gHSpace_nonempty\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">rep_gHSpace_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.Rep\">GromovHausdorff.GHSpace.Rep</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L133-L134","name":"GromovHausdorff.rep_gHSpace_compactSpace","line":133,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.rep_gHSpace_compactSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.rep_gHSpace_compactSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">rep_gHSpace_compactSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.Rep\">GromovHausdorff.GHSpace.Rep</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L129-L130","name":"GromovHausdorff.repGHSpaceMetricSpace","line":129,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.repGHSpaceMetricSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.repGHSpaceMetricSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">repGHSpaceMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.Rep\">GromovHausdorff.GHSpace.Rep</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L123-L124","name":"GromovHausdorff.eq_toGHSpace","line":123,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.eq_toGHSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.eq_toGHSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">eq_toGHSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.NonemptyCompacts\">TopologicalSpace.NonemptyCompacts</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/lpSpace.html#lp\">lp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">p</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace\">GromovHausdorff.toGHSpace</a> <span class=\"fn\">↥<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L104-L120","name":"GromovHausdorff.eq_toGHSpace_iff","line":104,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.eq_toGHSpace_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.eq_toGHSpace_iff\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">eq_toGHSpace_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.NonemptyCompacts\">TopologicalSpace.NonemptyCompacts</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/lpSpace.html#lp\">lp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">p</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace\">GromovHausdorff.toGHSpace</a> <span class=\"fn\">X</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (Ψ : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/lpSpace.html#lp\">lp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">Ψ</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">Ψ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L100-L101","name":"GromovHausdorff.GHSpace.Rep","line":100,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.Rep","doc":"A metric space representative of any abstract point in `GHSpace` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace.Rep\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">GHSpace</span>.<span class=\"name\">Rep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L95-L96","name":"GromovHausdorff.instInhabitedGHSpace","line":95,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instInhabitedGHSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.instInhabitedGHSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">instInhabitedGHSpace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L91-L92","name":"GromovHausdorff.toGHSpace","line":91,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace","doc":"Map any nonempty compact type to `GHSpace` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.toGHSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">toGHSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\">GromovHausdorff.GHSpace</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L86-L87","name":"GromovHausdorff.GHSpace","line":86,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace","doc":"The Gromov-Hausdorff space "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.GHSpace\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">GHSpace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Topology/MetricSpace/GromovHausdorff.lean#L81-L82","name":"GromovHausdorff.IsometryRel.setoid","line":81,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.IsometryRel.setoid","doc":"setoid instance identifying two isometric nonempty compact subspaces of ℓ^∞(ℝ) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/GromovHausdorff.html#GromovHausdorff.IsometryRel.setoid\"><span class=\"name\">GromovHausdorff</span>.<span class=\"name\">IsometryRel</span>.<span class=\"name\">setoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Compacts.html#TopologicalSpace.NonemptyCompacts\">TopologicalSpace.NonemptyCompacts</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/lpSpace.html#lp\">lp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span></span>)</span></span></div></div>"}]}