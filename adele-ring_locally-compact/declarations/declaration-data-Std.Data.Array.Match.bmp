{"name":"Std.Data.Array.Match","instances":[{"typeNames":["Array.PrefixTable"],"name":"Array.instInhabitedPrefixTable","className":"Inhabited"}],"imports":["Init","Std.Data.Nat.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L94-L103","name":"Array.Matcher.next?","line":94,"kind":"opaque","docLink":"./Std/Data/Array/Match.html#Array.Matcher.next?","doc":"Find next match from a given stream\n\nRuns the stream until it reads a sequence that matches the sought pattern, then returns the stream\nstate at that point and an updated matcher state.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.Matcher.next?\"><span class=\"name\">Array</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.Matcher\">Array.Matcher</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stream : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.Matcher\">Array.Matcher</a> <span class=\"fn\">α</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L86-L87","name":"Array.Matcher.ofStream","line":86,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.Matcher.ofStream","doc":"Make a KMP matcher for a given a pattern stream "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.Matcher.ofStream\"><span class=\"name\">Array</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">ofStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pat : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.Matcher\">Array.Matcher</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L82-L83","name":"Array.Matcher.ofArray","line":82,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.Matcher.ofArray","doc":"Make a KMP matcher for a given pattern array "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.Matcher.ofArray\"><span class=\"name\">Array</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pat : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.Matcher\">Array.Matcher</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L79-L79","name":"Array.Matcher.state","line":79,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.Matcher.state","doc":"Current longest matching prefix "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.Matcher.state\"><span class=\"name\">Array</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">state</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.Matcher\">Array.Matcher</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable.size\">Array.PrefixTable.size</a> <span class=\"fn\"><span class=\"fn\">self</span>.table</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L77-L77","name":"Array.Matcher.table","line":77,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.Matcher.table","doc":"Prefix table for the pattern "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.Matcher.table\"><span class=\"name\">Array</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">table</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.Matcher\">Array.Matcher</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L75-L75","name":"Array.Matcher.mk","line":75,"kind":"ctor","docLink":"./Std/Data/Array/Match.html#Array.Matcher.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.Matcher.mk\"><span class=\"name\">Array</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(table : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(state : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable.size\">Array.PrefixTable.size</a> <span class=\"fn\">table</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.Matcher\">Array.Matcher</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L75-L79","name":"Array.Matcher","line":75,"kind":"structure","docLink":"./Std/Data/Array/Match.html#Array.Matcher","doc":"KMP matcher structure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.Matcher\"><span class=\"name\">Array</span>.<span class=\"name\">Matcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L69-L72","name":"Array.mkPrefixTableOfStream.loop","line":69,"kind":"opaque","docLink":"./Std/Data/Array/Match.html#Array.mkPrefixTableOfStream.loop","doc":"Inner loop for `mkPrefixTableOfStream` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.mkPrefixTableOfStream.loop\"><span class=\"name\">Array</span>.<span class=\"name\">mkPrefixTableOfStream</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stream : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L65-L72","name":"Array.mkPrefixTableOfStream","line":65,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.mkPrefixTableOfStream","doc":"Make prefix table from a pattern stream "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.mkPrefixTableOfStream\"><span class=\"name\">Array</span>.<span class=\"name\">mkPrefixTableOfStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stream : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L62-L62","name":"Array.mkPrefixTable","line":62,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.mkPrefixTable","doc":"Make prefix table from a pattern array "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.mkPrefixTable\"><span class=\"name\">Array</span>.<span class=\"name\">mkPrefixTable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L53-L59","name":"Array.PrefixTable.extend","line":53,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.PrefixTable.extend","doc":"Extend a prefix table by one element\n\nIf `t` is the prefix table for `xs` then `t.extend x` is the prefix table for `xs.push x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.PrefixTable.extend\"><span class=\"name\">Array</span>.<span class=\"name\">PrefixTable</span>.<span class=\"name\">extend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L32-L47","name":"Array.PrefixTable.step","line":32,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.PrefixTable.step","doc":"Transition function for the KMP matcher\n\nAssuming we have an input `xs` with a suffix that matches the pattern prefix `t.pattern[:len]`\nwhere `len : Fin (t.size+1)`. Then `xs.push x` has a suffix that matches the pattern prefix\n`t.pattern[:t.step x len]`. If `len` is as large as possible then `t.step x len` will also be\nas large as possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.PrefixTable.step\"><span class=\"name\">Array</span>.<span class=\"name\">PrefixTable</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable.size\">Array.PrefixTable.size</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable.size\">Array.PrefixTable.size</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L23-L23","name":"Array.PrefixTable.size","line":23,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.PrefixTable.size","doc":"Returns the size of the prefix table "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.PrefixTable.size\"><span class=\"name\">Array</span>.<span class=\"name\">PrefixTable</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L19-L20","name":"Array.instInhabitedPrefixTable","line":19,"kind":"instance","docLink":"./Std/Data/Array/Match.html#Array.instInhabitedPrefixTable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.instInhabitedPrefixTable\"><span class=\"name\">Array</span>.<span class=\"name\">instInhabitedPrefixTable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L17-L17","name":"Array.PrefixTable.valid","line":17,"kind":"def","docLink":"./Std/Data/Array/Match.html#Array.PrefixTable.valid","doc":"Validity condition to help with termination proofs "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.PrefixTable.valid\"><span class=\"name\">Array</span>.<span class=\"name\">PrefixTable</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\"><span class=\"fn\">self</span>.toArray</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toArray</span>[<span class=\"fn\">i</span>]</span>.snd</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L15-L15","name":"Array.PrefixTable.mk","line":15,"kind":"ctor","docLink":"./Std/Data/Array/Match.html#Array.PrefixTable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.PrefixTable.mk\"><span class=\"name\">Array</span>.<span class=\"name\">PrefixTable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toArray : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(valid : <span class=\"fn\">∀ {<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\">toArray</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toArray</span>[<span class=\"fn\">i</span>]</span>.snd</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.PrefixTable\">Array.PrefixTable</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/Array/Match.lean#L15-L17","name":"Array.PrefixTable","line":15,"kind":"structure","docLink":"./Std/Data/Array/Match.html#Array.PrefixTable","doc":"Prefix table for the Knuth-Morris-Pratt matching algorithm\n\nThis is an array of the form `t = [(x₀,n₀), (x₁,n₁), (x₂, n₂), ...]` where for each `i`, `nᵢ` is\nthe length of the longest proper prefix of `xs = [x₀,x₁,...,xᵢ]` which is also a suffix of `xs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.PrefixTable\"><span class=\"name\">Array</span>.<span class=\"name\">PrefixTable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Init/Prelude.html#Array\"><span class=\"name\">Array</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}