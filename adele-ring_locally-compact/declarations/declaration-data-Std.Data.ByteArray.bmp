{"name":"Std.Data.ByteArray","instances":[],"imports":["Init","Std.Data.Array.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L129-L130","name":"ByteArray.getElem_ofFn","line":129,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.getElem_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.getElem_ofFn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">getElem_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span></span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">⋯</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L125-L127","name":"ByteArray.get_ofFn","line":125,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.get_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.get_ofFn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.get\">ByteArray.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L122-L123","name":"ByteArray.size_ofFn","line":122,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.size_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.size_ofFn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L120-L120","name":"ByteArray.ofFn_data","line":120,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.ofFn_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.ofFn_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ofFn_data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.ofFn\">Array.ofFn</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L117-L118","name":"ByteArray.ofFn","line":117,"kind":"def","docLink":"./Std/Data/ByteArray.html#ByteArray.ofFn","doc":"- `ofFn f` with `f : Fin n → UInt8` returns the byte array whose `i`th element is `f i`. -"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.ofFn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L110-L112","name":"ByteArray.get_extract","line":110,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.get_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.get_extract\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">ByteArray.extract</a> <span class=\"fn\">a</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">ByteArray.extract</a> <span class=\"fn\">a</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span></span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\"><span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L105-L108","name":"ByteArray.get_extract_aux","line":105,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.get_extract_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.get_extract_aux\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_extract_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">ByteArray.extract</a> <span class=\"fn\">a</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L101-L103","name":"ByteArray.size_extract","line":101,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.size_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.size_extract\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_extract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">ByteArray.extract</a> <span class=\"fn\">a</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">stop</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">start</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L94-L99","name":"ByteArray.extract_data","line":94,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.extract_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.extract_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">extract_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">ByteArray.extract</a> <span class=\"fn\">a</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.extract\">Array.extract</a> <span class=\"fn\"><span class=\"fn\">a</span>.data</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L87-L90","name":"ByteArray.get_append_right","line":87,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.get_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.get_append_right\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hle : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">b</span></span></span>)</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>[<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L82-L85","name":"ByteArray.get_append_left","line":82,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.get_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.get_append_left\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hlt : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></span>)</span></span></span>)</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\">i</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L79-L80","name":"ByteArray.size_append","line":79,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.size_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.size_append\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L75-L77","name":"ByteArray.append_data","line":75,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.append_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.append_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">append_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">b</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L73-L73","name":"ByteArray.append_eq","line":73,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.append_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.append_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">append_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.append\">ByteArray.append</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L67-L69","name":"ByteArray.copySlice_data","line":67,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.copySlice_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.copySlice_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">copySlice_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exact : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.copySlice\">ByteArray.copySlice</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">j</span> <span class=\"fn\">len</span> <span class=\"fn\">exact</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array.extract\">Array.extract</a> <span class=\"fn\"><span class=\"fn\">b</span>.data</span> <span class=\"fn\">0</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.extract\">Array.extract</a> <span class=\"fn\"><span class=\"fn\">a</span>.data</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">len</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a>     <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.extract\">Array.extract</a> <span class=\"fn\"><span class=\"fn\">b</span>.data</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">len</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\"><span class=\"fn\">a</span>.data</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\"><span class=\"fn\">b</span>.data</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L61-L63","name":"ByteArray.set_set","line":61,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.set_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.set_set\"><span class=\"name\">ByteArray</span>.<span class=\"name\">set_set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v' : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\">ByteArray.set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\">ByteArray.set</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">↑<span class=\"fn\">i</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">⋯</span> }</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\">ByteArray.set</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L57-L59","name":"ByteArray.get_set_ne","line":57,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.get_set_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.get_set_ne\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_set_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\">ByteArray.set</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span>)</span>[<span class=\"fn\">j</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\">j</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L54-L55","name":"ByteArray.get_set_eq","line":54,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.get_set_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.get_set_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_set_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\">ByteArray.set</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span>)</span>[<span class=\"fn\">↑<span class=\"fn\">i</span></span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L50-L52","name":"ByteArray.size_set","line":50,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.size_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.size_set\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\">ByteArray.set</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L47-L48","name":"ByteArray.set_data","line":47,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.set_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.set_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">set_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\">ByteArray.set</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.set\">Array.set</a> <span class=\"fn\"><span class=\"fn\">a</span>.data</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L41-L43","name":"ByteArray.get_push_lt","line":41,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.get_push_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.get_push_lt\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_push_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.push\">ByteArray.push</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\">i</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L38-L39","name":"ByteArray.get_push_eq","line":38,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.get_push_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.get_push_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_push_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.push\">ByteArray.push</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span>)</span>[<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L35-L36","name":"ByteArray.size_push","line":35,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.size_push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.size_push\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.push\">ByteArray.push</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L33-L33","name":"ByteArray.push_data","line":33,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.push_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.push_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">push_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.push\">ByteArray.push</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.push\">Array.push</a> <span class=\"fn\"><span class=\"fn\">a</span>.data</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L29-L29","name":"ByteArray.size_empty","line":29,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.size_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.size_empty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.empty\">ByteArray.empty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L27-L27","name":"ByteArray.empty_data","line":27,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.empty_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.empty_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">empty_data</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.empty\">ByteArray.empty</a>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L25-L25","name":"ByteArray.mkEmpty_data","line":25,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.mkEmpty_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.mkEmpty_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mkEmpty_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cap : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.mkEmpty\">ByteArray.mkEmpty</a> <span class=\"fn\">cap</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L20-L21","name":"ByteArray.uset_eq_set","line":20,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.uset_eq_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.uset_eq_set\"><span class=\"name\">ByteArray</span>.<span class=\"name\">uset_eq_set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.toNat\">USize.toNat</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.uset\">ByteArray.uset</a> <span class=\"fn\">a</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\">ByteArray.set</a> <span class=\"fn\">a</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.toNat\">USize.toNat</a> <span class=\"fn\">i</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h</span> }</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L17-L18","name":"ByteArray.ugetElem_eq_getElem","line":17,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.ugetElem_eq_getElem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.ugetElem_eq_getElem\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ugetElem_eq_getElem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.toNat\">USize.toNat</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.toNat\">USize.toNat</a> <span class=\"fn\">i</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L13-L13","name":"ByteArray.getElem_eq_data_getElem","line":13,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.getElem_eq_data_getElem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.getElem_eq_data_getElem\"><span class=\"name\">ByteArray</span>.<span class=\"name\">getElem_eq_data_getElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">ByteArray.size</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>[<span class=\"fn\">i</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/ByteArray.lean#L10-L11","name":"ByteArray.ext","line":10,"kind":"theorem","docLink":"./Std/Data/ByteArray.html#ByteArray.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ByteArray.html#ByteArray.ext\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.data</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"}]}