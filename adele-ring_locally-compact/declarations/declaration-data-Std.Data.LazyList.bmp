{"name":"Std.Data.LazyList","instances":[{"typeNames":["LazyList"],"name":"LazyList.instInhabitedLazyList","className":"Inhabited"}],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L117-L118","name":"LazyList.iota","line":117,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.iota","doc":"The infinite lazy list `[i, i+1, i+2, ...]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.iota\"><span class=\"name\">LazyList</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L113-L114","name":"LazyList.iterates","line":113,"kind":"opaque","docLink":"./Std/Data/LazyList.html#LazyList.iterates","doc":"The infinite lazy list `[x, f x, f (f x), ...]` of iterates of a function.\nThis definition is partial because it creates an infinite list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.iterates\"><span class=\"name\">LazyList</span>.<span class=\"name\">iterates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L105-L108","name":"LazyList.get?","line":105,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.get?","doc":"The nth element of a lazy list as an option (like `List.get?`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.get?\"><span class=\"name\">LazyList</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L100-L102","name":"LazyList.filter","line":100,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.filter","doc":"The lazy list of all elements satisfying the predicate.\nIf the lazy list is infinite and none of the elements satisfy the predicate,\nthen this function will not terminate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.filter\"><span class=\"name\">LazyList</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L91-L94","name":"LazyList.take","line":91,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.take","doc":"The list containing the first `n` elements of a lazy list.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.take\"><span class=\"name\">LazyList</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L86-L88","name":"LazyList.join","line":86,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.join","doc":"The monadic join operation for lazy lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.join\"><span class=\"name\">LazyList</span>.<span class=\"name\">join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L82-L83","name":"LazyList.zip","line":82,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.zip","doc":"Zips two lazy lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.zip\"><span class=\"name\">LazyList</span>.<span class=\"name\">zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L76-L79","name":"LazyList.map₂","line":76,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.map₂","doc":"Maps a binary function over two lazy list.\nLike `LazyList.zip`, the result is only as long as the smaller input.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.map₂\"><span class=\"name\">LazyList</span>.<span class=\"name\">map₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">δ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L69-L71","name":"LazyList.map","line":69,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.map","doc":"Maps a function over a lazy list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.map\"><span class=\"name\">LazyList</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L64-L66","name":"LazyList.append","line":64,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.append","doc":"Appends two lazy lists.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.append\"><span class=\"name\">LazyList</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L59-L61","name":"LazyList.tail","line":59,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.tail","doc":"Removes the first element of the lazy list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.tail\"><span class=\"name\">LazyList</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L53-L55","name":"LazyList.headI","line":53,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.headI","doc":"Returns the first element of the lazy list,\nor `default` if the lazy list is empty.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.headI\"><span class=\"name\">LazyList</span>.<span class=\"name\">headI</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L46-L48","name":"LazyList.toList","line":46,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.toList","doc":"Converts a lazy list to a list.\nIf the lazy list is infinite,\nthen this function does not terminate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.toList\"><span class=\"name\">LazyList</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L38-L40","name":"LazyList.ofList","line":38,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.ofList","doc":"Constructs a lazy list from a list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.ofList\"><span class=\"name\">LazyList</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L34-L35","name":"LazyList.singleton","line":34,"kind":"def","docLink":"./Std/Data/LazyList.html#LazyList.singleton","doc":"The singleton lazy list.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.singleton\"><span class=\"name\">LazyList</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L30-L31","name":"LazyList.instInhabitedLazyList","line":30,"kind":"instance","docLink":"./Std/Data/LazyList.html#LazyList.instInhabitedLazyList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.instInhabitedLazyList\"><span class=\"name\">LazyList</span>.<span class=\"name\">instInhabitedLazyList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L23-L24","name":"LazyList.cons","line":23,"kind":"ctor","docLink":"./Std/Data/LazyList.html#LazyList.cons","doc":"Construct a lazy list from an element and a tail inside a thunk. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.cons\"><span class=\"name\">LazyList</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tl : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L21-L22","name":"LazyList.nil","line":21,"kind":"ctor","docLink":"./Std/Data/LazyList.html#LazyList.nil","doc":"The empty lazy list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList.nil\"><span class=\"name\">LazyList</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/LazyList.lean#L20-L24","name":"LazyList","line":20,"kind":"inductive","docLink":"./Std/Data/LazyList.html#LazyList","doc":"Lazy list.\nAll elements (except the first) are computed lazily.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/LazyList.html#LazyList\"><span class=\"name\">LazyList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}