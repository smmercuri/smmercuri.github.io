{"name":"Std.Data.RBMap.Basic","instances":[{"typeNames":["Std.RBColor"],"name":"Std.instReprRBColor","className":"Repr"},{"typeNames":["Std.RBNode"],"name":"Std.instReprRBNode","className":"Repr"},{"typeNames":["Std.RBNode"],"name":"Std.RBNode.instEmptyCollectionRBNode","className":"EmptyCollection"},{"typeNames":["Std.RBNode"],"name":"Std.RBNode.instForInRBNode","className":"ForIn"},{"typeNames":["Std.RBNode","Std.RBNode.Stream"],"name":"Std.RBNode.instToStreamRBNodeStream","className":"ToStream"},{"typeNames":["Std.RBNode.Stream"],"name":"Std.RBNode.instStreamStream","className":"Stream"},{"typeNames":["Std.RBNode.All"],"name":"Std.RBNode.instDecidableAll","className":"Decidable"},{"typeNames":["Std.RBNode.Any"],"name":"Std.RBNode.instDecidableAny","className":"Decidable"},{"typeNames":["Std.RBNode"],"name":"Std.RBNode.instMembershipRBNode","className":"Membership"},{"typeNames":["Std.RBNode"],"name":"Std.RBNode.instBEqRBNode","className":"BEq"},{"typeNames":["Std.RBNode.cmpLT"],"name":"Std.RBNode.instDecidableCmpLT","className":"Decidable"},{"typeNames":["Std.RBNode.cmpEq"],"name":"Std.RBNode.instDecidableCmpEq","className":"Decidable"},{"typeNames":["Std.RBSet"],"name":"Std.RBSet.instEmptyCollectionRBSet","className":"EmptyCollection"},{"typeNames":["Std.RBSet"],"name":"Std.RBSet.instInhabitedRBSet","className":"Inhabited"},{"typeNames":["Std.RBSet"],"name":"Std.RBSet.instForInRBSet","className":"ForIn"},{"typeNames":["Std.RBSet","Std.RBNode.Stream"],"name":"Std.RBSet.instToStreamRBSetStream","className":"ToStream"},{"typeNames":["Std.RBSet"],"name":"Std.RBSet.instReprRBSet","className":"Repr"},{"typeNames":["Std.RBSet"],"name":"Std.RBSet.instMembershipRBSet","className":"Membership"},{"typeNames":["Std.RBSet"],"name":"Std.RBSet.instBEqRBSet","className":"BEq"},{"typeNames":["Std.RBMap"],"name":"Std.instEmptyCollectionRBMap","className":"EmptyCollection"},{"typeNames":["Std.RBMap"],"name":"Std.instInhabitedRBMap","className":"Inhabited"},{"typeNames":["Std.RBMap","Prod"],"name":"Std.RBMap.instForInRBMapProd","className":"ForIn"},{"typeNames":["Std.RBMap","Std.RBNode.Stream"],"name":"Std.RBMap.instToStreamRBMapStreamProd","className":"ToStream"},{"typeNames":["Std.RBMap.Keys","Array"],"name":"Std.RBMap.instCoeHeadKeysArray","className":"CoeHead"},{"typeNames":["Std.RBMap.Keys","List"],"name":"Std.RBMap.instCoeHeadKeysList","className":"CoeHead"},{"typeNames":["Std.RBMap.Keys"],"name":"Std.RBMap.instForInKeys","className":"ForIn"},{"typeNames":["Std.RBMap.Keys"],"name":"Std.RBMap.instForMKeys","className":"ForM"},{"typeNames":["Std.RBMap.Keys","Std.RBMap.Keys.Stream"],"name":"Std.RBMap.instToStreamKeysStream","className":"ToStream"},{"typeNames":["Std.RBMap.Keys.Stream"],"name":"Std.RBMap.instStreamStream","className":"Stream"},{"typeNames":["Std.RBMap.Values","Array"],"name":"Std.RBMap.instCoeHeadValuesArray","className":"CoeHead"},{"typeNames":["Std.RBMap.Values","List"],"name":"Std.RBMap.instCoeHeadValuesList","className":"CoeHead"},{"typeNames":["Std.RBMap.Values"],"name":"Std.RBMap.instForInValues","className":"ForIn"},{"typeNames":["Std.RBMap.Values"],"name":"Std.RBMap.instForMValues","className":"ForM"},{"typeNames":["Std.RBMap.Values","Std.RBMap.Values.Stream"],"name":"Std.RBMap.instToStreamValuesStream","className":"ToStream"},{"typeNames":["Std.RBMap.Values.Stream"],"name":"Std.RBMap.instStreamStream_1","className":"Stream"},{"typeNames":["Std.RBMap"],"name":"Std.RBMap.instReprRBMap","className":"Repr"},{"typeNames":["Std.RBMap"],"name":"Std.RBMap.instBEqRBMap","className":"BEq"}],"imports":["Init","Std.Classes.Order","Std.Control.ForInStep.Basic","Std.Tactic.Lint.Misc"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1111-L1112","name":"List.toRBMap","line":1111,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#List.toRBMap","doc":"`O(n log n)`. Build a tree from an unsorted list by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#List.toRBMap\"><span class=\"name\">List</span>.<span class=\"name\">toRBMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1104-L1104","name":"Std.RBMap.sdiff","line":1104,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.sdiff","doc":"`O(n₁ * (log n₁ + log n₂))`. Constructs the set of all elements of `t₁` that are not in `t₂`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.sdiff\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">sdiff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1098-L1099","name":"Std.RBMap.filter","line":1098,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.filter","doc":"`O(n * log n)`. Constructs the set of all elements satisfying `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.filter\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1093-L1095","name":"Std.RBMap.intersectWith","line":1093,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.intersectWith","doc":"`O(n₁ * log (n₁ + n₂))`. Intersects the maps `t₁` and `t₂`\nusing `mergeFn a b` to produce the new value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.intersectWith\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">intersectWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mergeFn : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">δ</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1086-L1087","name":"Std.RBMap.mergeWith","line":1086,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.mergeWith","doc":"`O(n₂ * log (n₁ + n₂))`. Merges the maps `t₁` and `t₂`, if a key `a : α` exists in both,\nthen use `mergeFn a b₁ b₂` to produce the new merged value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.mergeWith\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mergeWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mergeFn : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1079-L1080","name":"Std.RBMap.find!","line":1079,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.find!","doc":"Attempts to find the value with key `k : α` in `t` and panics if there is no such key. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.find!\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1076-L1076","name":"Std.RBMap.max!","line":1076,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.max!","doc":"`O(log n)`. Returns the maximum element of the map, or panics if the map is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.max!\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1073-L1073","name":"Std.RBMap.min!","line":1073,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.min!","doc":"`O(log n)`. Returns the minimum element of the map, or panics if the map is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.min!\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1070-L1070","name":"Std.RBMap.size","line":1070,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.size","doc":"`O(n)`. The number of items in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.size\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1067-L1067","name":"Std.RBMap.instBEqRBMap","line":1067,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instBEqRBMap","doc":"Returns true if `t₁` and `t₂` have the same keys and values\n(assuming `cmp` and `==` are compatible), ignoring the internal tree structure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instBEqRBMap\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instBEqRBMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1060-L1061","name":"Std.RBMap.eqKeys","line":1060,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.eqKeys","doc":"Asserts that `t₁` and `t₂` have the same set of keys (up to equality). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.eqKeys\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">eqKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1056-L1057","name":"Std.RBMap.all₂","line":1056,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.all₂","doc":"Asserts that `t₁` and `t₂` have the same number of elements in the same order,\nand `R` holds pairwise between them. The tree structure is ignored.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.all₂\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">all₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpγ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">γ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">δ</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">γ</span> <span class=\"fn\">δ</span> <span class=\"fn\">cmpγ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1050-L1050","name":"Std.RBMap.any","line":1050,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.any","doc":"`O(n)`. Returns true if the given predicate is true for any item in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.any\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1047-L1047","name":"Std.RBMap.all","line":1047,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.all","doc":"`O(n)`. Returns true if the given predicate is true for all items in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.all\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1044-L1044","name":"Std.RBMap.contains","line":1044,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.contains","doc":"`O(log n)`. Returns true if the given key `a` is in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.contains\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1040-L1041","name":"Std.RBMap.lowerBound?","line":1040,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.lowerBound?","doc":"`O(log n)`. `lowerBound? k` retrieves the key-value pair of the largest key\nsmaller than or equal to `k`, if it exists.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.lowerBound?\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1034-L1034","name":"Std.RBMap.findD","line":1034,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.findD","doc":"`O(log n)`. Find the value corresponding to key `k`, or return `v₀` if it is not in the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.findD\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₀ : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1031-L1031","name":"Std.RBMap.find?","line":1031,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.find?","doc":"`O(log n)`. Find the value corresponding to key `k`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.find?\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1028-L1028","name":"Std.RBMap.findEntry?","line":1028,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.findEntry?","doc":"`O(log n)`. Find an entry in the tree with key equal to `k`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.findEntry?\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1024-L1025","name":"Std.RBMap.ofArray","line":1024,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.ofArray","doc":"`O(n log n)`. Build a tree from an unsorted array by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.ofArray\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1020-L1021","name":"Std.RBMap.ofList","line":1020,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.ofList","doc":"`O(n log n)`. Build a tree from an unsorted list by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1017-L1017","name":"Std.RBMap.erase","line":1017,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.erase","doc":"`O(log n)`. Remove an element `k` from the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.erase\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1014-L1014","name":"Std.RBMap.insert","line":1014,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.insert","doc":"`O(log n)`. Insert key-value pair `(k, v)` into the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1010-L1011","name":"Std.RBMap.instReprRBMap","line":1010,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instReprRBMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instReprRBMap\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instReprRBMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1008-L1008","name":"Std.RBMap.max","line":1008,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.max","doc":"`O(log n)`. Returns the key-value pair `(a, b)` such that `a ≥ k` for all keys in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.max\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1005-L1005","name":"Std.RBMap.min","line":1005,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.min","doc":"`O(log n)`. Returns the key-value pair `(a, b)` such that `a ≤ k` for all keys in the RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.min\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L1002-L1002","name":"Std.RBMap.toList","line":1002,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.toList","doc":"`O(n)`. Convert the tree to a list in ascending order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L999-L999","name":"Std.RBMap.isEmpty","line":999,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.isEmpty","doc":"`O(1)`. Is the tree empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L996-L996","name":"Std.RBMap.instStreamStream_1","line":996,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instStreamStream_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instStreamStream_1\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instStreamStream_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.Stream\">Std.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L995-L995","name":"Std.RBMap.instToStreamValuesStream","line":995,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instToStreamValuesStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instToStreamValuesStream\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instToStreamValuesStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values\">Std.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.Stream\">Std.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L990-L993","name":"Std.RBMap.Values.Stream.next?","line":990,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.Stream.next?","doc":"`O(1)` amortized, `O(log n)` worst case: Get the next element from the stream. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.Stream.next?\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">Stream</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.Stream\">Std.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.Stream\">Std.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L987-L987","name":"Std.RBMap.Values.toStream","line":987,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.toStream","doc":"A stream over the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.toStream\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">toStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values\">Std.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.Stream\">Std.RBMap.Values.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L984-L984","name":"Std.RBMap.Values.Stream","line":984,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.Stream","doc":"The result of `toStream` on a `Values`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.Stream\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">Stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L980-L981","name":"Std.RBMap.instForMValues","line":980,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instForMValues","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instForMValues\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForMValues</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM\">ForM</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values\">Std.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L977-L978","name":"Std.RBMap.instForInValues","line":977,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instForInValues","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instForInValues\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForInValues</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values\">Std.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L975-L975","name":"Std.RBMap.instCoeHeadValuesList","line":975,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instCoeHeadValuesList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instCoeHeadValuesList\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instCoeHeadValuesList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHead\">CoeHead</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values\">Std.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L973-L973","name":"Std.RBMap.instCoeHeadValuesArray","line":973,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instCoeHeadValuesArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instCoeHeadValuesArray\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instCoeHeadValuesArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHead\">CoeHead</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values\">Std.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L971-L971","name":"Std.RBMap.Values.toList","line":971,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.toList","doc":"`O(n)`. Constructs the list of values of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L969-L969","name":"Std.RBMap.Values.toArray","line":969,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.toArray","doc":"`O(n)`. Constructs the array of values of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L967-L967","name":"Std.RBMap.values","line":967,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.values","doc":"The \"keys\" of the map. This is an `O(1)` wrapper operation, which\ncan be used in `for` loops or converted to an array or list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.values\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">values</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values\">Std.RBMap.Values</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L961-L961","name":"Std.RBMap.Values","line":961,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Values","doc":"An \"iterator\" over the values of the map. This is a trivial wrapper over the underlying map,\nbut it comes with a small API to use it in a `for` loop or convert it to an array or list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Values\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Values</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L954-L955","name":"Std.RBMap.valuesList","line":954,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.valuesList","doc":"`O(n)`. Constructs the list of values of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.valuesList\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">valuesList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L950-L951","name":"Std.RBMap.valuesArray","line":950,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.valuesArray","doc":"`O(n)`. Constructs the array of values of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.valuesArray\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">valuesArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L947-L947","name":"Std.RBMap.instStreamStream","line":947,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instStreamStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instStreamStream\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instStreamStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.Stream\">Std.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L946-L946","name":"Std.RBMap.instToStreamKeysStream","line":946,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instToStreamKeysStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instToStreamKeysStream\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instToStreamKeysStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys\">Std.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.Stream\">Std.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L941-L944","name":"Std.RBMap.Keys.Stream.next?","line":941,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.Stream.next?","doc":"`O(1)` amortized, `O(log n)` worst case: Get the next element from the stream. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.Stream.next?\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">Stream</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.Stream\">Std.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.Stream\">Std.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L938-L938","name":"Std.RBMap.Keys.toStream","line":938,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.toStream","doc":"A stream over the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.toStream\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">toStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys\">Std.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.Stream\">Std.RBMap.Keys.Stream</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L935-L935","name":"Std.RBMap.Keys.Stream","line":935,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.Stream","doc":"The result of `toStream` on a `Keys`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.Stream\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">Stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L931-L932","name":"Std.RBMap.instForMKeys","line":931,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instForMKeys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instForMKeys\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForMKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM\">ForM</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys\">Std.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L928-L929","name":"Std.RBMap.instForInKeys","line":928,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instForInKeys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instForInKeys\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForInKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys\">Std.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L926-L926","name":"Std.RBMap.instCoeHeadKeysList","line":926,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instCoeHeadKeysList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instCoeHeadKeysList\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instCoeHeadKeysList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHead\">CoeHead</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys\">Std.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L924-L924","name":"Std.RBMap.instCoeHeadKeysArray","line":924,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instCoeHeadKeysArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instCoeHeadKeysArray\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instCoeHeadKeysArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHead\">CoeHead</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys\">Std.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L922-L922","name":"Std.RBMap.Keys.toList","line":922,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.toList","doc":"`O(n)`. Constructs the list of keys of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L920-L920","name":"Std.RBMap.Keys.toArray","line":920,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.toArray","doc":"`O(n)`. Constructs the array of keys of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L918-L918","name":"Std.RBMap.keys","line":918,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.keys","doc":"The keys of the map. This is an `O(1)` wrapper operation, which\ncan be used in `for` loops or converted to an array or list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.keys\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys\">Std.RBMap.Keys</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L912-L912","name":"Std.RBMap.Keys","line":912,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys","doc":"An \"iterator\" over the keys of the map. This is a trivial wrapper over the underlying map,\nbut it comes with a small API to use it in a `for` loop or convert it to an array or list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.Keys\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Keys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L905-L906","name":"Std.RBMap.keysList","line":905,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.keysList","doc":"`O(n)`. Constructs the list of keys of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.keysList\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">keysList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L901-L902","name":"Std.RBMap.keysArray","line":901,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.keysArray","doc":"`O(n)`. Constructs the array of keys of the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.keysArray\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">keysArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L897-L898","name":"Std.RBMap.instToStreamRBMapStreamProd","line":897,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instToStreamRBMapStreamProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instToStreamRBMapStreamProd\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instToStreamRBMapStreamProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L895-L895","name":"Std.RBMap.instForInRBMapProd","line":895,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.instForInRBMapProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.instForInRBMapProd\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instForInRBMapProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L892-L893","name":"Std.RBMap.forM","line":892,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.forM","doc":"`O(n)`. Run monadic function `f` on each element of the tree (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.forM\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L888-L889","name":"Std.RBMap.foldlM","line":888,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.foldlM","doc":"`O(n)`. Fold a monadic function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.foldlM\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L884-L885","name":"Std.RBMap.foldr","line":884,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.foldr","doc":"`O(n)`. Fold a function on the values from right to left (in decreasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.foldr\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L880-L881","name":"Std.RBMap.foldl","line":880,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.foldl","doc":"`O(n)`. Fold a function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.foldl\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L874-L874","name":"Std.RBMap.single","line":874,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.single","doc":"`O(1)`. Construct a new tree with one key-value pair `k, v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.single\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L871-L871","name":"Std.instInhabitedRBMap","line":871,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.instInhabitedRBMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.instInhabitedRBMap\"><span class=\"name\">Std</span>.<span class=\"name\">instInhabitedRBMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L868-L869","name":"Std.instEmptyCollectionRBMap","line":868,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.instEmptyCollectionRBMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.instEmptyCollectionRBMap\"><span class=\"name\">Std</span>.<span class=\"name\">instEmptyCollectionRBMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L865-L866","name":"Std.RBMap.empty","line":865,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap.empty","doc":"`O(1)`. Construct a new empty map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap.empty\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L861-L862","name":"Std.mkRBMap","line":861,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.mkRBMap","doc":"`O(1)`. Construct a new empty map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.mkRBMap\"><span class=\"name\">Std</span>.<span class=\"name\">mkRBMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L857-L858","name":"Std.RBMap","line":857,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBMap","doc":"An `RBMap` is a self-balancing binary search tree, used to store a key-value map.\nThe `cmp` function is the comparator that will be used for performing searches;\nit should satisfy the requirements of `TransCmp` for it to have sensible behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L846-L846","name":"Std.RBSet.sdiff","line":846,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.sdiff","doc":"`O(n₁ * (log n₁ + log n₂))`. Constructs the set of all elements of `t₁` that are not in `t₂`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.sdiff\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">sdiff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L840-L841","name":"Std.RBSet.map","line":840,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.map","doc":"`O(n * log n)`. Map a function on every value in the set.\nIf the function is monotone, consider using the more efficient `RBSet.mapMonotone` instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.map\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpβ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L833-L834","name":"Std.RBSet.filter","line":833,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.filter","doc":"`O(n * log n)`. Constructs the set of all elements satisfying `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.filter\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L825-L830","name":"Std.RBSet.intersectWith","line":825,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.intersectWith","doc":"`O(n₁ * log (n₁ + n₂))`. Intersects the maps `t₁` and `t₂`\nusing `mergeFn a b` to produce the new value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.intersectWith\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">intersectWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpγ : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">γ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mergeFn : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpβ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">γ</span> <span class=\"fn\">cmpγ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L817-L819","name":"Std.RBSet.mergeWith","line":817,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.mergeWith","doc":"`O(n₂ * log (n₁ + n₂))`. Merges the maps `t₁` and `t₂`. If equal keys exist in both,\nthen use `mergeFn a₁ a₂` to produce the new merged value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.mergeWith\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mergeWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mergeFn : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L810-L811","name":"Std.RBSet.union","line":810,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.union","doc":"`O(n₂ * log (n₁ + n₂))`. Merges the maps `t₁` and `t₂`.\nIf equal keys exist in both, the key from `t₂` is preferred.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.union\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L803-L804","name":"Std.RBSet.alterP","line":803,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.alterP","doc":"`O(log n)`. `alterP cut f t` simultaneously handles inserting, erasing and replacing an element\nusing a function `f : Option α → Option α`. It is passed the result of `t.findP? cut`\nand can either return `none` to remove the element or `some a` to replace/insert\nthe element with `a` (which must have the same ordering properties as the original element).\n\nThe element is used linearly if `t` is unshared.\n\nThe `AlterWF` assumption is required because `f` may change\nthe ordering properties of the element, which would break the invariants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.alterP\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">alterP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[wf : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.AlterWF\">Std.RBSet.AlterWF</a> <span class=\"fn\">t</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L790-L790","name":"Std.RBSet.AlterWF.wf","line":790,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.AlterWF.wf","doc":"The resulting tree is well formed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.AlterWF.wf\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">AlterWF</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.AlterWF\">Std.RBSet.AlterWF</a> <span class=\"fn\">t</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.alter\">Std.RBNode.alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L788-L788","name":"Std.RBSet.AlterWF.mk","line":788,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.AlterWF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.AlterWF.mk\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">AlterWF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(wf : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.alter\">Std.RBNode.alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.AlterWF\">Std.RBSet.AlterWF</a> <span class=\"fn\">t</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L788-L790","name":"Std.RBSet.AlterWF","line":788,"kind":"class","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.AlterWF","doc":"The predicate asserting that the result of `alterP` is safe to construct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.AlterWF\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">AlterWF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L784-L785","name":"Std.RBSet.modifyP","line":784,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.modifyP","doc":"`O(log n)`. In-place replace an element found by `cut`.\nThis takes the element out of the tree while `f` runs,\nso it uses the element linearly if `t` is unshared.\n\nThe `ModifyWF` assumption is required because `f` may change\nthe ordering properties of the element, which would break the invariants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.modifyP\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">modifyP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[wf : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF\">Std.RBSet.ModifyWF</a> <span class=\"fn\">t</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L774-L774","name":"Std.RBSet.ModifyWF.wf","line":774,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF.wf","doc":"The resulting tree is well formed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF.wf\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ModifyWF</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF\">Std.RBSet.ModifyWF</a> <span class=\"fn\">t</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.modify\">Std.RBNode.modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L772-L772","name":"Std.RBSet.ModifyWF.mk","line":772,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF.mk\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ModifyWF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(wf : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.modify\">Std.RBNode.modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF\">Std.RBSet.ModifyWF</a> <span class=\"fn\">t</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L772-L774","name":"Std.RBSet.ModifyWF","line":772,"kind":"class","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF","doc":"The predicate asserting that the result of `modifyP` is safe to construct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ModifyWF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L768-L769","name":"Std.RBSet.find!","line":768,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.find!","doc":"`O(log n)`. Attempts to find the value with key `k : α` in `t` and panics if there is no such key.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find!\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L762-L763","name":"Std.RBSet.findP!","line":762,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.findP!","doc":"`O(log n)`. Attempts to find the value with key `k : α` in `t` and panics if there is no such key.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.findP!\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L757-L757","name":"Std.RBSet.max!","line":757,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.max!","doc":"`O(log n)`. Returns the maximum element of the tree, or panics if the tree is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.max!\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">max!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L754-L754","name":"Std.RBSet.min!","line":754,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.min!","doc":"`O(log n)`. Returns the minimum element of the tree, or panics if the tree is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.min!\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">min!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L751-L751","name":"Std.RBSet.size","line":751,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.size","doc":"`O(n)`. The number of items in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.size\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L747-L748","name":"Std.RBSet.instBEqRBSet","line":747,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.instBEqRBSet","doc":"Returns true if `t₁` and `t₂` are equal as sets (assuming `cmp` and `==` are compatible),\nignoring the internal tree structure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.instBEqRBSet\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instBEqRBSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L740-L741","name":"Std.RBSet.Slow.instDecidableMem","line":740,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.Slow.instDecidableMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.Slow.instDecidableMem\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.Mem\">Std.RBSet.Mem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L737-L738","name":"Std.RBSet.Slow.instDecidableMemP","line":737,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.Slow.instDecidableMemP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.Slow.instDecidableMemP\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableMemP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.MemP\">Std.RBSet.MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L734-L735","name":"Std.RBSet.Slow.instDecidableEMem","line":734,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.Slow.instDecidableEMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.Slow.instDecidableEMem\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableEMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.EMem\">Std.RBSet.EMem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L729-L729","name":"Std.RBSet.instMembershipRBSet","line":729,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.instMembershipRBSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.instMembershipRBSet\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instMembershipRBSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L727-L727","name":"Std.RBSet.Mem","line":727,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.Mem","doc":"True if `x` is equivalent to an element of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.Mem\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L724-L724","name":"Std.RBSet.MemP","line":724,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.MemP","doc":"True if the specified `cut` matches at least one element of of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.MemP\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">MemP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L721-L721","name":"Std.RBSet.EMem","line":721,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.EMem","doc":"True if `x` is an element of `t` \"exactly\", i.e. up to equality, not the `cmp` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.EMem\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">EMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L717-L718","name":"Std.RBSet.all₂","line":717,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.all₂","doc":"Asserts that `t₁` and `t₂` have the same number of elements in the same order,\nand `R` holds pairwise between them. The tree structure is ignored.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.all₂\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">all₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpβ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L711-L711","name":"Std.RBSet.any","line":711,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.any","doc":"`O(n)`. Returns true if the given predicate is true for any item in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.any\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L708-L708","name":"Std.RBSet.all","line":708,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.all","doc":"`O(n)`. Returns true if the given predicate is true for all items in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.all\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L704-L705","name":"Std.RBSet.ofArray","line":704,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.ofArray","doc":"`O(n log n)`. Build a tree from an unsorted array by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.ofArray\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L700-L701","name":"Std.RBSet.ofList","line":700,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.ofList","doc":"`O(n log n)`. Build a tree from an unsorted list by inserting them one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L697-L697","name":"Std.RBSet.contains","line":697,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.contains","doc":"`O(log n)`. Returns true if the given key `a` is in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.contains\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L694-L694","name":"Std.RBSet.containsP","line":694,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.containsP","doc":"`O(log n)`. Returns true if the given cut returns `eq` for something in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.containsP\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">containsP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L691-L691","name":"Std.RBSet.lowerBound?","line":691,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.lowerBound?","doc":"`O(log n)`. `lowerBound? k` retrieves the largest entry smaller than or equal to `k`,\nif it exists.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.lowerBound?\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L684-L685","name":"Std.RBSet.lowerBoundP?","line":684,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.lowerBoundP?","doc":"`O(log n)`. `lowerBoundP cut` retrieves the largest entry comparing `lt` or `eq` under `cut`,\nif it exists.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.lowerBoundP?\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBoundP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L678-L678","name":"Std.RBSet.findPD","line":678,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.findPD","doc":"`O(log n)`. Find an element in the tree, or return a default value `v₀`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.findPD\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findPD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₀ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L675-L675","name":"Std.RBSet.find?","line":675,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.find?","doc":"`O(log n)`. Returns an element in the tree equivalent to `x` if one exists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L672-L672","name":"Std.RBSet.findP?","line":672,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.findP?","doc":"`O(log n)`. Find an element in the tree using a cut function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.findP?\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L668-L669","name":"Std.RBSet.erase","line":668,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.erase","doc":"`O(log n)`. Remove an element from the tree using a cut function.\nThe `cut` function is used to locate an element in the tree:\nit returns `.gt` if we go too high and `.lt` if we go too low;\nif it returns `.eq` we will remove the element.\n(The function `cmp k` for some key `k` is a valid cut function, but we can also use cuts that\nare not of this form as long as they are suitably monotonic.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.erase\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L658-L658","name":"Std.RBSet.insert","line":658,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.insert","doc":"`O(log n)`. Insert element `v` into the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L654-L655","name":"Std.RBSet.instReprRBSet","line":654,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.instReprRBSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.instReprRBSet\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instReprRBSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L652-L652","name":"Std.RBSet.max","line":652,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.max","doc":"`O(log n)`. Returns the entry `a` such that `a ≥ k` for all keys in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.max\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L649-L649","name":"Std.RBSet.min","line":649,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.min","doc":"`O(log n)`. Returns the entry `a` such that `a ≤ k` for all keys in the RBSet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.min\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L646-L646","name":"Std.RBSet.toList","line":646,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.toList","doc":"`O(n)`. Convert the tree to a list in ascending order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L641-L643","name":"Std.RBSet.isEmpty","line":641,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.isEmpty","doc":"`O(1)`. Is the tree empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L638-L638","name":"Std.RBSet.instToStreamRBSetStream","line":638,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.instToStreamRBSetStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.instToStreamRBSetStream\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instToStreamRBSetStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L635-L636","name":"Std.RBSet.instForInRBSet","line":635,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.instForInRBSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.instForInRBSet\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instForInRBSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L633-L633","name":"Std.RBSet.forM","line":633,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.forM","doc":"`O(n)`. Run monadic function `f` on each element of the tree (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.forM\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L629-L630","name":"Std.RBSet.foldlM","line":629,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.foldlM","doc":"`O(n)`. Fold a monadic function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.foldlM\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L626-L626","name":"Std.RBSet.foldr","line":626,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.foldr","doc":"`O(n)`. Fold a function on the values from right to left (in decreasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.foldr\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L623-L623","name":"Std.RBSet.foldl","line":623,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.foldl","doc":"`O(n)`. Fold a function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.foldl\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L619-L620","name":"Std.RBSet.single","line":619,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.single","doc":"`O(1)`. Construct a new tree with one element `v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.single\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L616-L616","name":"Std.RBSet.instInhabitedRBSet","line":616,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.instInhabitedRBSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.instInhabitedRBSet\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instInhabitedRBSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L614-L614","name":"Std.RBSet.instEmptyCollectionRBSet","line":614,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.instEmptyCollectionRBSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.instEmptyCollectionRBSet\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instEmptyCollectionRBSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L612-L612","name":"Std.RBSet.empty","line":612,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet.empty","doc":"`O(1)`. Construct a new empty tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.empty\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L607-L607","name":"Std.mkRBSet","line":607,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.mkRBSet","doc":"`O(1)`. Construct a new empty tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.mkRBSet\"><span class=\"name\">Std</span>.<span class=\"name\">mkRBSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L604-L604","name":"Std.RBSet","line":604,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBSet","doc":"An `RBSet` is a self-balancing binary search tree.\nThe `cmp` function is the comparator that will be used for performing searches;\nit should satisfy the requirements of `TransCmp` for it to have sensible behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L591-L593","name":"Std.RBNode.WF.erase","line":591,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.WF.erase","doc":"Erasing from a well-formed tree yields another well-formed tree.\n(See `Ordered.erase` and `Balanced.erase` for the actual proofs.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF.erase\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.erase\">Std.RBNode.erase</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L588-L590","name":"Std.RBNode.WF.insert","line":588,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.WF.insert","doc":"Inserting into a well-formed tree yields another well-formed tree.\n(See `Ordered.insert` and `Balanced.insert` for the actual proofs.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF.insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L585-L587","name":"Std.RBNode.WF.mk","line":585,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.WF.mk","doc":"The actual well-formedness invariant: a red-black tree has the\nordering and balance invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF.mk\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L584-L593","name":"Std.RBNode.WF","line":584,"kind":"inductive","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.WF","doc":"The well-formedness invariant for a red-black tree. The first constructor is the real invariant,\nand the others allow us to \"cheat\" in this file and define `insert` and `erase`,\nwhich have more complex proofs that are delayed to `Std.Data.RBMap.Lemmas`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L575-L577","name":"Std.RBNode.Balanced.black","line":575,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced.black","doc":"A black node is balanced with black-height `n + 1`\nif its children both have black-height `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced.black\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">black</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">x</span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">y</span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span> <span class=\"fn\">y</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L572-L574","name":"Std.RBNode.Balanced.red","line":572,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced.red","doc":"A red node is balanced with black-height `n`\nif its children are both black with with black-height `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced.red\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">x</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">y</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span> →\n    <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span> <span class=\"fn\">y</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L570-L571","name":"Std.RBNode.Balanced.nil","line":570,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced.nil","doc":"A nil node is balanced with black-height 0, and it is considered black. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced.nil\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">Std.RBNode.nil</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L569-L577","name":"Std.RBNode.Balanced","line":569,"kind":"inductive","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced","doc":"The red-black balance invariant. `Balanced t c n` says that the color of the root node is `c`,\nand the black-height (the number of black nodes on any path from the root) of the tree is `n`.\nAdditionally, every red node must have black children.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L556-L562","name":"Std.RBNode.Slow.instDecidableOrdered","line":556,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Slow.instDecidableOrdered","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Slow.instDecidableOrdered\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableOrdered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L550-L552","name":"Std.RBNode.Ordered","line":550,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered","doc":"The ordering invariant of a red-black tree, which is a binary search tree.\nThis says that every element of a left subtree is less than the root, and\nevery element in the right subtree is greater than the root, where the\nless than relation `x < y` is understood to mean `cmp x y = .lt`.\n\nBecause we do not assume that `cmp` is lawful when stating this property,\nwe write it in such a way that if `cmp` is not lawful then the condition holds trivially.\nThat way we can prove the ordering invariants without assuming `cmp` is lawful.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L529-L538","name":"Std.RBNode.alter","line":529,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.alter","doc":"`alter cut f t` simultaneously handles inserting, erasing and replacing an element\nusing a function `f : Option α → Option α`. It is passed the result of `t.find? cut`\nand can either return `none` to remove the element or `some a` to replace/insert\nthe element with `a` (which must have the same ordering properties as the original element).\n\nThe element is used linearly if `t` is unshared.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.alter\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L516-L519","name":"Std.RBNode.modify","line":516,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.modify","doc":"`modify cut f t` uses `cut` to find an element,\nthen modifies the element using `f` and reinserts it into the tree.\n\nBecause the tree structure is not modified,\n`f` must not modify the ordering properties of the element.\n\nThe element in `t` is used linearly if `t` is unshared.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.modify\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L502-L505","name":"Std.RBNode.Path.erase","line":502,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.erase","doc":"`path.erase t v` removes the root element of `t` from the tree, assuming that `(t, path)` was\nthe result of a previous `zoom` operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.erase\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L491-L496","name":"Std.RBNode.Path.del","line":491,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.del","doc":"`path.del t c` does the second part of `RBNode.del`, which unwinds the stack\nand rebuilds the tree. The `c` argument is the color of the node before the deletion\n(we used `t₀.isBlack` for this in `RBNode.del` but the original tree is no longer\navailable in this formulation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.del\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L480-L483","name":"Std.RBNode.Path.insert","line":480,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insert","doc":"`path.insert t v` inserts element `v` into the tree, assuming that `(t, path)` was the result of a\nprevious `zoom` operation (so either the root of `t` is equivalent to `v` or it is empty).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L473-L474","name":"Std.RBNode.Path.insertNew","line":473,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insertNew","doc":"`path.insertNew v` inserts element `v` into the tree, assuming that `path` is zoomed in\non a `nil` node such that inserting a new element at this position is valid.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insertNew\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insertNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L462-L467","name":"Std.RBNode.Path.ins","line":462,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.ins","doc":"This function does the second part of `RBNode.ins`,\nwhich unwinds the stack and rebuilds the tree.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.ins\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L450-L456","name":"Std.RBNode.zoom","line":450,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom","doc":"Like `find?`, but instead of just returning the element, it returns the entire subtree\nat the element and a path back to the root for reconstructing the tree.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">zoom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L441-L444","name":"Std.RBNode.Path.fill","line":441,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.fill","doc":"Fills the `Path` with a subtree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.fill\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">fill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L437-L438","name":"Std.RBNode.Path.right","line":437,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.right","doc":"A path that goes down the right subtree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.right\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parent : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L435-L436","name":"Std.RBNode.Path.left","line":435,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.left","doc":"A path that goes down the left subtree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.left\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(parent : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L433-L434","name":"Std.RBNode.Path.root","line":433,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.root","doc":"The root of the tree, which is the end of the path of parents. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.root\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L432-L438","name":"Std.RBNode.Path","line":432,"kind":"inductive","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Path","doc":"A `RBNode.Path α` is a \"cursor\" into an `RBNode` which represents the path\nfrom the root to a subtree. Note that the path goes from the target subtree\nup to the root, which is reversed from the normal way data is stored in the tree.\nSee [Zipper](https://en.wikipedia.org/wiki/Zipper_(data_structure)) for more information.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L424-L424","name":"Std.RBNode.toArray","line":424,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.toArray","doc":"Converts the tree into an array in increasing sorted order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L419-L421","name":"Std.RBNode.map","line":419,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.map","doc":"`O(n)`. Map a function on every value in the tree.\nThis requires `IsMonotone` on the function in order to preserve the order invariant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.map\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L411-L413","name":"Std.RBNode.root?","line":411,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.root?","doc":"Returns the root of the tree, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.root?\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">root?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L402-L408","name":"Std.RBNode.lowerBound?","line":402,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?","doc":"`lowerBound? cut` retrieves the largest entry smaller than or equal to `cut`, if it exists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L393-L399","name":"Std.RBNode.find?","line":393,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.find?","doc":"Finds an element in the tree satisfying the `cut` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L390-L390","name":"Std.RBNode.erase","line":390,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.erase","doc":"The `erase cut t` function removes an element from the tree `t`.\nThe `cut` function is used to locate an element in the tree:\nit returns `.gt` if we go too high and `.lt` if we go too low;\nif it returns `.eq` we will remove the element.\n(The function `cmp k` for some key `k` is a valid cut function, but we can also use cuts that\nare not of this form as long as they are suitably monotonic.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.erase\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L370-L380","name":"Std.RBNode.del","line":370,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.del","doc":"The core of the `erase` function. The tree returned from this function has a broken invariant,\nwhich is restored in `erase`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.del\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L350-L362","name":"Std.RBNode.append","line":350,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.append","doc":"Concatenate two trees with the same black-height. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.append\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L345-L347","name":"Std.RBNode.size","line":345,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.size","doc":"The number of nodes in the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.size\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L336-L342","name":"Std.RBNode.balRight","line":336,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.balRight","doc":"Rebalancing a tree which has shrunk on the right. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balRight\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L327-L333","name":"Std.RBNode.balLeft","line":327,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.balLeft","doc":"Rebalancing a tree which has shrunk on the left. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balLeft\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L322-L324","name":"Std.RBNode.setRed","line":322,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.setRed","doc":"Recolor the root of the tree to `red` if possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setRed\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L314-L317","name":"Std.RBNode.insert","line":314,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.insert","doc":"`insert cmp t v` inserts element `v` into the tree, using the provided comparator\n`cmp` to put it in the right place and automatically rebalancing the tree as necessary.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L297-L308","name":"Std.RBNode.ins","line":297,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.ins","doc":"The core of the `insert` function. This adds an element `x` to a balanced red-black tree.\nImportantly, the result of calling `ins` is not a proper red-black tree,\nbecause it has a broken balance invariant.\n(See `Balanced.ins` for the balance invariant of `ins`.)\nThe `insert` function does the final fixup needed to restore the invariant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.ins\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L284-L286","name":"Std.RBNode.setBlack","line":284,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack","doc":"Change the color of the root to `black`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L279-L281","name":"Std.RBNode.isBlack","line":279,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.isBlack","doc":"Returns `black` if the node is black, otherwise `red`.\n(Nil nodes are treated as `red`, which is not the usual convention but useful for deletion.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.isBlack\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L271-L273","name":"Std.RBNode.isRed","line":271,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.isRed","doc":"Returns `red` if the node is red, otherwise `black`. (Nil nodes are treated as `black`.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.isRed\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L265-L268","name":"Std.RBNode.balance2","line":265,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.balance2","doc":"The second half of Okasaki's `balance`, concerning red-red sequences in the right child. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance2\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L259-L262","name":"Std.RBNode.balance1","line":259,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.balance1","doc":"The first half of Okasaki's `balance`, concerning red-red sequences in the left child. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance1\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L249-L256","name":"Std.RBNode.isOrdered","line":249,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.isOrdered","doc":"`O(n)`. Verifies an ordering relation on the nodes of the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.isOrdered\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isOrdered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L246-L246","name":"Std.RBNode.instDecidableCmpEq","line":246,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instDecidableCmpEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instDecidableCmpEq\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableCmpEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} → <span class=\"fn\">{<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} → <span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L244-L244","name":"Std.RBNode.cmpEq_iff","line":244,"kind":"theorem","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>],\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L242-L242","name":"Std.RBNode.cmpEq","line":242,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq","doc":"We say that `x ≈ y` under the comparator `cmp` if `cmp x y = .eq`. See also `cmpLT`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L239-L239","name":"Std.RBNode.instDecidableCmpLT","line":239,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instDecidableCmpLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instDecidableCmpLT\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableCmpLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} → <span class=\"fn\">{<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} → <span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>) → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L237-L237","name":"Std.RBNode.cmpLT_iff","line":237,"kind":"theorem","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>],\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L235-L235","name":"Std.RBNode.cmpLT","line":235,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT","doc":"We say that `x < y` under the comparator `cmp` if `cmp x y = .lt`.\n\n* In order to avoid assuming the comparator is always lawful, we use a\n  local `∀ [TransCmp cmp]` binder in the relation so that the ordering\n  properties of the tree only need to hold if the comparator is lawful.\n* The `Nonempty` wrapper is a no-op because this is already a proposition,\n  but it prevents the `[TransCmp cmp]` binder from being introduced when we don't want it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L223-L224","name":"Std.RBNode.instBEqRBNode","line":223,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instBEqRBNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instBEqRBNode\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instBEqRBNode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L217-L221","name":"Std.RBNode.all₂","line":217,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.all₂","doc":"Asserts that `t₁` and `t₂` have the same number of elements in the same order,\nand `R` holds pairwise between them. The tree structure is ignored.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.all₂\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">all₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₁ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L210-L211","name":"Std.RBNode.Slow.instDecidableMem","line":210,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Slow.instDecidableMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Slow.instDecidableMem\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Mem\">Std.RBNode.Mem</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L207-L208","name":"Std.RBNode.Slow.instDecidableMemP","line":207,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Slow.instDecidableMemP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Slow.instDecidableMemP\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableMemP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.MemP\">Std.RBNode.MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L204-L205","name":"Std.RBNode.Slow.instDecidableEMem","line":204,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Slow.instDecidableEMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Slow.instDecidableEMem\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Slow</span>.<span class=\"name\">instDecidableEMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.EMem\">Std.RBNode.EMem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L199-L199","name":"Std.RBNode.Mem","line":199,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Mem","doc":"True if `x` is equivalent to an element of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Mem\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L196-L196","name":"Std.RBNode.MemP","line":196,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.MemP","doc":"True if the specified `cut` matches at least one element of of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.MemP\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">MemP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L193-L193","name":"Std.RBNode.instMembershipRBNode","line":193,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instMembershipRBNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instMembershipRBNode\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instMembershipRBNode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L191-L191","name":"Std.RBNode.EMem","line":191,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.EMem","doc":"True if `x` is an element of `t` \"exactly\", i.e. up to equality, not the `cmp` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.EMem\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">EMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L187-L188","name":"Std.RBNode.instDecidableAny","line":187,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instDecidableAny","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instDecidableAny\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableAny</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Any\">Std.RBNode.Any</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L184-L185","name":"Std.RBNode.any_iff","line":184,"kind":"theorem","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.any_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.any_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">any_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.any\">Std.RBNode.any</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Any\">Std.RBNode.Any</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L180-L182","name":"Std.RBNode.Any","line":180,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Any","doc":"Asserts that `p` holds on some element of the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Any\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L176-L177","name":"Std.RBNode.instDecidableAll","line":176,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instDecidableAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instDecidableAll\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L173-L174","name":"Std.RBNode.all_iff","line":173,"kind":"theorem","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.all_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.all_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">all_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.all\">Std.RBNode.all</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L169-L171","name":"Std.RBNode.All.imp","line":169,"kind":"theorem","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.All.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All.imp\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">q</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L165-L167","name":"Std.RBNode.All","line":165,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.All","doc":"Asserts that `p` holds on every element of the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L160-L162","name":"Std.RBNode.any","line":160,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.any","doc":"Returns `true` iff any element of the tree satisfies `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.any\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L155-L157","name":"Std.RBNode.all","line":155,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.all","doc":"Returns `true` iff every element of the tree satisfies `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.all\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L152-L152","name":"Std.RBNode.instStreamStream","line":152,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instStreamStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instStreamStream\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instStreamStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L151-L151","name":"Std.RBNode.instToStreamRBNodeStream","line":151,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instToStreamRBNodeStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instToStreamRBNodeStream\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instToStreamRBNodeStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream\">ToStream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L147-L147","name":"Std.RBNode.Stream.toList","line":147,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList","doc":"`O(n)`. Convert the stream to a list in ascending order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L142-L144","name":"Std.RBNode.Stream.foldr","line":142,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.foldr","doc":"Fold a function on the values from right to left (in decreasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.foldr\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L137-L139","name":"Std.RBNode.Stream.foldl","line":137,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.foldl","doc":"Fold a function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.foldl\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L132-L134","name":"Std.RBNode.Stream.next?","line":132,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.next?","doc":"`O(1)` amortized, `O(log n)` worst case: Get the next element from the stream. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.next?\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L125-L127","name":"Std.RBNode.toStream","line":125,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.toStream","doc":"`O(log n)`. Turn a node into a stream, by descending along the left spine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toStream\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">Std.RBNode.Stream.nil</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L120-L122","name":"Std.RBNode.Stream.cons","line":120,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.cons","doc":"We are ready to deliver element `v` with right child `r`,\nand where `tail` represents all the subtrees we have yet to destructure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.cons\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tail : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L118-L119","name":"Std.RBNode.Stream.nil","line":118,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.nil","doc":"The stream is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.nil\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L117-L122","name":"Std.RBNode.Stream","line":117,"kind":"inductive","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream","doc":"An auxiliary data structure (an iterator) over an `RBNode` which lazily\npulls elements from the left.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L110-L111","name":"Std.RBNode.instForInRBNode","line":110,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instForInRBNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instForInRBNode\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instForInRBNode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L106-L108","name":"Std.RBNode.forIn.visit","line":106,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.forIn.visit","doc":"Inner loop of `forIn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.forIn.visit\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forIn</span>.<span class=\"name\">visit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">σ</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">σ</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L101-L108","name":"Std.RBNode.forIn","line":101,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.forIn","doc":"Implementation of `for x in t` loops over a `RBNode` (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.forIn\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">σ</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L96-L98","name":"Std.RBNode.foldlM","line":96,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.foldlM","doc":"Fold a monadic function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.foldlM\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L91-L93","name":"Std.RBNode.forM","line":91,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.forM","doc":"Run monadic function `f` on each element of the tree (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.forM\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L88-L88","name":"Std.RBNode.toList","line":88,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.toList","doc":"`O(n)`. Convert the tree to a list in ascending order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L83-L85","name":"Std.RBNode.foldr","line":83,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.foldr","doc":"Fold a function on the values from right to left (in decreasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.foldr\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L78-L80","name":"Std.RBNode.foldl","line":78,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.foldl","doc":"Fold a function on the values from left to right (in increasing order). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.foldl\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L73-L75","name":"Std.RBNode.fold","line":73,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.fold","doc":"Fold a function in tree order along the nodes. `v₀` is used at `nil` nodes and\n`f` is used to combine results at branching nodes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.fold\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v₀ : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L64-L67","name":"Std.RBNode.max","line":64,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.max","doc":"The maximum element of a tree is the right-most value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.max\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L58-L61","name":"Std.RBNode.min","line":58,"kind":"def","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.min","doc":"The minimum element of a tree is the left-most value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.min\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L55-L55","name":"Std.RBNode.instEmptyCollectionRBNode","line":55,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.instEmptyCollectionRBNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.instEmptyCollectionRBNode\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instEmptyCollectionRBNode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L50-L50","name":"Std.instReprRBNode","line":50,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.instReprRBNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.instReprRBNode\"><span class=\"name\">Std</span>.<span class=\"name\">instReprRBNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L46-L49","name":"Std.RBNode.node","line":46,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.node","doc":"A node consists of a value `v`, a subtree `l` of smaller items,\nand a subtree `r` of larger items. The color `c` is either `red` or `black`\nand participates in the red-black balance invariant (see `Balanced`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L44-L45","name":"Std.RBNode.nil","line":44,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode.nil","doc":"An empty tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.nil\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L43-L50","name":"Std.RBNode","line":43,"kind":"inductive","docLink":"./Std/Data/RBMap/Basic.html#Std.RBNode","doc":"A red-black tree. (This is an internal implementation detail of the `RBSet` type,\nwhich includes the invariants of the tree.) This is a binary search tree augmented with\na \"color\" field which is either red or black for each node and used to implement\nthe re-balancing operations.\nSee: [Red–black tree](https://en.wikipedia.org/wiki/Red%E2%80%93black_tree)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L34-L34","name":"Std.instReprRBColor","line":34,"kind":"instance","docLink":"./Std/Data/RBMap/Basic.html#Std.instReprRBColor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.instReprRBColor\"><span class=\"name\">Std</span>.<span class=\"name\">instReprRBColor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L32-L33","name":"Std.RBColor.black","line":32,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBColor.black","doc":"Every path from the root to a leaf must pass through the same number of black nodes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\"><span class=\"name\">Std</span>.<span class=\"name\">RBColor</span>.<span class=\"name\">black</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L30-L31","name":"Std.RBColor.red","line":30,"kind":"ctor","docLink":"./Std/Data/RBMap/Basic.html#Std.RBColor.red","doc":"A red node is required to have black children. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\"><span class=\"name\">Std</span>.<span class=\"name\">RBColor</span>.<span class=\"name\">red</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Data/RBMap/Basic.lean#L29-L34","name":"Std.RBColor","line":29,"kind":"inductive","docLink":"./Std/Data/RBMap/Basic.html#Std.RBColor","doc":"In a red-black tree, every node has a color which is either \"red\" or \"black\"\n(this particular choice of colors is conventional). A nil node is considered black.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\"><span class=\"name\">Std</span>.<span class=\"name\">RBColor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}