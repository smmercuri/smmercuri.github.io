{"name":"Std.Lean.Delaborator","instances":[],"imports":["Init","Lean.PrettyPrinter"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Lean/Delaborator.lean#L14-L25","name":"Lean.ppConst","line":14,"kind":"def","docLink":"./Std/Lean/Delaborator.html#Lean.ppConst","doc":"Pretty print a const expression using `delabConst` and generate terminfo.\nThis function avoids inserting `@` if the constant is for a function whose first\nargument is implicit, which is what the default `toMessageData` for `Expr` does.\nPanics if `e` is not a constant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Delaborator.html#Lean.ppConst\"><span class=\"name\">Lean</span>.<span class=\"name\">ppConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"}]}