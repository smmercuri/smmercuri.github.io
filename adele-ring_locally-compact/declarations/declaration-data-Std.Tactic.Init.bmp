{"name":"Std.Tactic.Init","instances":[],"imports":["Init","Std.Lean.Meta.Basic","Lean.Elab.Command","Lean.Elab.Tactic.BuiltinTactic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L115-L116","name":"Std.Tactic.Conv.equals","line":115,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.Conv.equals","doc":"The `conv` tactic `equals` claims that the currently focused subexpression is equal\n to the given expression, and proves this claim using the given tactic.\n```\nexample (P : (Nat → Nat) → Prop) : P (fun n => n - n) := by\n  conv in (_ - _) => equals 0 =>\n    -- current goal: ⊢ n - n = 0\n    apply Nat.sub_self\n  -- current goal: P (fun n => 0)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.Conv.equals\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">equals</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L103-L103","name":"Std.Tactic.Conv.exact","line":103,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.Conv.exact","doc":"`conv` tactic to close a goal using an equality theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.Conv.exact\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L99-L100","name":"Std.Tactic.triv","line":99,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.triv","doc":"Tries to solve the goal using a canonical proof of `True`, or the `rfl` tactic.\nUnlike `trivial` or `trivial'`, does not use the `contradiction` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.triv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">triv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L80-L93","name":"Std.Tactic.tacticEapply_","line":80,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.tacticEapply_","doc":"`eapply e` is like `apply e` but it does not add subgoals for variables that appear\nin the types of other goals. Note that this can lead to a failure where there are\nno goals remaining but there are still metavariables in the term:\n```\nexample (h : ∀ x : Nat, x = x → True) : True := by\n  eapply h\n  rfl\n  -- no goals\n-- (kernel) declaration has metavariables '_example'\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.tacticEapply_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticEapply_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L73-L78","name":"Std.Tactic.tacticFapply_","line":73,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.tacticFapply_","doc":"`fapply e` is like `apply e` but it adds goals in the order they appear,\nrather than putting the dependent goals first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.tacticFapply_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticFapply_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L69-L70","name":"Std.Tactic.tacticSplit_ands","line":69,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.tacticSplit_ands","doc":"`split_ands` applies `And.intro` until it does not make progress. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.tacticSplit_ands\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticSplit_ands</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L66-L67","name":"Std.Tactic.tacticAbsurd_","line":66,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.tacticAbsurd_","doc":"Given a proof `h` of `p`, `absurd h` changes the goal to `⊢ ¬ p`.\nIf `p` is a negation `¬q` then the goal is changed to `⊢ q` instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.tacticAbsurd_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticAbsurd_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L51-L60","name":"Std.Tactic.byContra","line":51,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.byContra","doc":"`by_contra h` proves `⊢ p` by contradiction,\nintroducing a hypothesis `h : ¬p` and proving `False`.\n* If `p` is a negation `¬q`, `h : q` will be introduced instead of `¬¬q`.\n* If `p` is decidable, it uses `Decidable.byContradiction` instead of `Classical.byContradiction`.\n* If `h` is omitted, the introduced variable `_: ¬p` will be anonymous.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.byContra\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">byContra</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L36-L42","name":"Std.Tactic.exacts","line":36,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.exacts","doc":"Like `exact`, but takes a list of terms and checks that all goals are discharged after the tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.exacts\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">exacts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L33-L34","name":"Std.Tactic.tacticRwa__","line":33,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.tacticRwa__","doc":"`rwa` calls `rw`, then closes any remaining goals using `assumption`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.tacticRwa__\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticRwa__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L27-L28","name":"Std.Tactic.failIfSuccessConv","line":27,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.failIfSuccessConv","doc":"`fail_if_success t` fails if the tactic `t` succeeds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.failIfSuccessConv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">failIfSuccessConv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L25-L25","name":"Std.Tactic.tactic_","line":25,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.tactic_","doc":"`_` in tactic position acts like the `done` tactic: it fails and gives the list\nof goals if there are any. It is useful as a placeholder after starting a tactic block\nsuch as `by _` to make it syntactically correct and show the current goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.tactic_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tactic_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Init.lean#L18-L18","name":"Std.Tactic.tacticExfalso","line":18,"kind":"def","docLink":"./Std/Tactic/Init.html#Std.Tactic.tacticExfalso","doc":"`exfalso` converts a goal `⊢ tgt` into `⊢ False` by applying `False.elim`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Init.html#Std.Tactic.tacticExfalso\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticExfalso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}