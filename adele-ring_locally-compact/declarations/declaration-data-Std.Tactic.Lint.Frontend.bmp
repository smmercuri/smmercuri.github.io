{"name":"Std.Tactic.Lint.Frontend","instances":[{"typeNames":["Std.Tactic.Lint.LintVerbosity"],"name":"Std.Tactic.Lint.instInhabitedLintVerbosity","className":"Inhabited"},{"typeNames":["Eq"],"name":"Std.Tactic.Lint.instDecidableEqLintVerbosity","className":"Decidable"},{"typeNames":["Std.Tactic.Lint.LintVerbosity"],"name":"Std.Tactic.Lint.instReprLintVerbosity","className":"Repr"}],"imports":["Init","Lean.Util.Paths","Lean.Elab.Command","Std.Tactic.Lint.Basic","Std.Tactic.OpenPrivate"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L260-L268","name":"Std.Tactic.Lint.«command#list_linters»","line":260,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.«command#list_linters»","doc":"The command `#list_linters` prints a list of all available linters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.«command#list_linters»\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">«command#list_linters»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L217-L257","name":"Std.Tactic.Lint.«command#lint+-*Only___»","line":217,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.«command#lint+-*Only___»","doc":"The command `#lint` runs the linters on the current file (by default).\n\n`#lint only someLinter` can be used to run only a single linter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.«command#lint+-*Only___»\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">«command#lint+-*Only___»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L213-L214","name":"Std.Tactic.Lint.inProject","line":213,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.inProject","doc":"The `in foo` config argument allows running the linter on a specified project. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.inProject\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">inProject</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L204-L211","name":"Std.Tactic.Lint.getDeclsInPackage","line":204,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getDeclsInPackage","doc":"Get the list of all declarations in the specified package. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getDeclsInPackage\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">getDeclsInPackage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pkg : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L200-L201","name":"Std.Tactic.Lint.getAllDecls","line":200,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getAllDecls","doc":"Get the list of all declarations in the environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getAllDecls\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">getAllDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L196-L197","name":"Std.Tactic.Lint.getDeclsInCurrModule","line":196,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getDeclsInCurrModule","doc":"Get the list of declarations in the current module. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getDeclsInCurrModule\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">getDeclsInCurrModule</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L165-L193","name":"Std.Tactic.Lint.formatLinterResults","line":165,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.formatLinterResults","doc":"Formats the linter results as Lean code with comments and `#check` commands.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.formatLinterResults\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">formatLinterResults</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(results : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(groupByFilename : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(whereDesc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(runSlowLinters : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(verbose : <a href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numLinters : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useErrorFormat : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L142-L160","name":"Std.Tactic.Lint.groupedByFilename","line":142,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.groupedByFilename","doc":"Formats a map of linter warnings grouped by filename with `-- filename` comments.\nThe first `drop_fn_chars` characters are stripped from the filename.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.groupedByFilename\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">groupedByFilename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(results : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useErrorFormat : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L132-L136","name":"Std.Tactic.Lint.printWarnings","line":132,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.printWarnings","doc":"Formats a map of linter warnings using `print_warning`, sorted by line number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.printWarnings\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">printWarnings</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(results : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(filePath : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> <span class=\"fn\">default</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useErrorFormat : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L123-L129","name":"Std.Tactic.Lint.printWarning","line":123,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.printWarning","doc":"Formats a linter warning as `#check` command with comment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.printWarning\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">printWarning</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(warning : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useErrorFormat : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(filePath : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> <span class=\"fn\">default</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L115-L120","name":"Std.Tactic.Lint.sortResults","line":115,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.sortResults","doc":"Sorts a map with declaration keys as names by line number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.sortResults\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">sortResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(results : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L90-L112","name":"Std.Tactic.Lint.lintCore","line":90,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.lintCore","doc":"Runs all the specified linters on all the specified declarations in parallel,\nproducing a list of results.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.lintCore\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">lintCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(linters : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L72-L81","name":"Std.Tactic.Lint.getChecks","line":72,"kind":"def","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getChecks","doc":"`getChecks slow extra use_only` produces a list of linters.\n`extras` is a list of names that should resolve to declarations with type `linter`.\nIf `useOnly` is true, it only uses the linters in `extra`.\nOtherwise, it uses all linters in the environment tagged with `@[std_linter]`.\nIf `slow` is false, it only uses the fast default tests. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.getChecks\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">getChecks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(slow : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useOnly : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.NamedLinter\">Std.Tactic.Lint.NamedLinter</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L65-L65","name":"Std.Tactic.Lint.instReprLintVerbosity","line":65,"kind":"instance","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instReprLintVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instReprLintVerbosity\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">instReprLintVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L65-L65","name":"Std.Tactic.Lint.instDecidableEqLintVerbosity","line":65,"kind":"instance","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instDecidableEqLintVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instDecidableEqLintVerbosity\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">instDecidableEqLintVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L65-L65","name":"Std.Tactic.Lint.instInhabitedLintVerbosity","line":65,"kind":"instance","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instInhabitedLintVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.instInhabitedLintVerbosity\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">instInhabitedLintVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L63-L64","name":"Std.Tactic.Lint.LintVerbosity.high","line":63,"kind":"ctor","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.high","doc":"`high`: print output of every check. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.high\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">LintVerbosity</span>.<span class=\"name\">high</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L61-L62","name":"Std.Tactic.Lint.LintVerbosity.medium","line":61,"kind":"ctor","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.medium","doc":"`medium`: only print failing checks, print confirmation on success. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.medium\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">LintVerbosity</span>.<span class=\"name\">medium</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L59-L60","name":"Std.Tactic.Lint.LintVerbosity.low","line":59,"kind":"ctor","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.low","doc":"`low`: only print failing checks, print nothing on success. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity.low\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">LintVerbosity</span>.<span class=\"name\">low</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\">Std.Tactic.Lint.LintVerbosity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Tactic/Lint/Frontend.lean#L58-L65","name":"Std.Tactic.Lint.LintVerbosity","line":58,"kind":"inductive","docLink":"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity","doc":"Verbosity for the linter output. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Frontend.html#Std.Tactic.Lint.LintVerbosity\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">LintVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}