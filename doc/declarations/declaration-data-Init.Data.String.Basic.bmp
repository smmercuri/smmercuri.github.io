{"name":"Init.Data.String.Basic","instances":[{"typeNames":["String.Pos"],"name":"String.instOfNatPos","className":"OfNat"},{"typeNames":["String"],"name":"String.instLTString","className":"LT"},{"typeNames":["LT.lt"],"name":"String.decLt","className":"Decidable"},{"typeNames":["String"],"name":"String.instInhabitedString","className":"Inhabited"},{"typeNames":["String"],"name":"String.instAppendString","className":"Append"},{"typeNames":["Eq"],"name":"String.instDecidableEqIterator","className":"Decidable"},{"typeNames":["String.Iterator"],"name":"String.instSizeOfIterator","className":"SizeOf"},{"typeNames":["Substring"],"name":"Substring.hasBeq","className":"BEq"}],"imports":["Init.Data.List.Basic","Init.Data.Char.Basic","Init.Data.Option.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L829-L830","name":"Char.toString","line":829,"kind":"def","docLink":"./Init/Data/String/Basic.html#Char.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Char.toString\"><span class=\"name\">Char</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L824-L825","name":"String.decapitalize","line":824,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.decapitalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.decapitalize\"><span class=\"name\">String</span>.<span class=\"name\">decapitalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L821-L822","name":"String.capitalize","line":821,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.capitalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.capitalize\"><span class=\"name\">String</span>.<span class=\"name\">capitalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L818-L819","name":"String.toLower","line":818,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.toLower","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toLower\"><span class=\"name\">String</span>.<span class=\"name\">toLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L815-L816","name":"String.toUpper","line":815,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.toUpper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toUpper\"><span class=\"name\">String</span>.<span class=\"name\">toUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L812-L813","name":"String.nextUntil","line":812,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.nextUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.nextUntil\"><span class=\"name\">String</span>.<span class=\"name\">nextUntil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L809-L810","name":"String.nextWhile","line":809,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.nextWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.nextWhile\"><span class=\"name\">String</span>.<span class=\"name\">nextWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L806-L807","name":"String.trim","line":806,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.trim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.trim\"><span class=\"name\">String</span>.<span class=\"name\">trim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L803-L804","name":"String.trimLeft","line":803,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.trimLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.trimLeft\"><span class=\"name\">String</span>.<span class=\"name\">trimLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L800-L801","name":"String.trimRight","line":800,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.trimRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.trimRight\"><span class=\"name\">String</span>.<span class=\"name\">trimRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L797-L798","name":"String.endsWith","line":797,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.endsWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endsWith\"><span class=\"name\">String</span>.<span class=\"name\">endsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(post : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L794-L795","name":"String.startsWith","line":794,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.startsWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.startsWith\"><span class=\"name\">String</span>.<span class=\"name\">startsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L791-L792","name":"String.dropRightWhile","line":791,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.dropRightWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropRightWhile\"><span class=\"name\">String</span>.<span class=\"name\">dropRightWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L788-L789","name":"String.takeRightWhile","line":788,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.takeRightWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.takeRightWhile\"><span class=\"name\">String</span>.<span class=\"name\">takeRightWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L785-L786","name":"String.dropWhile","line":785,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropWhile\"><span class=\"name\">String</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L782-L783","name":"String.takeWhile","line":782,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.takeWhile\"><span class=\"name\">String</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L779-L780","name":"String.takeRight","line":779,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.takeRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.takeRight\"><span class=\"name\">String</span>.<span class=\"name\">takeRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L776-L777","name":"String.take","line":776,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.take\"><span class=\"name\">String</span>.<span class=\"name\">take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L773-L774","name":"String.dropRight","line":773,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.dropRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropRight\"><span class=\"name\">String</span>.<span class=\"name\">dropRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L770-L771","name":"String.drop","line":770,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.drop\"><span class=\"name\">String</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L764-L764","name":"Substring.hasBeq","line":764,"kind":"instance","docLink":"./Init/Data/String/Basic.html#Substring.hasBeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.hasBeq\"><span class=\"name\">Substring</span>.<span class=\"name\">hasBeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L761-L762","name":"Substring.beq","line":761,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.beq\"><span class=\"name\">Substring</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss1 : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ss2 : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L755-L759","name":"Substring.toNat?","line":755,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.toNat?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.toNat?\"><span class=\"name\">Substring</span>.<span class=\"name\">toNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L752-L753","name":"Substring.isNat","line":752,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.isNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.isNat\"><span class=\"name\">Substring</span>.<span class=\"name\">isNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L746-L750","name":"Substring.trim","line":746,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.trim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.trim\"><span class=\"name\">Substring</span>.<span class=\"name\">trim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L743-L744","name":"Substring.trimRight","line":743,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.trimRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.trimRight\"><span class=\"name\">Substring</span>.<span class=\"name\">trimRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L740-L741","name":"Substring.trimLeft","line":740,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.trimLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.trimLeft\"><span class=\"name\">Substring</span>.<span class=\"name\">trimLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L735-L738","name":"Substring.dropRightWhile","line":735,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.dropRightWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropRightWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">dropRightWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L730-L733","name":"Substring.takeRightWhile","line":730,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeRightWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeRightWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">takeRightWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L719-L728","name":"Substring.takeRightWhileAux","line":719,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeRightWhileAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeRightWhileAux\"><span class=\"name\">Substring</span>.<span class=\"name\">takeRightWhileAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(begPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L714-L717","name":"Substring.dropWhile","line":714,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L709-L712","name":"Substring.takeWhile","line":709,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L700-L707","name":"Substring.takeWhileAux","line":700,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeWhileAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeWhileAux\"><span class=\"name\">Substring</span>.<span class=\"name\">takeWhileAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L697-L698","name":"Substring.contains","line":697,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L694-L695","name":"Substring.all","line":694,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.all\"><span class=\"name\">Substring</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L690-L692","name":"Substring.any","line":690,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.any\"><span class=\"name\">Substring</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L686-L688","name":"Substring.foldr","line":686,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L682-L684","name":"Substring.foldl","line":682,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L661-L678","name":"Substring.splitOn.loop","line":661,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.splitOn.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.splitOn.loop\"><span class=\"name\">Substring</span>.<span class=\"name\">splitOn</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">&quot; &quot;</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L657-L680","name":"Substring.splitOn","line":657,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.splitOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.splitOn\"><span class=\"name\">Substring</span>.<span class=\"name\">splitOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">&quot; &quot;</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L654-L655","name":"Substring.extract","line":654,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L651-L652","name":"Substring.atEnd","line":651,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L648-L649","name":"Substring.takeRight","line":648,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.takeRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeRight\"><span class=\"name\">Substring</span>.<span class=\"name\">takeRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L645-L646","name":"Substring.take","line":645,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.take\"><span class=\"name\">Substring</span>.<span class=\"name\">take</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L642-L643","name":"Substring.dropRight","line":642,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.dropRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropRight\"><span class=\"name\">Substring</span>.<span class=\"name\">dropRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L639-L640","name":"Substring.drop","line":639,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L635-L637","name":"Substring.posOf","line":635,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.posOf","doc":"Return the offset into `s` of the first occurrence of `c` in `s`,\nor `s.bsize` if `c` doesn't occur. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.posOf\"><span class=\"name\">Substring</span>.<span class=\"name\">posOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L630-L631","name":"Substring.front","line":630,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.front\"><span class=\"name\">Substring</span>.<span class=\"name\">front</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L626-L628","name":"Substring.prevn","line":626,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">prevn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L622-L624","name":"Substring.nextn","line":622,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L617-L620","name":"Substring.prev","line":617,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.prev","doc":"Given an offset of a codepoint into the substring,\nreturn the offset there of the previous codepoint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L606-L613","name":"Substring.lt_next","line":606,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#Substring.lt_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.lt_next\"><span class=\"name\">Substring</span>.<span class=\"name\">lt_next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.next\">Substring.next</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span>)</span>.byteIdx</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L601-L604","name":"Substring.next","line":601,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.next","doc":"Given an offset of a codepoint into the substring,\nreturn the offset there of the next codepoint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.next\"><span class=\"name\">Substring</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L596-L597","name":"Substring.get","line":596,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.get","doc":"Return the codepoint at the given offset into the substring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.get\"><span class=\"name\">Substring</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L592-L593","name":"Substring.toIterator","line":592,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.toIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.toIterator\"><span class=\"name\">Substring</span>.<span class=\"name\">toIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L589-L590","name":"Substring.toString","line":589,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.toString\"><span class=\"name\">Substring</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L586-L587","name":"Substring.isEmpty","line":586,"kind":"def","docLink":"./Init/Data/String/Basic.html#Substring.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L577-L580","name":"String.findLineStart","line":577,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.findLineStart","doc":"Return the beginning of the line that contains character `pos`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.findLineStart\"><span class=\"name\">String</span>.<span class=\"name\">findLineStart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L562-L572","name":"String.replace.loop","line":562,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.replace.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.replace.loop\"><span class=\"name\">String</span>.<span class=\"name\">replace</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(replacement : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hPatt : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">pattern</span></span>)</span>.byteIdx</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(accStop : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L558-L574","name":"String.replace","line":558,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.replace","doc":"Replace all occurrences of `pattern` in `s` with `replacement`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.replace\"><span class=\"name\">String</span>.<span class=\"name\">replace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(replacement : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L554-L555","name":"String.isPrefixOf","line":554,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.isPrefixOf","doc":"Return true iff `p` is a prefix of `s` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isPrefixOf\"><span class=\"name\">String</span>.<span class=\"name\">isPrefixOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L544-L550","name":"String.substrEq.loop","line":544,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.substrEq.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.substrEq.loop\"><span class=\"name\">String</span>.<span class=\"name\">substrEq</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s1 : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s2 : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(off1 : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(off2 : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop1 : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L541-L551","name":"String.substrEq","line":541,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.substrEq","doc":"Return `true` iff the substring of byte size `sz` starting at position `off1` in `s1` is equal to that starting at `off2` in `s2.`.\nFalse if either substring of that byte size does not exist. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.substrEq\"><span class=\"name\">String</span>.<span class=\"name\">substrEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s1 : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(off1 : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s2 : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(off2 : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sz : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L532-L536","name":"String.toNat?","line":532,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.toNat?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toNat?\"><span class=\"name\">String</span>.<span class=\"name\">toNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L529-L530","name":"String.isNat","line":529,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.isNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isNat\"><span class=\"name\">String</span>.<span class=\"name\">isNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L526-L527","name":"String.map","line":526,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.map\"><span class=\"name\">String</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L517-L524","name":"String.mapAux","line":517,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.mapAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mapAux\"><span class=\"name\">String</span>.<span class=\"name\">mapAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L502-L515","name":"String.mapAux_lemma","line":502,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.mapAux_lemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mapAux_lemma\"><span class=\"name\">String</span>.<span class=\"name\">mapAux_lemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.set\">String.set</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.set\">String.set</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">i</span></span>)</span>.byteIdx</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L487-L499","name":"String.set_next_add.foo","line":487,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.set_next_add.foo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.set_next_add.foo\"><span class=\"name\">String</span>.<span class=\"name\">set_next_add</span>.<span class=\"name\">foo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₁ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">cs</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize.go\">String.utf8ByteSize.go</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">String.utf8SetAux</a> <span class=\"fn\">c</span> <span class=\"fn\">cs</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize.go\">String.utf8ByteSize.go</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">String.utf8SetAux</a> <span class=\"fn\">c</span> <span class=\"fn\">cs</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L482-L500","name":"String.set_next_add","line":482,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.set_next_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.set_next_add\"><span class=\"name\">String</span>.<span class=\"name\">set_next_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₁ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.set\">String.set</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">i</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.set\">String.set</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span></span>)</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L476-L480","name":"String.utf8SetAux_of_gt","line":476,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.utf8SetAux_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8SetAux_of_gt\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux_of_gt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">String.utf8SetAux</a> <span class=\"fn\">c'</span> <span class=\"fn\">cs</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">cs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L473-L474","name":"String.contains","line":473,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.contains\"><span class=\"name\">String</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L470-L471","name":"String.all","line":470,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.all\"><span class=\"name\">String</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L467-L468","name":"String.any","line":467,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.any\"><span class=\"name\">String</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L458-L465","name":"String.anyAux","line":458,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.anyAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.anyAux\"><span class=\"name\">String</span>.<span class=\"name\">anyAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L455-L456","name":"String.foldr","line":455,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldr\"><span class=\"name\">String</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L445-L453","name":"String.foldrAux","line":445,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.foldrAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldrAux\"><span class=\"name\">String</span>.<span class=\"name\">foldrAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(begPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L442-L443","name":"String.foldl","line":442,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldl\"><span class=\"name\">String</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L435-L440","name":"String.foldlAux","line":435,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.foldlAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldlAux\"><span class=\"name\">String</span>.<span class=\"name\">foldlAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L432-L433","name":"String.offsetOfPos","line":432,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.offsetOfPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.offsetOfPos\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L423-L430","name":"String.offsetOfPosAux","line":423,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.offsetOfPosAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.offsetOfPosAux\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPosAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(offset : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L418-L420","name":"String.Iterator.prevn","line":418,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.prevn","doc":"Moves the iterator's position several characters back.\n\nIf asked to go back more characters than available, stops at the beginning of the string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prevn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L411-L413","name":"String.Iterator.nextn","line":411,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.nextn","doc":"Moves the iterator's position several characters forward.\n\nThe resulting iterator is only valid if the number of characters to skip is less than or equal to\nthe number of characters left in the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L407-L408","name":"String.Iterator.remainingToString","line":407,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.remainingToString","doc":"The remaining characters in an iterator, as a string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L402-L404","name":"String.Iterator.forward","line":402,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.forward","doc":"Moves the iterator's position several characters forward.\n\nThe resulting iterator is only valid if the number of characters to skip is less than or equal to\nthe number of characters left in the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.forward\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L393-L396","name":"String.Iterator.extract","line":393,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.extract","doc":"Extracts the substring between the positions of two iterators.\n\nReturns the empty string if the iterators are for different strings, or if the position of the first\niterator is past the position of the second iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.extract\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L386-L387","name":"String.Iterator.toEnd","line":386,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.toEnd","doc":"Moves the iterator's position to the end of the string.\n\nNote that `i.toEnd.atEnd` is always `true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L380-L381","name":"String.Iterator.setCurr","line":380,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.setCurr","doc":"Replaces the current character in the string.\n\nDoes nothing if the iterator is at the end of the string. If the iterator contains the only\nreference to its string, this function will mutate the string in-place instead of allocating a new\none. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">setCurr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L372-L373","name":"String.Iterator.hasPrev","line":372,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.hasPrev","doc":"True if the position is not zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.hasPrev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L368-L369","name":"String.Iterator.hasNext","line":368,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.hasNext","doc":"True if the iterator is not past the string's last character. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L364-L365","name":"String.Iterator.atEnd","line":364,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.atEnd","doc":"True if the iterator is past the string's last character. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L360-L361","name":"String.Iterator.prev","line":360,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.prev","doc":"Decreases the iterator's position.\n\nIf the position is zero, this function is the identity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L354-L355","name":"String.Iterator.next","line":354,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.next","doc":"Moves the iterator's position forward by one character, unconditionally.\n\nIt is only valid to call this function if the iterator is not at the end of the string, *i.e.*\n`Iterator.atEnd` is `false`; otherwise, the resulting iterator will be invalid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L347-L348","name":"String.Iterator.curr","line":347,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.curr","doc":"The character at the current position.\n\nOn an invalid position, returns `(default : Char)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.curr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">curr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L342-L342","name":"String.Iterator.pos","line":342,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.pos","doc":"The current position.\n\nThis position is not necessarily valid for the string, for instance if one keeps calling\n`Iterator.next` when `Iterator.atEnd` is true. If the position is not valid, then the\ncurrent character is `(default : Char)`, similar to `String.get` on an invalid position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.pos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L338-L339","name":"String.Iterator.remainingBytes","line":338,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.remainingBytes","doc":"Number of bytes remaining in the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L335-L335","name":"String.Iterator.toString","line":335,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.toString","doc":"The string the iterator is for. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.toString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L330-L331","name":"String.Iterator.sizeOf_eq","line":330,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.Iterator.sizeOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.sizeOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\"><span class=\"fn\">i</span>.s</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.i</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L327-L328","name":"String.instSizeOfIterator","line":327,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instSizeOfIterator","doc":"The size of a string iterator is the number of bytes remaining. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instSizeOfIterator\"><span class=\"name\">String</span>.<span class=\"name\">instSizeOfIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf\">SizeOf</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L324-L324","name":"String.iter","line":324,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.iter","doc":"Creates an iterator at the beginning of a string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.iter\"><span class=\"name\">String</span>.<span class=\"name\">iter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L320-L321","name":"String.mkIterator","line":320,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.mkIterator","doc":"Creates an iterator at the beginning of a string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L317-L317","name":"String.instDecidableEqIterator","line":317,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instDecidableEqIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableEqIterator\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableEqIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L316-L316","name":"String.Iterator.i","line":316,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.i","doc":"The current position.\n\nThis position is not necessarily valid for the string, for instance if one keeps calling\n`Iterator.next` when `Iterator.atEnd` is true. If the position is not valid, then the\ncurrent character is `(default : Char)`, similar to `String.get` on an invalid position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.i\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">i</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L310-L310","name":"String.Iterator.s","line":310,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Iterator.s","doc":"The string the iterator is for. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.s\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">s</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L308-L308","name":"String.Iterator.mk","line":308,"kind":"ctor","docLink":"./Init/Data/String/Basic.html#String.Iterator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.mk\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L308-L317","name":"String.Iterator","line":308,"kind":"structure","docLink":"./Init/Data/String/Basic.html#String.Iterator","doc":"Iterator over the characters (`Char`) of a `String`.\n\nTypically created by `s.iter`, where `s` is a `String`.\n\nAn iterator is *valid* if the position `i` is *valid* for the string `s`, meaning `0 ≤ i ≤ s.endPos`\nand `i` lies on a UTF8 byte boundary. If `i = s.endPos`, the iterator is at the end of the string.\n\nMost operations on iterators return arbitrary values if the iterator is not valid. The functions in\nthe `String.Iterator` API should rule out the creation of invalid iterators, with two exceptions:\n\n- `Iterator.next iter` is invalid if `iter` is already at the end of the string (`iter.atEnd` is\n  `true`), and\n- `Iterator.forward iter n`/`Iterator.nextn iter n` is invalid if `n` is strictly greater than the\n  number of remaining characters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L289-L291","name":"String.intercalate.go","line":289,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.intercalate.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.intercalate.go\"><span class=\"name\">String</span>.<span class=\"name\">intercalate</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(acc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L286-L291","name":"String.intercalate","line":286,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.intercalate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.intercalate\"><span class=\"name\">String</span>.<span class=\"name\">intercalate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L283-L284","name":"String.singleton","line":283,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.singleton\"><span class=\"name\">String</span>.<span class=\"name\">singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L280-L281","name":"String.join","line":280,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.join\"><span class=\"name\">String</span>.<span class=\"name\">join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L277-L278","name":"String.isEmpty","line":277,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isEmpty\"><span class=\"name\">String</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L274-L275","name":"String.pushn","line":274,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.pushn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pushn\"><span class=\"name\">String</span>.<span class=\"name\">pushn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L272-L272","name":"String.str","line":272,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.str\"><span class=\"name\">String</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L270-L270","name":"String.instAppendString","line":270,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instAppendString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instAppendString\"><span class=\"name\">String</span>.<span class=\"name\">instAppendString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L268-L268","name":"String.instInhabitedString","line":268,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instInhabitedString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instInhabitedString\"><span class=\"name\">String</span>.<span class=\"name\">instInhabitedString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L265-L266","name":"String.splitOn","line":265,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.splitOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitOn\"><span class=\"name\">String</span>.<span class=\"name\">splitOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">&quot; &quot;</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L248-L263","name":"String.splitOnAux","line":248,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.splitOnAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitOnAux\"><span class=\"name\">String</span>.<span class=\"name\">splitOnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sep : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L245-L246","name":"String.split","line":245,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.split","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.split\"><span class=\"name\">String</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L232-L243","name":"String.splitAux","line":232,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.splitAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitAux\"><span class=\"name\">String</span>.<span class=\"name\">splitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L227-L229","name":"String.extract.go₂","line":227,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.extract.go₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.extract.go₂\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L223-L225","name":"String.extract.go₁","line":223,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.extract.go₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.extract.go₁\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L220-L229","name":"String.extract","line":220,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.extract\"><span class=\"name\">String</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L209-L215","name":"String.firstDiffPos.loop","line":209,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.firstDiffPos.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.firstDiffPos.loop\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L207-L217","name":"String.firstDiffPos","line":207,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.firstDiffPos","doc":"Returns the first position where the two strings differ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.firstDiffPos\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L203-L204","name":"String.Pos.min","line":203,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.Pos.min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.min\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">min</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L200-L201","name":"String.revFind","line":200,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.revFind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revFind\"><span class=\"name\">String</span>.<span class=\"name\">revFind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L191-L198","name":"String.revFindAux","line":191,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.revFindAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revFindAux\"><span class=\"name\">String</span>.<span class=\"name\">revFindAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L188-L189","name":"String.find","line":188,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.find","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.find\"><span class=\"name\">String</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L179-L186","name":"String.findAux","line":179,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.findAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.findAux\"><span class=\"name\">String</span>.<span class=\"name\">findAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L176-L177","name":"String.revPosOf","line":176,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.revPosOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revPosOf\"><span class=\"name\">String</span>.<span class=\"name\">revPosOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L167-L174","name":"String.revPosOfAux","line":167,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.revPosOfAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revPosOfAux\"><span class=\"name\">String</span>.<span class=\"name\">revPosOfAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L164-L165","name":"String.posOf","line":164,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.posOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.posOf\"><span class=\"name\">String</span>.<span class=\"name\">posOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L155-L162","name":"String.posOfAux","line":155,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.posOfAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.posOfAux\"><span class=\"name\">String</span>.<span class=\"name\">posOfAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopPos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L151-L153","name":"String.prev_lt_of_pos","line":151,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.prev_lt_of_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.prev_lt_of_pos\"><span class=\"name\">String</span>.<span class=\"name\">prev_lt_of_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.prev\">String.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L140-L149","name":"String.utf8PrevAux_lt_of_pos","line":140,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.utf8PrevAux_lt_of_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8PrevAux_lt_of_pos\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux_lt_of_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\">String.utf8PrevAux</a> <span class=\"fn\">cs</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L137-L138","name":"String.lt_next","line":137,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.lt_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.lt_next\"><span class=\"name\">String</span>.<span class=\"name\">lt_next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span>)</span>.byteIdx</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L135-L135","name":"String.pos_add_char","line":135,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.pos_add_char","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pos_add_char\"><span class=\"name\">String</span>.<span class=\"name\">pos_add_char</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L133-L133","name":"String.pos_lt_eq","line":133,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.pos_lt_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pos_lt_eq\"><span class=\"name\">String</span>.<span class=\"name\">pos_lt_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p₂</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L130-L131","name":"String.one_le_csize","line":130,"kind":"theorem","docLink":"./Init/Data/String/Basic.html#String.one_le_csize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.one_le_csize\"><span class=\"name\">String</span>.<span class=\"name\">one_le_csize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L126-L128","name":"String.next'","line":126,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.next'","doc":"Similar to `next` but runtime does not perform bounds check.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.next'\"><span class=\"name\">String</span>.<span class=\"name\">next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L118-L120","name":"String.get'","line":118,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.get'","doc":"Similar to `get` but runtime does not perform bounds check.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get'\"><span class=\"name\">String</span>.<span class=\"name\">get'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L111-L112","name":"String.atEnd","line":111,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L107-L108","name":"String.back","line":107,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.back","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.back\"><span class=\"name\">String</span>.<span class=\"name\">back</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L104-L105","name":"String.front","line":104,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.front\"><span class=\"name\">String</span>.<span class=\"name\">front</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L101-L102","name":"String.prev","line":101,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.prev\"><span class=\"name\">String</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L94-L98","name":"String.utf8PrevAux","line":94,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.utf8PrevAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L90-L92","name":"String.next","line":90,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.next\"><span class=\"name\">String</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L86-L87","name":"String.modify","line":86,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.modify\"><span class=\"name\">String</span>.<span class=\"name\">modify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L83-L84","name":"String.set","line":83,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.set\"><span class=\"name\">String</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L77-L80","name":"String.utf8SetAux","line":77,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.utf8SetAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8SetAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L73-L75","name":"String.get!","line":73,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.get!","doc":"Similar to `get`, but produces a panic error message if `p` is not a valid `String.Pos`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get!\"><span class=\"name\">String</span>.<span class=\"name\">get!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L66-L67","name":"String.get?","line":66,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get?\"><span class=\"name\">String</span>.<span class=\"name\">get?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L61-L63","name":"String.utf8GetAux?","line":61,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.utf8GetAux?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8GetAux?\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L57-L59","name":"String.get","line":57,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.get","doc":"Return character at position `p`. If `p` is not a valid position\nreturns `(default : Char)`.\nSee `utf8GetAux` for the reference implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get\"><span class=\"name\">String</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L47-L49","name":"String.utf8GetAux","line":47,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.utf8GetAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8GetAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L44-L45","name":"String.toList","line":44,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.toList","doc":"O(n) in the runtime, where n is the length of the String "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toList\"><span class=\"name\">String</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L40-L41","name":"String.append","line":40,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.append","doc":"The internal implementation uses dynamic arrays and will perform destructive updates\nif the String is not shared. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.append\"><span class=\"name\">String</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L34-L35","name":"String.push","line":34,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.push","doc":"The internal implementation uses dynamic arrays and will perform destructive updates\nif the String is not shared. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.push\"><span class=\"name\">String</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L28-L29","name":"String.length","line":28,"kind":"def","docLink":"./Init/Data/String/Basic.html#String.length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length\"><span class=\"name\">String</span>.<span class=\"name\">length</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L24-L25","name":"String.decLt","line":24,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.decLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.decLt\"><span class=\"name\">String</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L20-L21","name":"String.instLTString","line":20,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instLTString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLTString\"><span class=\"name\">String</span>.<span class=\"name\">instLTString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L17-L18","name":"String.instOfNatPos","line":17,"kind":"instance","docLink":"./Init/Data/String/Basic.html#String.instOfNatPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instOfNatPos\"><span class=\"name\">String</span>.<span class=\"name\">instOfNatPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/String/Basic.lean#L12-L13","name":"List.asString","line":12,"kind":"def","docLink":"./Init/Data/String/Basic.html#List.asString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.asString\"><span class=\"name\">List</span>.<span class=\"name\">asString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"}]}