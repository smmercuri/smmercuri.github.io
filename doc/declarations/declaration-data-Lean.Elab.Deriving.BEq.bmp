{"name":"Lean.Elab.Deriving.BEq","instances":[],"imports":["Lean.Meta.Transform","Lean.Elab.Deriving.Basic","Lean.Elab.Deriving.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Deriving/BEq.lean#L124-L130","name":"Lean.Elab.Deriving.BEq.mkBEqInstanceHandler","line":124,"kind":"def","docLink":"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkBEqInstanceHandler","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkBEqInstanceHandler\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">BEq</span>.<span class=\"name\">mkBEqInstanceHandler</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Deriving/BEq.lean#L116-L122","name":"Lean.Elab.Deriving.BEq.mkBEqInstance","line":116,"kind":"def","docLink":"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkBEqInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkBEqInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">BEq</span>.<span class=\"name\">mkBEqInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Deriving/BEq.lean#L89-L96","name":"Lean.Elab.Deriving.BEq.mkMutualBlock","line":89,"kind":"def","docLink":"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkMutualBlock","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkMutualBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">BEq</span>.<span class=\"name\">mkMutualBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/Deriving/Util.html#Lean.Elab.Deriving.Context\">Lean.Elab.Deriving.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Deriving/BEq.lean#L75-L87","name":"Lean.Elab.Deriving.BEq.mkAuxFunction","line":75,"kind":"def","docLink":"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkAuxFunction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkAuxFunction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">BEq</span>.<span class=\"name\">mkAuxFunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/Deriving/Util.html#Lean.Elab.Deriving.Context\">Lean.Elab.Deriving.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Command\">Lean.Command</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Deriving/BEq.lean#L33-L73","name":"Lean.Elab.Deriving.BEq.mkMatch.mkAlts","line":33,"kind":"def","docLink":"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkMatch.mkAlts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkMatch.mkAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">BEq</span>.<span class=\"name\">mkMatch</span>.<span class=\"name\">mkAlts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(indVal : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(auxFunName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.matchAlt</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Deriving/BEq.lean#L23-L31","name":"Lean.Elab.Deriving.BEq.mkMatch.mkElseAlt","line":23,"kind":"def","docLink":"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkMatch.mkElseAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkMatch.mkElseAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">BEq</span>.<span class=\"name\">mkMatch</span>.<span class=\"name\">mkElseAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(indVal : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.matchAltExpr</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Deriving/BEq.lean#L18-L73","name":"Lean.Elab.Deriving.BEq.mkMatch","line":18,"kind":"def","docLink":"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">BEq</span>.<span class=\"name\">mkMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(header : <a href=\"./Lean/Elab/Deriving/Util.html#Lean.Elab.Deriving.Header\">Lean.Elab.Deriving.Header</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indVal : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(auxFunName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Deriving/BEq.lean#L15-L16","name":"Lean.Elab.Deriving.BEq.mkBEqHeader","line":15,"kind":"def","docLink":"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkBEqHeader","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/BEq.html#Lean.Elab.Deriving.BEq.mkBEqHeader\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">BEq</span>.<span class=\"name\">mkBEqHeader</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(indVal : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Deriving/Util.html#Lean.Elab.Deriving.Header\">Lean.Elab.Deriving.Header</a></span></div></div>"}]}