{"name":"Lean.Elab.Do","instances":[{"typeNames":["Lean.Elab.Term.Do.Alt"],"name":"Lean.Elab.Term.Do.instInhabitedAlt","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.Do.AltExpr"],"name":"Lean.Elab.Term.Do.instInhabitedAltExpr","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.Do.Code"],"name":"Lean.Elab.Term.Do.instInhabitedCode","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.Do.ToTerm.Kind"],"name":"Lean.Elab.Term.Do.ToTerm.instInhabitedKind","className":"Inhabited"}],"imports":["Lean.Elab.Term","Lean.Elab.BindersUtil","Lean.Elab.PatternVar","Lean.Elab.Quotation.Util","Lean.Parser.Do"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1816-L1816","name":"Lean.Elab.Term.expandTermReturn","line":1816,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermReturn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1813-L1813","name":"Lean.Elab.Term.expandTermUnless","line":1813,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermUnless","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermUnless\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermUnless</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1810-L1810","name":"Lean.Elab.Term.expandTermTry","line":1810,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermTry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermTry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermTry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1807-L1807","name":"Lean.Elab.Term.expandTermFor","line":1807,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermFor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1788-L1796","name":"Lean.Elab.Term.Do.elabDo","line":1788,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.elabDo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.elabDo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">elabDo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1783-L1784","name":"Lean.Elab.Term.Do.ToCodeBlock.run","line":1783,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doStx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(returnType : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1702-L1780","name":"Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode","line":1702,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doSeqToCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1651-L1700","name":"Lean.Elab.Term.Do.ToCodeBlock.doTryToCode","line":1651,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doTryToCode","doc":"Generate `CodeBlock` for `doTry; doElems`\n```\ndef doTry := leading_parser \"try \" >> doSeq >> many (doCatch <|> doCatchMatch) >> optional doFinally\ndef doCatch      := leading_parser \"catch \" >> binderIdent >> optional (\":\" >> termParser) >> darrow >> doSeq\ndef doCatchMatch := leading_parser \"catch \" >> doMatchAlts\ndef doFinally    := leading_parser \"finally \" >> doSeq\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doTryToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doTryToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doTry : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1625-L1640","name":"Lean.Elab.Term.Do.ToCodeBlock.doMatchExprToCode","line":1625,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchExprToCode","doc":"Generate `CodeBlock` for `doMatchExpr; doElems` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchExprToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doMatchExprToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doMatchExpr : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1607-L1622","name":"Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode","line":1607,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode","doc":"Generate `CodeBlock` for `doMatch; doElems` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doMatchToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doMatch : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1521-L1604","name":"Lean.Elab.Term.Do.ToCodeBlock.doForToCode","line":1521,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doForToCode","doc":"Generate `CodeBlock` for `doFor; doElems`\n`doFor` is of the form\n```\ndef doForDecl := leading_parser termParser >> \" in \" >> withForbidden \"do\" termParser\ndef doFor := leading_parser \"for \" >> sepBy1 doForDecl \", \" >> \"do \" >> doSeq\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doForToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doForToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doFor : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1507-L1512","name":"Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode","line":1507,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode","doc":"Generate `CodeBlock` for `doUnless; doElems`\n`doUnless` is of the form\n```\n\"unless \" >> termParser >> \"do \" >> doSeq\n```  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doUnlessToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doUnless : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1495-L1500","name":"Lean.Elab.Term.Do.ToCodeBlock.doIfToCode","line":1495,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doIfToCode","doc":"Generate `CodeBlock` for `doIf; doElems`\n`doIf` is of the form\n```\n\"if \" >> optIdent >> termParser >> \" then \" >> doSeq\n >> many (group (try (group (\" else \" >> \" if \")) >> optIdent >> termParser >> \" then \" >> doSeq))\n >> optional (\" else \" >> doSeq)\n```  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doIfToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doIfToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doIf : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1469-L1486","name":"Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode","line":1469,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode","doc":"Generate `CodeBlock` for `doReassignArrow; doElems`\n`doReassignArrow` is of the form\n```\n(doIdDecl <|> doPatDecl)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doReassignArrowToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doReassignArrow : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1449-L1461","name":"Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode","line":1449,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doLetElseToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doLetElse : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1411-L1447","name":"Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode","line":1411,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode","doc":"Generate `CodeBlock` for `doLetArrow; doElems`\n`doLetArrow` is of the form\n```\n\"let \" >> optional \"mut \" >> (doIdDecl <|> doPatDecl)\n```\nwhere\n```\ndef doIdDecl   := leading_parser ident >> optType >> leftArrow >> doElemParser\ndef doPatDecl  := leading_parser termParser >> leftArrow >> doElemParser >> optional (\" | \" >> doSeq)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doLetArrowToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doLetArrow : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1392-L1398","name":"Lean.Elab.Term.Do.ToCodeBlock.concatWith","line":1392,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.concatWith","doc":"\"Concatenate\" `c` with `doSeqToCode doElems` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.concatWith\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">concatWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1383-L1388","name":"Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred","line":1383,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">tryCatchPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tryCode : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(catches : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Lean.Elab.Term.Do.ToCodeBlock.Catch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(finallyCode? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1375-L1381","name":"Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars","line":1375,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">getTryCatchUpdatedVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tryCode : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(catches : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Lean.Elab.Term.Do.ToCodeBlock.Catch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(finallyCode? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1373-L1373","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock","line":1373,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">codeBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Lean.Elab.Term.Do.ToCodeBlock.Catch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1372-L1372","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.optType","line":1372,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.optType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.optType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">optType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Lean.Elab.Term.Do.ToCodeBlock.Catch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1371-L1371","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.x","line":1371,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.x","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.x\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">x</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Lean.Elab.Term.Do.ToCodeBlock.Catch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1370-L1370","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.mk","line":1370,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(optType : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(codeBlock : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Lean.Elab.Term.Do.ToCodeBlock.Catch</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1370-L1373","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch","line":1370,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1364-L1368","name":"Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode","line":1364,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode","doc":"Generate `CodeBlock` for `doReturn` which is of the form\n```\n\"return \" >> optional termParser\n```\n`doElems` is only used for sanity checking. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doReturnToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doReturn : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1349-L1357","name":"Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS","line":1349,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">checkLetArrowRHS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doElem : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1341-L1347","name":"Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod","line":1341,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">expandLiftMethod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doElem : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1307-L1309","name":"Lean.Elab.Term.Do.ToCodeBlock.ensureEOS","line":1307,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureEOS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureEOS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ensureEOS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1303-L1305","name":"Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor","line":1303,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ensureInsideFor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1296-L1301","name":"Lean.Elab.Term.Do.ToCodeBlock.mkForInBody","line":1296,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.mkForInBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.mkForInBody\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">mkForInBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> →\n  <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1294-L1294","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term","line":1294,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1293-L1293","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars","line":1293,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span>.<span class=\"name\">uvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1292-L1292","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk","line":1292,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(uvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(term : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1292-L1294","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult","line":1292,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1289-L1290","name":"Lean.Elab.Term.Do.ToCodeBlock.withFor","line":1289,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">withFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1281-L1287","name":"Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable","line":1281,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">checkNotShadowingMutable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1273-L1279","name":"Lean.Elab.Term.Do.ToCodeBlock.checkReassignable","line":1273,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkReassignable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkReassignable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">checkReassignable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1270-L1271","name":"Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars","line":1270,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">withNewMutableVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(newVars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mutable : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">Lean.Elab.Term.Do.ToCodeBlock.M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1268-L1268","name":"Lean.Elab.Term.Do.ToCodeBlock.M","line":1268,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1266-L1266","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor","line":1266,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">insideFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Lean.Elab.Term.Do.ToCodeBlock.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1265-L1265","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars","line":1265,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">mutableVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Lean.Elab.Term.Do.ToCodeBlock.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1264-L1264","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.returnType","line":1264,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.returnType","doc":"Syntax to reference the result of the monadic computation performed by the do notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.returnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">returnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Lean.Elab.Term.Do.ToCodeBlock.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1262-L1262","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.m","line":1262,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.m","doc":"Syntax representing the monad associated with the do notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.m\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Lean.Elab.Term.Do.ToCodeBlock.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1260-L1260","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.ref","line":1260,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Lean.Elab.Term.Do.ToCodeBlock.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1259-L1259","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.mk","line":1259,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(returnType : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mutableVars : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(insideFor : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Lean.Elab.Term.Do.ToCodeBlock.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1259-L1266","name":"Lean.Elab.Term.Do.ToCodeBlock.Context","line":1259,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1251-L1255","name":"Lean.Elab.Term.Do.isMutableLet","line":1251,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isMutableLet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isMutableLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">isMutableLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doElem : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1204-L1247","name":"Lean.Elab.Term.Do.ToTerm.matchNestedTermResult","line":1204,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.matchNestedTermResult","doc":"Given a term `term` produced by `ToTerm.run`, pattern match on its result.\nSee comment at the beginning of the `ToTerm` namespace.\n\n- `a` is true if the code block has a `Code.action _` exit point\n- `r` is true if the code block has a `Code.return _ _` exit point\n- `bc` is true if the code block has a `Code.break _` or `Code.continue _` exit point\n\nThe result is a sequence of `doElem` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.matchNestedTermResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">matchNestedTermResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(term : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bc : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1193-L1194","name":"Lean.Elab.Term.Do.ToTerm.mkNestedTerm","line":1193,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkNestedTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(returnType : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bc : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1182-L1191","name":"Lean.Elab.Term.Do.ToTerm.mkNestedKind","line":1182,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedKind","doc":"Given\n- `a` is true if the code block has a `Code.action _` exit point\n- `r` is true if the code block has a `Code.return _ _` exit point\n- `bc` is true if the code block has a `Code.break _` or `Code.continue _` exit point\n\ngenerate Kind. See comment at the beginning of the `ToTerm` namespace. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkNestedKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bc : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1173-L1174","name":"Lean.Elab.Term.Do.ToTerm.run","line":1173,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(returnType : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span> <span class=\"fn\">#[]</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular\">Lean.Elab.Term.Do.ToTerm.Kind.regular</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1136-L1171","name":"Lean.Elab.Term.Do.ToTerm.toTerm.go","line":1136,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">toTerm</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1129-L1171","name":"Lean.Elab.Term.Do.ToTerm.toTerm","line":1129,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">toTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1126-L1127","name":"Lean.Elab.Term.Do.ToTerm.mkJmp","line":1126,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1097-L1124","name":"Lean.Elab.Term.Do.ToTerm.mkJoinPoint","line":1097,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJoinPoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJoinPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkJoinPoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1090-L1095","name":"Lean.Elab.Term.Do.ToTerm.mkIte","line":1090,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkIte","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkIte\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkIte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(optIdent : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cond : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thenBranch : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(elseBranch : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1082-L1088","name":"Lean.Elab.Term.Do.ToTerm.reassignToTerm","line":1082,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.reassignToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.reassignToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">reassignToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(reassign : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1051-L1080","name":"Lean.Elab.Term.Do.ToTerm.declToTerm","line":1051,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.declToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.declToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">declToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1040-L1049","name":"Lean.Elab.Term.Do.ToTerm.seqToTerm","line":1040,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.seqToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.seqToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">seqToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(action : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1028-L1038","name":"Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm","line":1028,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">actionTerminalToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(action : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1016-L1026","name":"Lean.Elab.Term.Do.ToTerm.breakToTerm","line":1016,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.breakToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.breakToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">breakToTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L1004-L1014","name":"Lean.Elab.Term.Do.ToTerm.continueToTerm","line":1004,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.continueToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.continueToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">continueToTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L992-L1002","name":"Lean.Elab.Term.Do.ToTerm.returnToTerm","line":992,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.returnToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.returnToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">returnToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L988-L990","name":"Lean.Elab.Term.Do.ToTerm.mkUVarTuple","line":988,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkUVarTuple","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkUVarTuple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkUVarTuple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">Lean.Elab.Term.Do.ToTerm.M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L986-L986","name":"Lean.Elab.Term.Do.ToTerm.M","line":986,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L984-L984","name":"Lean.Elab.Term.Do.ToTerm.Context.kind","line":984,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Lean.Elab.Term.Do.ToTerm.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L983-L983","name":"Lean.Elab.Term.Do.ToTerm.Context.uvars","line":983,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.uvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.uvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">uvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Lean.Elab.Term.Do.ToTerm.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L982-L982","name":"Lean.Elab.Term.Do.ToTerm.Context.returnType","line":982,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.returnType","doc":"Syntax to reference the result of the monadic computation performed by the do notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.returnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">returnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Lean.Elab.Term.Do.ToTerm.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L980-L980","name":"Lean.Elab.Term.Do.ToTerm.Context.m","line":980,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.m","doc":"Syntax to reference the monad associated with the do notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.m\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Lean.Elab.Term.Do.ToTerm.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L978-L978","name":"Lean.Elab.Term.Do.ToTerm.Context.mk","line":978,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(returnType : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Lean.Elab.Term.Do.ToTerm.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L978-L984","name":"Lean.Elab.Term.Do.ToTerm.Context","line":978,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L974-L976","name":"Lean.Elab.Term.Do.ToTerm.Kind.isRegular","line":974,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.isRegular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.isRegular\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">isRegular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L972-L972","name":"Lean.Elab.Term.Do.ToTerm.instInhabitedKind","line":972,"kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.instInhabitedKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.instInhabitedKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">instInhabitedKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L970-L970","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC","line":970,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedPRBC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L969-L969","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC","line":969,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedSBC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L968-L968","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedPR","line":968,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPR\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedPR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L967-L967","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedBC","line":967,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedBC","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedBC\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedBC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L966-L966","name":"Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn","line":966,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">forInWithReturn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L965-L965","name":"Lean.Elab.Term.Do.ToTerm.Kind.forIn","line":965,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">forIn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L964-L964","name":"Lean.Elab.Term.Do.ToTerm.Kind.regular","line":964,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">regular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Lean.Elab.Term.Do.ToTerm.Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L963-L970","name":"Lean.Elab.Term.Do.ToTerm.Kind","line":963,"kind":"inductive","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L958-L959","name":"Lean.Elab.Term.Do.annotate","line":958,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.annotate","doc":"Helper method for annotating `term` with the raw syntax `ref`.\nWe use this method to implement finer-grained term infos for `do`-blocks.\n\nWe use `withRef term` to make sure the synthetic position for the `with_annotate_term` is equal\nto the one for `term`. This is important for producing error messages when there is a type mismatch.\nConsider the following example:\n```\nopaque f : IO Nat\n\ndef g : IO String := do\n  f\n```\nThere is at type mismatch at `f`, but it is detected when elaborating the expanded term\ncontaining the `with_annotate_term .. f`. The current `getRef` when this `annotate` is invoked\nis not necessarily `f`. Actually, it is the whole `do`-block. By using `withRef` we ensure\nthe synthetic position for the `with_annotate_term ..` is equal to `term`.\nRecall that synthetic positions are used when generating error messages.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.annotate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">annotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(term : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L816-L820","name":"Lean.Elab.Term.Do.isDoExpr?","line":816,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isDoExpr?","doc":"Return `some action` if `doElem` is a `doExpr <action>`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isDoExpr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">isDoExpr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doElem : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L786-L786","name":"Lean.Elab.Term.Do.DoIfView.elseBranch","line":786,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.elseBranch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.elseBranch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">elseBranch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">Lean.Elab.Term.Do.DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L785-L785","name":"Lean.Elab.Term.Do.DoIfView.thenBranch","line":785,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.thenBranch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.thenBranch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">thenBranch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">Lean.Elab.Term.Do.DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L784-L784","name":"Lean.Elab.Term.Do.DoIfView.cond","line":784,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.cond\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">cond</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">Lean.Elab.Term.Do.DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L783-L783","name":"Lean.Elab.Term.Do.DoIfView.optIdent","line":783,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.optIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.optIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">optIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">Lean.Elab.Term.Do.DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L782-L782","name":"Lean.Elab.Term.Do.DoIfView.ref","line":782,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">Lean.Elab.Term.Do.DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L781-L781","name":"Lean.Elab.Term.Do.DoIfView.mk","line":781,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(optIdent : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cond : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thenBranch : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(elseBranch : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">Lean.Elab.Term.Do.DoIfView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L781-L786","name":"Lean.Elab.Term.Do.DoIfView","line":781,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L747-L748","name":"Lean.Elab.Term.Do.mkDoSeq","line":747,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkDoSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkDoSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkDoSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doElems : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L738-L745","name":"Lean.Elab.Term.Do.getDoReassignVars","line":738,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoReassignVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoReassignVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoReassignVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doReassign : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L729-L736","name":"Lean.Elab.Term.Do.getDoLetArrowVars","line":729,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetArrowVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetArrowVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoLetArrowVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doLetArrow : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L724-L726","name":"Lean.Elab.Term.Do.getDoPatDeclVars","line":724,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoPatDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoPatDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoPatDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doPatDecl : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L720-L721","name":"Lean.Elab.Term.Do.getDoIdDeclVar","line":720,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoIdDeclVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoIdDeclVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoIdDeclVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doIdDecl : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L709-L717","name":"Lean.Elab.Term.Do.getDoLetRecVars","line":709,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetRecVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetRecVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoLetRecVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doLetRec : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L693-L707","name":"Lean.Elab.Term.Do.getDoHaveVars","line":693,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoHaveVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoHaveVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoHaveVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doHave : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L687-L691","name":"Lean.Elab.Term.Do.getHaveIdLhsVar","line":687,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getHaveIdLhsVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getHaveIdLhsVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getHaveIdLhsVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(optIdent : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L683-L685","name":"Lean.Elab.Term.Do.getDoLetVars","line":683,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoLetVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doLet : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L672-L681","name":"Lean.Elab.Term.Do.getLetDeclVars","line":672,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(letDecl : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L666-L670","name":"Lean.Elab.Term.Do.getLetEqnsDeclVars","line":666,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetEqnsDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetEqnsDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetEqnsDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(letEqnsDecl : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L662-L664","name":"Lean.Elab.Term.Do.getLetPatDeclVars","line":662,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetPatDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetPatDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetPatDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(letPatDecl : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L658-L660","name":"Lean.Elab.Term.Do.getPatternsVarsEx","line":658,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternsVarsEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternsVarsEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getPatternsVarsEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(patterns : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L654-L656","name":"Lean.Elab.Term.Do.getPatternVarsEx","line":654,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternVarsEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternVarsEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getPatternVarsEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L647-L651","name":"Lean.Elab.Term.Do.getLetIdDeclVars","line":647,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetIdDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetIdDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetIdDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(letIdDecl : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L634-L645","name":"Lean.Elab.Term.Do.concat","line":634,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.concat","doc":"Return a code block that executes `terminal` and then `k` with the value produced by `terminal`.\nThis method assumes `terminal` is a terminal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">concat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(terminal : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kRef : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L622-L630","name":"Lean.Elab.Term.Do.mkMatchExpr","line":622,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatchExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatchExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkMatchExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(meta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discr : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(elseBranch : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L614-L620","name":"Lean.Elab.Term.Do.mkMatch","line":614,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(genParam : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discrs : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(optMotive : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Lean.Elab.Term.Do.Alt</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L610-L612","name":"Lean.Elab.Term.Do.mkUnless","line":610,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkUnless","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkUnless\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkUnless</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cond : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L607-L608","name":"Lean.Elab.Term.Do.mkPureUnitAction","line":607,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkPureUnitAction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkPureUnitAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkPureUnitAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L593-L599","name":"Lean.Elab.Term.Do.mkIte","line":593,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkIte","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkIte\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkIte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(optIdent : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cond : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thenBranch : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(elseBranch : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L590-L591","name":"Lean.Elab.Term.Do.mkContinue","line":590,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkContinue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkContinue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L587-L588","name":"Lean.Elab.Term.Do.mkBreak","line":587,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkBreak","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkBreak\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkBreak</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L584-L585","name":"Lean.Elab.Term.Do.mkReturn","line":584,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L581-L582","name":"Lean.Elab.Term.Do.mkTerminalAction","line":581,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkTerminalAction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkTerminalAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkTerminalAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(action : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L578-L579","name":"Lean.Elab.Term.Do.mkSeq","line":578,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(action : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L570-L576","name":"Lean.Elab.Term.Do.mkReassignCore","line":570,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReassignCore","doc":"Extending code blocks with reassignments: `x : t := v` and `x : t ← v`.\nRemark: `stx` is the syntax for the declaration (e.g., `letDecl`), and `xs` are the variables\ndeclared by it. It is an array because we have let-declarations that declare multiple variables.\nExample: `(x, y) ← t`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReassignCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkReassignCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L559-L562","name":"Lean.Elab.Term.Do.mkVarDeclCore","line":559,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkVarDeclCore","doc":"Extending code blocks with variable declarations: `let x : t := v` and `let x : t ← v`.\nWe remove `x` from the collection of updated variables.\nRemark: `stx` is the syntax for the declaration (e.g., `letDecl`), and `xs` are the variables\ndeclared by it. It is an array because we have let-declarations that declare multiple variables.\nExample: `let (x, y) := t`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkVarDeclCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkVarDeclCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L546-L550","name":"Lean.Elab.Term.Do.homogenize","line":546,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.homogenize","doc":"Given two code blocks `c₁` and `c₂`, make sure they have the same set of updated variables.\nLet `ws` the union of the updated variables in `c₁‵ and ‵c₂`.\nWe use `extendUpdatedVars c₁ ws` and `extendUpdatedVars c₂ ws`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.homogenize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">homogenize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L531-L536","name":"Lean.Elab.Term.Do.extendUpdatedVars","line":531,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVars","doc":"Extend the set of updated variables. It assumes `ws` is a super set of `c.uvars`.\nWe **cannot** simply update the field `c.uvars`, because `c` may have shadowed some variable in `ws`.\nSee discussion at `pullExitPoints`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">extendUpdatedVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ws : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L491-L523","name":"Lean.Elab.Term.Do.extendUpdatedVarsAux.update","line":491,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux.update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux.update\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">extendUpdatedVarsAux</span>.<span class=\"name\">update</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ws : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L490-L524","name":"Lean.Elab.Term.Do.extendUpdatedVarsAux","line":490,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">extendUpdatedVarsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ws : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L483-L488","name":"Lean.Elab.Term.Do.pullExitPoints","line":483,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPoints","doc":"Auxiliary operation for adding new variables to the collection of updated variables in a CodeBlock.\nWhen a new variable is not already in the collection, but is shadowed by some declaration in `c`,\nwe create auxiliary join points to make sure we preserve the semantics of the code block.\nExample: suppose we have the code block `print x; let x := 10; return x`. And we want to extend it\nwith the reassignment `x := x + 1`. We first use `pullExitPoints` to create\n```\nlet jp (x!1) :=  return x!1;\nprint x;\nlet x := 10;\njmp jp x\n```\nand then we add the reassignment\n```\nx := x + 1\nlet jp (x!1) := return x!1;\nprint x;\nlet x := 10;\njmp jp x\n```\nNote that we created a fresh variable `x!1` to avoid accidental name capture.\nAs another example, consider\n```\nprint x;\nlet x := 10\ny := y + 1;\nreturn x;\n```\nWe transform it into\n```\nlet jp (y x!1) := return x!1;\nprint x;\nlet x := 10\ny := y + 1;\njmp jp y x\n```\nand then we add the reassignment as in the previous example.\nWe need to include `y` in the jump, because each exit point is implicitly returning the set of\nupdate variables.\n\nWe implement the method as follows. Let `us` be `c.uvars`, then\n1- for each `return _ y` in `c`, we create a join point\n  `let j (us y!1) := return y!1`\n   and replace the `return _ y` with `jmp us y`\n2- for each `break`, we create a join point\n  `let j (us) := break`\n   and replace the `break` with `jmp us`.\n3- Same as 2 for `continue`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPoints\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">pullExitPoints</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L410-L432","name":"Lean.Elab.Term.Do.pullExitPointsAux","line":410,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPointsAux","doc":"`pullExitPointsAux rs c` auxiliary method for `pullExitPoints`, `rs` is the set of update variable in the current path.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPointsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">pullExitPointsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a></span>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L399-L407","name":"Lean.Elab.Term.Do.mkJmp","line":399,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkJmp","doc":"Create a new joinpoint that takes `rs` and `val` as arguments. `val` must be syntax representing a pure value.\nThe body of the joinpoint is created using `mkJPBody yFresh`, where `yFresh`\nis a fresh variable created by this method. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkJPBody : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a></span>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L387-L394","name":"Lean.Elab.Term.Do.mkSimpleJmp","line":387,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSimpleJmp","doc":"Create a new jointpoint for `c`, and jump to it with the variables `rs` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSimpleJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkSimpleJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rs : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a></span>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L381-L384","name":"Lean.Elab.Term.Do.eraseOptVar","line":381,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseOptVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseOptVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">eraseOptVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L378-L379","name":"Lean.Elab.Term.Do.eraseVars","line":378,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">eraseVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L375-L376","name":"Lean.Elab.Term.Do.insertVars","line":375,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.insertVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.insertVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">insertVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rs : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L370-L373","name":"Lean.Elab.Term.Do.addFreshJP","line":370,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.addFreshJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.addFreshJP\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">addFreshJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a></span>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L358-L368","name":"Lean.Elab.Term.Do.mkFreshJP","line":358,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkFreshJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkFreshJP\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkFreshJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L355-L356","name":"Lean.Elab.Term.Do.attachJPs","line":355,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJPs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJPs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">attachJPs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(jpDecls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L352-L353","name":"Lean.Elab.Term.Do.attachJP","line":352,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJP\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">attachJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(jpDecl : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L350-L350","name":"Lean.Elab.Term.Do.JPDecl.body","line":350,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.body","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.body\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">body</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L349-L349","name":"Lean.Elab.Term.Do.JPDecl.params","line":349,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.params","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L348-L348","name":"Lean.Elab.Term.Do.JPDecl.name","line":348,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L347-L347","name":"Lean.Elab.Term.Do.JPDecl.mk","line":347,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">Lean.Elab.Term.Do.JPDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L347-L350","name":"Lean.Elab.Term.Do.JPDecl","line":347,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L327-L344","name":"Lean.Elab.Term.Do.convertTerminalActionIntoJmp.loop","line":327,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">convertTerminalActionIntoJmp</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(jp : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L326-L345","name":"Lean.Elab.Term.Do.convertTerminalActionIntoJmp","line":326,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp","doc":"Convert `action _ e` instructions in `c` into `let y ← e; jmp _ jp (xs y)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">convertTerminalActionIntoJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(jp : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L317-L323","name":"Lean.Elab.Term.Do.mkAuxDeclFor","line":317,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkAuxDeclFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkAuxDeclFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkAuxDeclFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkCont : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L310-L315","name":"Lean.Elab.Term.Do.hasBreakContinueReturn","line":310,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinueReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinueReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasBreakContinueReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L304-L308","name":"Lean.Elab.Term.Do.hasBreakContinue","line":304,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasBreakContinue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L299-L302","name":"Lean.Elab.Term.Do.hasTerminalAction","line":299,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasTerminalAction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasTerminalAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasTerminalAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L294-L297","name":"Lean.Elab.Term.Do.hasReturn","line":294,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L291-L292","name":"Lean.Elab.Term.Do.hasExitPoint","line":291,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasExitPoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L279-L288","name":"Lean.Elab.Term.Do.hasExitPointPred.loop","line":279,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasExitPointPred</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L278-L289","name":"Lean.Elab.Term.Do.hasExitPointPred","line":278,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred","doc":"Return true if the give code contains an exit point that satisfies `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasExitPointPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L253-L274","name":"Lean.Elab.Term.Do.CodeBlocl.toMessageData.loop","line":253,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlocl</span>.<span class=\"name\">toMessageData</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(us : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L251-L275","name":"Lean.Elab.Term.Do.CodeBlocl.toMessageData","line":251,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlocl</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(codeBlock : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L243-L243","name":"Lean.Elab.Term.Do.CodeBlock.uvars","line":243,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.uvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.uvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">uvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L242-L242","name":"Lean.Elab.Term.Do.CodeBlock.code","line":242,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.code","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.code\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">code</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L241-L241","name":"Lean.Elab.Term.Do.CodeBlock.mk","line":241,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uvars : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">Lean.Elab.Term.Do.VarSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">Lean.Elab.Term.Do.CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L241-L243","name":"Lean.Elab.Term.Do.CodeBlock","line":241,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock","doc":"A code block, and the collection of variables updated by it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L238-L238","name":"Lean.Elab.Term.Do.VarSet","line":238,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">VarSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L224-L236","name":"Lean.Elab.Term.Do.Code.getRef?","line":224,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.getRef?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.getRef?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">getRef?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L222-L222","name":"Lean.Elab.Term.Do.instInhabitedCode","line":222,"kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L221-L221","name":"Lean.Elab.Term.Do.Code.jmp","line":221,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.jmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.jmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">jmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(jpName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L220-L220","name":"Lean.Elab.Term.Do.Code.matchExpr","line":220,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.matchExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.matchExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">matchExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(meta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discr : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(elseBranch : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L219-L219","name":"Lean.Elab.Term.Do.Code.match","line":219,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.match","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.match\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">match</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(gen : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discrs : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(optMotive : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Lean.Elab.Term.Do.Alt</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L217-L218","name":"Lean.Elab.Term.Do.Code.ite","line":217,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.ite","doc":"Recall that an if-then-else may declare a variable using `optIdent` for the branches `thenBranch` and `elseBranch`. We store the variable name at `var?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.ite\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">ite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(optIdent : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cond : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thenBranch : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(elseBranch : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L216-L216","name":"Lean.Elab.Term.Do.Code.return","line":216,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.return","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.return\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">return</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L215-L215","name":"Lean.Elab.Term.Do.Code.continue","line":215,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.continue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.continue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">continue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L214-L214","name":"Lean.Elab.Term.Do.Code.break","line":214,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.break","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.break\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">break</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L213-L213","name":"Lean.Elab.Term.Do.Code.action","line":213,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.action","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.action\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">action</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(action : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L212-L212","name":"Lean.Elab.Term.Do.Code.seq","line":212,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.seq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.seq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">seq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(action : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L210-L211","name":"Lean.Elab.Term.Do.Code.joinpoint","line":210,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.joinpoint","doc":"The Boolean value in `params` indicates whether we should use `(x : typeof! x)` when generating term Syntax or not "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.joinpoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">joinpoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L209-L209","name":"Lean.Elab.Term.Do.Code.reassign","line":209,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.reassign","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.reassign\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">reassign</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElem : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L208-L208","name":"Lean.Elab.Term.Do.Code.decl","line":208,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.decl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(doElem : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Lean.Elab.Term.Do.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L207-L222","name":"Lean.Elab.Term.Do.Code","line":207,"kind":"inductive","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code","doc":"Auxiliary datastructure for representing a `do` code block, and compiling \"reassignments\" (e.g., `x := x + 1`).\nWe convert `Code` into a `Syntax` term representing the:\n- `do`-block, or\n- the visitor argument for the `forIn` combinator.\n\nWe say the following constructors are terminals:\n- `break`:    for interrupting a `for x in s`\n- `continue`: for interrupting the current iteration of a `for x in s`\n- `return e`: for returning `e` as the result for the whole `do` computation block\n- `action a`: for executing action `a` as a terminal\n- `ite`:      if-then-else\n- `match`:    pattern matching\n- `jmp`       a goto to a join-point\n\nWe say the terminals `break`, `continue`, `action`, and `return` are \"exit points\"\n\nNote that, `return e` is not equivalent to `action (pure e)`. Here is an example:\n```\ndef f (x : Nat) : IO Unit := do\nif x == 0 then\n   return ()\nIO.println \"hello\"\n```\nExecuting `#eval f 0` will not print \"hello\". Now, consider\n```\ndef g (x : Nat) : IO Unit := do\nif x == 0 then\n   pure ()\nIO.println \"hello\"\n```\nThe `if` statement is essentially a noop, and \"hello\" is printed when we execute `g 0`.\n\n- `decl` represents all declaration-like `doElem`s (e.g., `let`, `have`, `let rec`).\n  The field `stx` is the actual `doElem`,\n  `vars` is the array of variables declared by it, and `cont` is the next instruction in the `do` code block.\n  `vars` is an array since we have declarations such as `let (a, b) := s`.\n\n- `reassign` is an reassignment-like `doElem` (e.g., `x := x + 1`).\n\n- `joinpoint` is a join point declaration: an auxiliary `let`-declaration used to represent the control-flow.\n\n- `seq a k` executes action `a`, ignores its result, and then executes `k`.\n  We also store the do-elements `dbg_trace` and `assert!` as actions in a `seq`.\n\nA code block `C` is well-formed if\n- For every `jmp ref j as` in `C`, there is a `joinpoint j ps b k` and `jmp ref j as` is in `k`, and\n  `ps.size == as.size` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L149-L157","name":"Lean.Elab.Term.Do.AltExpr.vars","line":149,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.vars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(alt : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L147-L147","name":"Lean.Elab.Term.Do.instInhabitedAltExpr","line":147,"kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAltExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAltExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedAltExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L146-L146","name":"Lean.Elab.Term.Do.AltExpr.rhs","line":146,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.rhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">rhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L145-L145","name":"Lean.Elab.Term.Do.AltExpr.pvars","line":145,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.pvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.pvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">pvars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L144-L144","name":"Lean.Elab.Term.Do.AltExpr.funName","line":144,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.funName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.funName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">funName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L143-L143","name":"Lean.Elab.Term.Do.AltExpr.var?","line":143,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.var?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.var?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">var?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L142-L142","name":"Lean.Elab.Term.Do.AltExpr.ref","line":142,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L141-L141","name":"Lean.Elab.Term.Do.AltExpr.mk","line":141,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(var? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funName : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">Lean.Elab.Term.Do.AltExpr</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L141-L147","name":"Lean.Elab.Term.Do.AltExpr","line":141,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr","doc":"A `doMatchExpr` alternative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L138-L138","name":"Lean.Elab.Term.Do.instInhabitedAlt","line":138,"kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Lean.Elab.Term.Do.Alt</a> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L137-L137","name":"Lean.Elab.Term.Do.Alt.rhs","line":137,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.rhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">rhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Lean.Elab.Term.Do.Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L136-L136","name":"Lean.Elab.Term.Do.Alt.patterns","line":136,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.patterns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.patterns\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">patterns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Lean.Elab.Term.Do.Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L135-L135","name":"Lean.Elab.Term.Do.Alt.vars","line":135,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.vars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Lean.Elab.Term.Do.Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L134-L134","name":"Lean.Elab.Term.Do.Alt.ref","line":134,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Lean.Elab.Term.Do.Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L133-L133","name":"Lean.Elab.Term.Do.Alt.mk","line":133,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Lean.Elab.Term.Do.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(patterns : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Lean.Elab.Term.Do.Alt</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L133-L138","name":"Lean.Elab.Term.Do.Alt","line":133,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt","doc":"A `doMatch` alternative. `vars` is the array of variables declared by `patterns`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L130-L130","name":"Lean.Elab.Term.Do.Var","line":130,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L92-L92","name":"Lean.Elab.Term.ExtractMonadResult.expectedType","line":92,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.expectedType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.expectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">expectedType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">Lean.Elab.Term.ExtractMonadResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L91-L91","name":"Lean.Elab.Term.ExtractMonadResult.returnType","line":91,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.returnType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.returnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">returnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">Lean.Elab.Term.ExtractMonadResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L90-L90","name":"Lean.Elab.Term.ExtractMonadResult.m","line":90,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.m","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.m\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">Lean.Elab.Term.ExtractMonadResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L89-L89","name":"Lean.Elab.Term.ExtractMonadResult.mk","line":89,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(returnType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">Lean.Elab.Term.ExtractMonadResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L89-L92","name":"Lean.Elab.Term.ExtractMonadResult","line":89,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Do.lean#L32-L33","name":"Lean.Elab.Term.elabLiftMethod","line":32,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.elabLiftMethod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.elabLiftMethod\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabLiftMethod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"}]}