{"name":"Lean.Elab.PreDefinition.WF.GuessLex","instances":[{"typeNames":["Lean.Elab.WF.GuessLex.GuessLexRel"],"name":"Lean.Elab.WF.GuessLex.instReprGuessLexRel","className":"Repr"},{"typeNames":["Eq"],"name":"Lean.Elab.WF.GuessLex.instDecidableEqGuessLexRel","className":"Decidable"},{"typeNames":["Lean.Elab.WF.GuessLex.GuessLexRel"],"name":"Lean.Elab.WF.GuessLex.instToStringGuessLexRel","className":"ToString"},{"typeNames":["Lean.Elab.WF.GuessLex.GuessLexRel"],"name":"Lean.Elab.WF.GuessLex.instToFormatGuessLexRel","className":"Std.ToFormat"}],"imports":["Lean.Util.HasConstCache","Lean.Meta.Match.MatcherApp.Transform","Lean.Meta.Tactic.Cleanup","Lean.Meta.Tactic.Refl","Lean.Meta.Tactic.TryThis","Lean.Elab.Quotation","Lean.Elab.RecAppSyntax","Lean.Elab.PreDefinition.Basic","Lean.Elab.PreDefinition.Structural.Basic","Lean.Elab.PreDefinition.WF.TerminationHint","Lean.Elab.PreDefinition.WF.PackMutual","Lean.Data.Array"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L683-L725","name":"Lean.Elab.WF.guessLex","line":683,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.guessLex","doc":"Main entry point of this module:\n\nTry to find a lexicographic ordering of the arguments for which the recursive definition\nterminates. See the module doc string for a high-level overview.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.guessLex\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">guessLex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(preDefs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">Lean.Elab.PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unaryPreDef : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">Lean.Elab.PreDefinition</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fixedPrefixSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/TerminationHint.html#Lean.Elab.WF.TerminationWF\">Lean.Elab.WF.TerminationWF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L661-L669","name":"Lean.Elab.WF.GuessLex.explainFailure","line":661,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainFailure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">explainFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(varNamess : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rcs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L632-L659","name":"Lean.Elab.WF.GuessLex.explainMutualFailure","line":632,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainMutualFailure","doc":"Explain what we found out about the recursive calls (mutual case) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainMutualFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">explainMutualFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(varNamess : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rcs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L620-L629","name":"Lean.Elab.WF.GuessLex.explainNonMutualFailure","line":620,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainNonMutualFailure","doc":"Explain what we found out about the recursive calls (non-mutual case) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainNonMutualFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">explainNonMutualFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(varNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rcs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L604-L616","name":"Lean.Elab.WF.GuessLex.RecCallWithContext.posString","line":604,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.posString","doc":"Concise textual representation of the source location of a recursive call  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.posString\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">posString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rcc : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L580-L601","name":"Lean.Elab.WF.GuessLex.formatTable","line":580,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.formatTable","doc":"Given a matrix (row-major) of strings, arranges them in tabular form.\nFirst column is left-aligned, others right-aligned.\nSingle space as column separator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.formatTable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">formatTable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L570-L573","name":"Lean.Elab.WF.GuessLex.trimTermWF","line":570,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.trimTermWF","doc":"The TerminationWF produced by GuessLex may mention more variables than allowed in the surface\nsyntax (in case of unnamed or shadowed parameters). So how to print this to the user? Invalid\nsyntax with more information, or valid syntax with (possibly) unresolved variable names?\nThe latter works fine in many cases, and is still useful to the user in the tricky corner cases, so\nwe do that.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.trimTermWF\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">trimTermWF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(extraParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(elems : <a href=\"./Lean/Elab/PreDefinition/WF/TerminationHint.html#Lean.Elab.WF.TerminationWF\">Lean.Elab.WF.TerminationWF</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/TerminationHint.html#Lean.Elab.WF.TerminationWF\">Lean.Elab.WF.TerminationWF</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L541-L561","name":"Lean.Elab.WF.GuessLex.buildTermWF","line":541,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.buildTermWF","doc":"Given an array of `MutualMeasures`, creates a `TerminationWF` that specifies the lexicographic\ncombination of these measures. The parameters are\n\n* `originalVarNamess`: For each function in the clique, the original parameter names, _including_\n  the fixed prefix.  Used to determine if we need to fully qualify `sizeOf`.\n* `varNamess`: For each function in the clique, the parameter names to be used in the\n  termination relation. Excludes the fixed prefix. Includes names like `x1` for unnamed parameters.\n* `measures`: The measures to be used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.buildTermWF\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">buildTermWF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(originalVarNamess : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(varNamess : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(measures : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">Lean.Elab.WF.GuessLex.MutualMeasure</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/TerminationHint.html#Lean.Elab.WF.TerminationWF\">Lean.Elab.WF.TerminationWF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L526-L529","name":"Lean.Elab.WF.GuessLex.mkTupleSyntax","line":526,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.mkTupleSyntax","doc":"Create Tuple syntax (`()` if the array is empty, and just the value if its a singleton)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.mkTupleSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">mkTupleSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L497-L521","name":"Lean.Elab.WF.GuessLex.solve.go","line":497,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.solve.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.solve.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">solve</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(measures : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(calls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L493-L521","name":"Lean.Elab.WF.GuessLex.solve","line":493,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.solve","doc":"The core logic of guessing the lexicographic order\nGiven a matrix that for each call and measure indicates whether that measure is\ndecreasing, equal, less-or-equal or unknown, It finds a sequence of measures\nthat is lexicographically decreasing.\n\nThe matrix is implemented here as an array of monadic query methods only so that\nwe can fill is lazily. Morally, this is a pure function\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.solve\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">solve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(measures : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(calls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L471-L482","name":"Lean.Elab.WF.GuessLex.generateMeasures","line":471,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateMeasures","doc":"Enumerate all meausures we want to try: All arguments (resp. combinations thereof) and\npossible orderings of functions (if more than one)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateMeasures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">generateMeasures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(forbiddenArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arities : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">Lean.Elab.WF.GuessLex.MutualMeasure</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L453-L464","name":"Lean.Elab.WF.GuessLex.generateCombinations?.go","line":453,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">generateCombinations?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(forbiddenArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(threshold : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L446-L450","name":"Lean.Elab.WF.GuessLex.generateCombinations?.goUniform","line":446,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?.goUniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?.goUniform\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">generateCombinations?</span>.<span class=\"name\">goUniform</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(forbiddenArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L439-L443","name":"Lean.Elab.WF.GuessLex.generateCombinations?.isForbidden","line":439,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?.isForbidden","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?.isForbidden\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">generateCombinations?</span>.<span class=\"name\">isForbidden</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(forbiddenArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L435-L464","name":"Lean.Elab.WF.GuessLex.generateCombinations?","line":435,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?","doc":"Generate all combination of arguments, skipping those that are forbidden.\n\nSorts the uniform combinations ([0,0,0], [1,1,1]) to the front; they are commonly most useful to\ntry first, when the mutually recursive functions have similar argument structures\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">generateCombinations?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(forbiddenArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(threshold : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L416-L426","name":"Lean.Elab.WF.GuessLex.getForbiddenByTrivialSizeOf","line":416,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.getForbiddenByTrivialSizeOf","doc":"Given a predefinition with value `fun (x_₁ ... xₙ) (y_₁ : α₁)... (yₘ : αₘ) => ...`,\nwhere `n = fixedPrefixSize`, return an array `A` s.t. `i ∈ A` iff `sizeOf yᵢ` reduces to a literal.\nThis is the case for types such as `Prop`, `Type u`, etc.\nThese arguments should not be considered when guessing a well-founded relation.\nSee `generateCombinations?`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.getForbiddenByTrivialSizeOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">getForbiddenByTrivialSizeOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fixedPrefixSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(preDef : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">Lean.Elab.PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L396-L407","name":"Lean.Elab.WF.GuessLex.inspectCall","line":396,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.inspectCall","doc":"Evaluate a recursive call at a given `MutualMeasure` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.inspectCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">inspectCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rc : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">Lean.Elab.WF.GuessLex.MutualMeasure</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L392-L393","name":"Lean.Elab.WF.GuessLex.MutualMeasure.func","line":392,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure.func","doc":"The given function index is assigned 1, the rest 0 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure.func\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">MutualMeasure</span>.<span class=\"name\">func</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">Lean.Elab.WF.GuessLex.MutualMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L390-L391","name":"Lean.Elab.WF.GuessLex.MutualMeasure.args","line":390,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure.args","doc":"For every function, the given argument index "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">MutualMeasure</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">Lean.Elab.WF.GuessLex.MutualMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L389-L393","name":"Lean.Elab.WF.GuessLex.MutualMeasure","line":389,"kind":"inductive","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure","doc":"The measures that we order lexicographically can be comparing arguments,\nor numbering the functions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">MutualMeasure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L381-L385","name":"Lean.Elab.WF.GuessLex.RecCallCache.prettyEntry","line":381,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.prettyEntry","doc":"Print a single cache entry as a string, without forcing it "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.prettyEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">prettyEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rcc : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(paramIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L370-L377","name":"Lean.Elab.WF.GuessLex.RecCallCache.eval","line":370,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.eval","doc":"Run `evalRecCall` and cache there result "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rc : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(paramIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L362-L367","name":"Lean.Elab.WF.GuessLex.RecCallCache.mk","line":362,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.mk","doc":"Create a cache to memoize calls to `evalRecCall descTactic? rcc` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decrTactics : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/WF/TerminationHint.html#Lean.Elab.WF.DecreasingBy\">Lean.Elab.WF.DecreasingBy</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rcc : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L359-L359","name":"Lean.Elab.WF.GuessLex.RecCallCache.cache","line":359,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L358-L358","name":"Lean.Elab.WF.GuessLex.RecCallCache.rcc","line":358,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.rcc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.rcc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">rcc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L357-L357","name":"Lean.Elab.WF.GuessLex.RecCallCache.decrTactic?","line":357,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.decrTactic?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.decrTactic?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">decrTactic?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/WF/TerminationHint.html#Lean.Elab.WF.DecreasingBy\">Lean.Elab.WF.DecreasingBy</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L356-L356","name":"Lean.Elab.WF.GuessLex.RecCallCache.mk''","line":356,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.mk''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.mk''\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">mk''</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decrTactic? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/WF/TerminationHint.html#Lean.Elab.WF.DecreasingBy\">Lean.Elab.WF.DecreasingBy</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rcc : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cache : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span>)</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">Lean.Elab.WF.GuessLex.RecCallCache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L356-L359","name":"Lean.Elab.WF.GuessLex.RecCallCache","line":356,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L318-L353","name":"Lean.Elab.WF.GuessLex.evalRecCall","line":318,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.evalRecCall","doc":"For a given recursive call, and a choice of parameter and argument index,\ntry to prove equality, < or ≤.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.evalRecCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">evalRecCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decrTactic? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/WF/TerminationHint.html#Lean.Elab.WF.DecreasingBy\">Lean.Elab.WF.DecreasingBy</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rcc : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(paramIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L306-L312","name":"Lean.Elab.WF.GuessLex.mkSizeOf","line":306,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.mkSizeOf","doc":"Given an expression `e`, produce `sizeOf e` with a suitable instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.mkSizeOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">mkSizeOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L299-L303","name":"Lean.Elab.WF.GuessLex.GuessLexRel.toNatRel","line":299,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.toNatRel","doc":"Given a `GuessLexRel`, produce a binary `Expr` that relates two `Nat` values accordingly. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.toNatRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">toNatRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L295-L296","name":"Lean.Elab.WF.GuessLex.instToFormatGuessLexRel","line":295,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instToFormatGuessLexRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instToFormatGuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instToFormatGuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L289-L293","name":"Lean.Elab.WF.GuessLex.instToStringGuessLexRel","line":289,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instToStringGuessLexRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instToStringGuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instToStringGuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L287-L287","name":"Lean.Elab.WF.GuessLex.instDecidableEqGuessLexRel","line":287,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instDecidableEqGuessLexRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instDecidableEqGuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instDecidableEqGuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L287-L287","name":"Lean.Elab.WF.GuessLex.instReprGuessLexRel","line":287,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instReprGuessLexRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instReprGuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instReprGuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L286-L286","name":"Lean.Elab.WF.GuessLex.GuessLexRel.no_idea","line":286,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.no_idea","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.no_idea\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">no_idea</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L286-L286","name":"Lean.Elab.WF.GuessLex.GuessLexRel.le","line":286,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.le\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L286-L286","name":"Lean.Elab.WF.GuessLex.GuessLexRel.eq","line":286,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L286-L286","name":"Lean.Elab.WF.GuessLex.GuessLexRel.lt","line":286,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">Lean.Elab.WF.GuessLex.GuessLexRel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L286-L287","name":"Lean.Elab.WF.GuessLex.GuessLexRel","line":286,"kind":"inductive","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel","doc":"A `GuessLexRel` described how a recursive call affects a measure; whether it\ndecreases strictly, non-strictly, is equal, or else.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L267-L282","name":"Lean.Elab.WF.GuessLex.collectRecCalls","line":267,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.collectRecCalls","doc":"Traverse a unary PreDefinition, and returns a `WithRecCall` closure for each recursive\ncall site.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.collectRecCalls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">collectRecCalls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(unaryPreDef : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">Lean.Elab.PreDefinition</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fixedPrefixSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arities : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L249-L262","name":"Lean.Elab.WF.GuessLex.filterSubsumed","line":249,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.filterSubsumed","doc":"The elaborator is prone to duplicate terms, including recursive calls, even if the user\nonly wrote a single one. This duplication is wasteful if we run the tactics on duplicated\ncalls, and confusing in the output of GuessLex. So prune the list of recursive calls,\nand remove those where another call exists that has the same goal and context that is no more\nspecific.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.filterSubsumed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">filterSubsumed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rcs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L237-L239","name":"Lean.Elab.WF.GuessLex.RecCallWithContext.create","line":237,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.create","doc":"Store the current recursive call and its context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.create\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">create</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(caller : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(callee : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L234-L234","name":"Lean.Elab.WF.GuessLex.RecCallWithContext.ctxt","line":234,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.ctxt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.ctxt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">ctxt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">Lean.Elab.WF.GuessLex.SavedLocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L233-L233","name":"Lean.Elab.WF.GuessLex.RecCallWithContext.args","line":233,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.args","doc":"Arguments to callee "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L231-L231","name":"Lean.Elab.WF.GuessLex.RecCallWithContext.callee","line":231,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.callee","doc":"Function index of callee "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.callee\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">callee</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L229-L229","name":"Lean.Elab.WF.GuessLex.RecCallWithContext.params","line":229,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.params","doc":"Parameters of caller "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L227-L227","name":"Lean.Elab.WF.GuessLex.RecCallWithContext.caller","line":227,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.caller","doc":"Function index of caller "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.caller\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">caller</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L225-L225","name":"Lean.Elab.WF.GuessLex.RecCallWithContext.ref","line":225,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.ref","doc":"Syntax location of recursive call "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L223-L223","name":"Lean.Elab.WF.GuessLex.RecCallWithContext.mk","line":223,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(caller : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(callee : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctxt : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">Lean.Elab.WF.GuessLex.SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">Lean.Elab.WF.GuessLex.RecCallWithContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L223-L234","name":"Lean.Elab.WF.GuessLex.RecCallWithContext","line":223,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext","doc":"A `RecCallWithContext` focuses on a single recursive call in a unary predefinition,\nand runs the given action in the context of that call.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L214-L219","name":"Lean.Elab.WF.GuessLex.SavedLocalContext.run","line":214,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.run","doc":"Run a `MetaM` action in the saved state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(slc : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">Lean.Elab.WF.GuessLex.SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L207-L211","name":"Lean.Elab.WF.GuessLex.SavedLocalContext.create","line":207,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.create","doc":"Capture the `MetaM` state including local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.create\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">create</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">Lean.Elab.WF.GuessLex.SavedLocalContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L204-L204","name":"Lean.Elab.WF.GuessLex.SavedLocalContext.savedState","line":204,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">savedState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">Lean.Elab.WF.GuessLex.SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Lean.Meta.SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L203-L203","name":"Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalInstances","line":203,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalInstances","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">savedLocalInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">Lean.Elab.WF.GuessLex.SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L202-L202","name":"Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalContext","line":202,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">savedLocalContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">Lean.Elab.WF.GuessLex.SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L201-L201","name":"Lean.Elab.WF.GuessLex.SavedLocalContext.mk","line":201,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(savedLocalContext : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(savedLocalInstances : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(savedState : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Lean.Meta.SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">Lean.Elab.WF.GuessLex.SavedLocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L201-L204","name":"Lean.Elab.WF.GuessLex.SavedLocalContext","line":201,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext","doc":"A `SavedLocalContext` captures the state and local context of a `MetaM`, to be continued later.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L154-L196","name":"Lean.Elab.WF.GuessLex.withRecApps.loop","line":154,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">withRecApps</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(recFnName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fixedPrefixSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(param : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.M\">Lean.Elab.WF.GuessLex.M</a> <span class=\"fn\">recFnName</span> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L151-L152","name":"Lean.Elab.WF.GuessLex.withRecApps.containsRecFn","line":151,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps.containsRecFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps.containsRecFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">withRecApps</span>.<span class=\"name\">containsRecFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(recFnName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.M\">Lean.Elab.WF.GuessLex.M</a> <span class=\"fn\">recFnName</span> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L143-L149","name":"Lean.Elab.WF.GuessLex.withRecApps.processApp","line":143,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps.processApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps.processApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">withRecApps</span>.<span class=\"name\">processApp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(recFnName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fixedPrefixSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(param : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.M\">Lean.Elab.WF.GuessLex.M</a> <span class=\"fn\">recFnName</span> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L136-L141","name":"Lean.Elab.WF.GuessLex.withRecApps.processRec","line":136,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps.processRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps.processRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">withRecApps</span>.<span class=\"name\">processRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(recFnName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fixedPrefixSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(param : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.M\">Lean.Elab.WF.GuessLex.M</a> <span class=\"fn\">recFnName</span> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L130-L196","name":"Lean.Elab.WF.GuessLex.withRecApps","line":130,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps","doc":"Traverses the given expression `e`, and invokes the continuation `k`\nat every saturated call to `recFnName`.\n\nThe expression `param` is passed along, and refined when going under a matcher\nor `casesOn` application.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">withRecApps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(recFnName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fixedPrefixSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(param : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L120-L121","name":"Lean.Elab.WF.GuessLex.M","line":120,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.M","doc":"Internal monad used by `withRecApps` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(recFnName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L112-L116","name":"Lean.Elab.WF.GuessLex.naryVarNames.freshen","line":112,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.naryVarNames.freshen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.naryVarNames.freshen\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">naryVarNames</span>.<span class=\"name\">freshen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ns : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L100-L116","name":"Lean.Elab.WF.GuessLex.naryVarNames","line":100,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.naryVarNames","doc":"Given the original paramter names from `originalVarNames`, remove the fixed prefix and find\ngood variable names to be used when talking about termination arguments:\nUse user-given parameter names if present; use x1...xn otherwise.\n\nThe names ought to accessible (no macro scopes) and new names  fresh wrt to the current environment,\nso that with `showInferredTerminationBy` we can print them to the user reliably.\nWe do that by appending `'` as needed.\n\nIt is possible (but unlikely without malice) that some of the user-given names\nshadow each other, and the guessed relation refers to the wrong one. In that\ncase, the user gets to keep both pieces (and may have to rename variables).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.naryVarNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">naryVarNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fixedPrefixSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L83-L84","name":"Lean.Elab.WF.GuessLex.originalVarNames","line":83,"kind":"def","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.originalVarNames","doc":"Given a predefinition, return the variabe names in the outermost lambdas.\nIncludes the “fixed prefix”.\n\nThe length of the returned array is also used to determine the arity\nof the function, so it should match what `packDomain` does.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.originalVarNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">originalVarNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(preDef : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">Lean.Elab.PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L70-L73","name":"Lean.Elab.WF.GuessLex.showInferredTerminationBy","line":70,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.showInferredTerminationBy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.showInferredTerminationBy\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">showInferredTerminationBy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}