{"name":"Lean.Elab.Tactic.Ext","instances":[{"typeNames":["Lean.Elab.Tactic.Ext.ExtTheorem"],"name":"Lean.Elab.Tactic.Ext.instInhabitedExtTheorem","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.Ext.ExtTheorem"],"name":"Lean.Elab.Tactic.Ext.instReprExtTheorem","className":"Repr"},{"typeNames":["Lean.Elab.Tactic.Ext.ExtTheorem"],"name":"Lean.Elab.Tactic.Ext.instBEqExtTheorem","className":"BEq"},{"typeNames":["Lean.Elab.Tactic.Ext.ExtTheorem"],"name":"Lean.Elab.Tactic.Ext.instHashableExtTheorem","className":"Hashable"},{"typeNames":["Lean.Elab.Tactic.Ext.ExtTheorems"],"name":"Lean.Elab.Tactic.Ext.instInhabitedExtTheorems","className":"Inhabited"}],"imports":["Init.Ext","Lean.Elab.Tactic.RCases","Lean.Elab.Tactic.Repeat","Lean.Elab.Tactic.BuiltinTactic","Lean.Elab.Command","Lean.Linter.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L258-L269","name":"Lean.Elab.Tactic.Ext.evalExt","line":258,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.evalExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.evalExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">evalExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L252-L256","name":"Lean.Elab.Tactic.Ext.extCore","line":252,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.extCore","doc":"Apply extensionality theorems as much as possible, using `pats` to introduce the variables\nin extensionality theorems like `funext`. Returns a list of subgoals.\n\nThis is built on top of `withExtN`, running in `TermElabM` to build the list of new subgoals.\n(And, for each goal, the patterns consumed.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.extCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">extCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pats : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(depth : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1000000</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(failIfUnchanged : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span></span>)</span></span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L233-L243","name":"Lean.Elab.Tactic.Ext.withExtN","line":233,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.withExtN","doc":"Applies extensionality theorems recursively, using `pats` to introduce variables in the result.\nRuns continuation `k` on each subgoal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.withExtN\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">withExtN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pats : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(depth : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1000000</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(failIfUnchanged : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L222-L227","name":"Lean.Elab.Tactic.Ext.withExt1","line":222,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.withExt1","doc":"Applies a single extensionality theorem, using `pats` to introduce variables in the result.\nRuns continuation `k` on each subgoal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.withExt1\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">withExt1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pats : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L206-L216","name":"Lean.Elab.Tactic.Ext.tryIntros","line":206,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.tryIntros","doc":"Postprocessor for `withExt` which runs `rintro` with the given patterns when the target is a\npi type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.tryIntros\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">tryIntros</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pats : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L199-L200","name":"Lean.Elab.Tactic.Ext.evalApplyExtTheorem","line":199,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.evalApplyExtTheorem","doc":"Apply a single extensionality theorem to the current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.evalApplyExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">evalApplyExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L175-L196","name":"Lean.Elab.Tactic.Ext.applyExtTheoremAt","line":175,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.applyExtTheoremAt","doc":"Apply a single extensionality theorem to `goal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.applyExtTheoremAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">applyExtTheoremAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L166-L172","name":"Lean.Elab.Tactic.Ext.elabExtIffType","line":166,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.elabExtIffType","doc":"Creates the type of the iff-variant of the extensionality theorem for the given structure,\nelaborating to `x = y ↔ x.1 = y.1 ∧ x.2 = y.2`, for example.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.elabExtIffType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">elabExtIffType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L153-L160","name":"Lean.Elab.Tactic.Ext.elabExtType","line":153,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.elabExtType","doc":"Creates the type of the extensionality theorem for the given structure,\nelaborating to `x.1 = y.1 → x.2 = y.2 → x = y`, for example.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.elabExtType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">elabExtType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L121-L147","name":"Lean.Elab.Tactic.Ext.withExtHyps","line":121,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.withExtHyps","doc":"Constructs the hypotheses for the structure extensionality theorem that\nstates that two structures are equal if their fields are equal.\n\nCalls the continuation `k` with the list of parameters to the structure,\ntwo structure variables `x` and `y`, and a list of pairs `(field, ty)`\nwhere `ty` is `x.field = y.field` or `HEq x.field y.field`.\n\nIf `flat` parses to `true`, any fields inherited from parent structures\nare treated fields of the given structure type.\nIf it is `false`, then the behind-the-scenes encoding of inherited fields\nis visible in the extensionality lemma.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.withExtHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">withExtHyps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(flat : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L73-L77","name":"Lean.Elab.Tactic.Ext.ExtTheorems.erase","line":73,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.erase","doc":"Erases a name marked as a `ext` attribute.\nCheck that it does in fact have the `ext` attribute by making sure it names a `ExtTheorem`\nfound somewhere in the state's tree, and is not erased.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\">Lean.Elab.Tactic.Ext.ExtTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\">Lean.Elab.Tactic.Ext.ExtTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L65-L66","name":"Lean.Elab.Tactic.Ext.ExtTheorems.eraseCore","line":65,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.eraseCore","doc":"Erases a name marked `ext` by adding it to the state's `erased` field and\nremoving it from the state's list of `Entry`s.\n\nThis is triggered by `attribute [-ext] name`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.eraseCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">eraseCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\">Lean.Elab.Tactic.Ext.ExtTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\">Lean.Elab.Tactic.Ext.ExtTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L51-L57","name":"Lean.Elab.Tactic.Ext.getExtTheorems","line":51,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.getExtTheorems","doc":"Gets the list of `@[ext]` theorems corresponding to the key `ty`,\nordered from high priority to low. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.getExtTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">getExtTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L40-L47","name":"Lean.Elab.Tactic.Ext.extExtension","line":40,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.extExtension","doc":"The environment extension to track `@[ext]` theorems. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.extExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">extExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\">Lean.Elab.Tactic.Ext.ExtTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L38-L38","name":"Lean.Elab.Tactic.Ext.extExt.config","line":38,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.extExt.config","doc":"Discrimation tree settings for the `ext` extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.extExt.config\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">extExt</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L35-L35","name":"Lean.Elab.Tactic.Ext.instInhabitedExtTheorems","line":35,"kind":"instance","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instInhabitedExtTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instInhabitedExtTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instInhabitedExtTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\">Lean.Elab.Tactic.Ext.ExtTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L34-L34","name":"Lean.Elab.Tactic.Ext.ExtTheorems.erased","line":34,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.erased","doc":"Erased `ext`s via `attribute [-ext]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\">Lean.Elab.Tactic.Ext.ExtTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L32-L32","name":"Lean.Elab.Tactic.Ext.ExtTheorems.tree","line":32,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.tree","doc":"The tree of `ext` extensions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.tree\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">tree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\">Lean.Elab.Tactic.Ext.ExtTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L30-L30","name":"Lean.Elab.Tactic.Ext.ExtTheorems.mk","line":30,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tree : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(erased : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\">Lean.Elab.Tactic.Ext.ExtTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L30-L35","name":"Lean.Elab.Tactic.Ext.ExtTheorems","line":30,"kind":"structure","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems","doc":"The state of the `ext` extension environment "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L27-L27","name":"Lean.Elab.Tactic.Ext.instHashableExtTheorem","line":27,"kind":"instance","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instHashableExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instHashableExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instHashableExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L27-L27","name":"Lean.Elab.Tactic.Ext.instBEqExtTheorem","line":27,"kind":"instance","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instBEqExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instBEqExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instBEqExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L27-L27","name":"Lean.Elab.Tactic.Ext.instReprExtTheorem","line":27,"kind":"instance","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instReprExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instReprExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instReprExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L27-L27","name":"Lean.Elab.Tactic.Ext.instInhabitedExtTheorem","line":27,"kind":"instance","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instInhabitedExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.instInhabitedExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instInhabitedExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L26-L26","name":"Lean.Elab.Tactic.Ext.ExtTheorem.keys","line":26,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem.keys","doc":"Key in the discrimination tree,\nfor the type in which the extensionality theorem holds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem.keys\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">keys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L21-L21","name":"Lean.Elab.Tactic.Ext.ExtTheorem.priority","line":21,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem.priority","doc":"Priority of the extensionality theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem.priority\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">priority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L19-L19","name":"Lean.Elab.Tactic.Ext.ExtTheorem.declName","line":19,"kind":"def","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem.declName","doc":"Declaration name of the extensionality theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L17-L17","name":"Lean.Elab.Tactic.Ext.ExtTheorem.mk","line":17,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(priority : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\">Lean.Elab.Tactic.Ext.ExtTheorem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Ext.lean#L17-L27","name":"Lean.Elab.Tactic.Ext.ExtTheorem","line":17,"kind":"structure","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem","doc":"Information about an extensionality theorem, stored in the environment extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.ExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}