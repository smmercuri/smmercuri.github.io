{"name":"Lean.Elab.Tactic.Omega.OmegaM","instances":[],"imports":["Init.Omega.LinearCombo","Init.Omega.Int","Init.Omega.Logic","Init.Data.BitVec","Lean.Meta.AppBuilder"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L245-L257","name":"Lean.Elab.Tactic.Omega.lookup","line":245,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.lookup","doc":"Look up an expression in the atoms, recording it if it has not previously appeared.\n\nReturn its index, and, if it is new, a collection of interesting facts about the atom.\n* for each new atom `a` of the form `((x : Nat) : Int)`, the fact that `0 ≤ a`\n* for each new atom `a` of the form `x / k`, for `k` a positive numeral, the facts that\n  `k * a ≤ x < k * a + k`\n* for each new atom of the form `((a - b : Nat) : Int)`, the fact:\n  `b ≤ a ∧ ((a - b : Nat) : Int) = a - b ∨ a < b ∧ ((a - b : Nat) : Int) = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.lookup\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">lookup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L164-L233","name":"Lean.Elab.Tactic.Omega.analyzeAtom","line":164,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.analyzeAtom","doc":"Analyzes a newly recorded atom,\nreturning a collection of interesting facts about it that should be added to the context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.analyzeAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">analyzeAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L157-L158","name":"Lean.Elab.Tactic.Omega.mkEqReflWithExpectedType","line":157,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.mkEqReflWithExpectedType","doc":"Construct the term with type hint `(Eq.refl a : a = b)`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.mkEqReflWithExpectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkEqReflWithExpectedType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L151-L154","name":"Lean.Elab.Tactic.Omega.groundInt?.op","line":151,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundInt?.op","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundInt?.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">groundInt?</span>.<span class=\"name\">op</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L140-L154","name":"Lean.Elab.Tactic.Omega.groundInt?","line":140,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundInt?","doc":"If `groundInt? e = some i`,\nthen `e` is definitionally equal to the standard expression for `i`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundInt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">groundInt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L131-L134","name":"Lean.Elab.Tactic.Omega.groundNat?.op","line":131,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundNat?.op","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundNat?.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">groundNat?</span>.<span class=\"name\">op</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L122-L134","name":"Lean.Elab.Tactic.Omega.groundNat?","line":122,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundNat?","doc":"If `groundNat? e = some n`, then `e` is definitionally equal to `OfNat.ofNat n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundNat?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">groundNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L112-L115","name":"Lean.Elab.Tactic.Omega.intCast?","line":112,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.intCast?","doc":"Wrapper around `Expr.int?` that also allows `Nat.cast`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.intCast?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">intCast?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L106-L109","name":"Lean.Elab.Tactic.Omega.natCast?","line":106,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.natCast?","doc":"Wrapper around `Expr.nat?` that also allows `Nat.cast`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.natCast?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">natCast?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L102-L103","name":"Lean.Elab.Tactic.Omega.withoutModifyingState","line":102,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.withoutModifyingState","doc":"Run an `OmegaM` computation, restoring the state afterwards.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.withoutModifyingState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">withoutModifyingState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L90-L97","name":"Lean.Elab.Tactic.Omega.commitWhen","line":90,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.commitWhen","doc":"Run an `OmegaM` computation, restoring the state afterwards depending on the result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.commitWhen\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">commitWhen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L86-L87","name":"Lean.Elab.Tactic.Omega.atomsCoeffs","line":86,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atomsCoeffs","doc":"Return the `Expr` representing the list of atoms as a `Coeffs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atomsCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">atomsCoeffs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L83-L83","name":"Lean.Elab.Tactic.Omega.atomsList","line":83,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atomsList","doc":"Return the `Expr` representing the list of atoms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atomsList\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">atomsList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L79-L80","name":"Lean.Elab.Tactic.Omega.atoms","line":79,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atoms","doc":"Retrieve the list of atoms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atoms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">atoms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L76-L76","name":"Lean.Elab.Tactic.Omega.cfg","line":76,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.cfg","doc":"Retrieve the user-specified configuration options. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.cfg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">cfg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L72-L73","name":"Lean.Elab.Tactic.Omega.OmegaM.run","line":72,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM.run","doc":"Run a computation in the `OmegaM` monad, starting with no recorded atoms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">Lean.Elab.Tactic.Omega.OmegaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L69-L69","name":"Lean.Elab.Tactic.Omega.OmegaM","line":69,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM","doc":"The `OmegaM` monad maintains two pieces of state:\n* the linear atoms discovered while processing hypotheses\n* a cache mapping subexpressions of one side of a linear inequality to `LinearCombo`s\n  (and a proof that the `LinearCombo` evaluates at the atoms to the original expression). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L62-L62","name":"Lean.Elab.Tactic.Omega.Cache","line":62,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Cache","doc":"Cache of expressions that have been visited, and their reflection as a linear combination.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L57-L57","name":"Lean.Elab.Tactic.Omega.OmegaM'","line":57,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM'","doc":"An intermediate layer in the `OmegaM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaM'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L54-L54","name":"Lean.Elab.Tactic.Omega.State.atoms","line":54,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State.atoms","doc":"The atoms up-to-defeq encountered so far. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State.atoms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">State</span>.<span class=\"name\">atoms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State\">Lean.Elab.Tactic.Omega.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L52-L52","name":"Lean.Elab.Tactic.Omega.State.mk","line":52,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(atoms : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State\">Lean.Elab.Tactic.Omega.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L52-L54","name":"Lean.Elab.Tactic.Omega.State","line":52,"kind":"structure","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State","doc":"The internal state for the `OmegaM` monad, recording previously encountered atoms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L49-L49","name":"Lean.Elab.Tactic.Omega.Context.cfg","line":49,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context.cfg","doc":"User configurable options for `omega`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context.cfg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Context</span>.<span class=\"name\">cfg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context\">Lean.Elab.Tactic.Omega.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L47-L47","name":"Lean.Elab.Tactic.Omega.Context.mk","line":47,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Lean.Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context\">Lean.Elab.Tactic.Omega.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L47-L49","name":"Lean.Elab.Tactic.Omega.Context","line":47,"kind":"structure","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context","doc":"Context for the `OmegaM` monad, containing the user configurable options. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}