{"name":"Mathlib.MeasureTheory.Function.SimpleFuncDenseLp","instances":[{"typeNames":["Subtype","Subtype"],"name":"MeasureTheory.Lp.simpleFunc.instCovariantClassLE","className":"CovariantClass"}],"imports":["Init","Mathlib.MeasureTheory.Function.L1Space","Mathlib.MeasureTheory.Function.SimpleFuncDense"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L1047-L1056","name":"MeasureTheory.Integrable.induction","line":1047,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Integrable.induction","doc":"To prove something for an arbitrary integrable function in a normed group,\nit suffices to show that\n* the property holds for (multiples of) characteristic functions;\n* is closed under addition;\n* the set of functions in the `L¹` space for which the property holds is closed.\n* the property is closed under the almost-everywhere equal relation.\n\nIt is possible to make the hypotheses in the induction steps a bit stronger, and such conditions\ncan be added once we need them (for example in `h_add` it is only necessary to consider the sum of\na simple function with a multiple of a characteristic function and that the intersection\nof their images is a subset of `{0}`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Integrable.induction\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Integrable</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_ind : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">E</span>) ⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span></span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_add : <span class=\"fn\">∀ ⦃<span class=\"fn\">f </span>g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>⦄,\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">g</span></span>)</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">g</span> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">g</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span></span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_closed : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Lp\">MeasureTheory.Lp</a> <span class=\"fn\">E</span> <span class=\"fn\">1</span> <span class=\"fn\">μ</span></span>)</span></span> | <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">f</span></span></span></span>}</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_ae : <span class=\"fn\">∀ ⦃<span class=\"fn\">f </span>g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">g</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">g</span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>⦄</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L1029-L1031","name":"MeasureTheory.L1.SimpleFunc.integrable","line":1029,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.L1.SimpleFunc.integrable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.L1.SimpleFunc.integrable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">L1</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">integrable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">1</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L1024-L1026","name":"MeasureTheory.L1.SimpleFunc.toLp_one_eq_toL1","line":1024,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.L1.SimpleFunc.toLp_one_eq_toL1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.L1.SimpleFunc.toLp_one_eq_toL1\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">L1</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">toLp_one_eq_toL1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">⋯</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable.toL1\">MeasureTheory.Integrable.toL1</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">hf</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L1021-L1022","name":"MeasureTheory.«term_→₁ₛ[_]_»","line":1021,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.«term_→₁ₛ[_]_»","doc":"`Lp.simpleFunc` is a subspace of Lp consisting of equivalence classes of an integrable simple\nfunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.«term_→₁ₛ[_]_»\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">«term_→₁ₛ[_]_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L969-L1015","name":"MeasureTheory.Memℒp.induction_dense","line":969,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Memℒp.induction_dense","doc":"If a set of ae strongly measurable functions is stable under addition and approximates\ncharacteristic functions in `ℒp`, then it is dense in `ℒp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Memℒp.induction_dense\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Memℒp</span>.<span class=\"name\">induction_dense</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h0P : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">E</span>) ⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄,\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span> →\n      <span class=\"fn\">∀ {<span class=\"fn\">ε</span> : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">∃ (g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm\">MeasureTheory.snorm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span></span></span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">g</span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1P : <span class=\"fn\">∀ (<span class=\"fn\">f </span>g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">g</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2P : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.AEStronglyMeasurable\">MeasureTheory.AEStronglyMeasurable</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm\">MeasureTheory.snorm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L939-L964","name":"MeasureTheory.Memℒp.induction","line":939,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Memℒp.induction","doc":"To prove something for an arbitrary `Memℒp` function in a second countable\nBorel normed group, it suffices to show that\n* the property holds for (multiples of) characteristic functions;\n* is closed under addition;\n* the set of functions in the `Lᵖ` space for which the property holds is closed.\n* the property is closed under the almost-everywhere equal relation.\n\nIt is possible to make the hypotheses in the induction steps a bit stronger, and such conditions\ncan be added once we need them (for example in `h_add` it is only necessary to consider the sum of\na simple function with a multiple of a characteristic function and that the intersection\nof their images is a subset of `{0}`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Memℒp.induction\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Memℒp</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_i : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_ind : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">E</span>) ⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span></span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_add : <span class=\"fn\">∀ ⦃<span class=\"fn\">f </span>g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>⦄,\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">g</span></span>)</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">g</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">g</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span></span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_closed : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Lp\">MeasureTheory.Lp</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span> | <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">f</span></span></span></span>}</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_ae : <span class=\"fn\">∀ ⦃<span class=\"fn\">f </span>g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">g</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">g</span></span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>⦄</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L913-L923","name":"MeasureTheory.Lp.induction","line":913,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.induction","doc":"To prove something for an arbitrary `Lp` function in a second countable Borel normed group, it\nsuffices to show that\n* the property holds for (multiples of) characteristic functions;\n* is closed under addition;\n* the set of functions in `Lp` for which the property holds is closed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.induction\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_i : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Lp\">MeasureTheory.Lp</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_ind : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">E</span>) {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>} (<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>) (<span class=\"fn\">hμs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.indicatorConst\">MeasureTheory.Lp.simpleFunc.indicatorConst</a> <span class=\"fn\">p</span> <span class=\"fn\">hs</span> <span class=\"fn\">⋯</span> <span class=\"fn\">c</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_add : <span class=\"fn\">∀ ⦃<span class=\"fn\">f </span>g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>⦄ (<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>) (<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">g</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">g</span></span>)</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Memℒp.toLp\">MeasureTheory.Memℒp.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span>)</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Memℒp.toLp\">MeasureTheory.Memℒp.toLp</a> <span class=\"fn\">g</span> <span class=\"fn\">hg</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Memℒp.toLp\">MeasureTheory.Memℒp.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Memℒp.toLp\">MeasureTheory.Memℒp.toLp</a> <span class=\"fn\">g</span> <span class=\"fn\">hg</span></span></span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_closed : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Lp\">MeasureTheory.Lp</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span> | <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span>}</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Lp\">MeasureTheory.Lp</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L841-L893","name":"MeasureTheory.Lp.simpleFunc.denseRange_coeSimpleFuncNonnegToLpNonneg","line":841,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.denseRange_coeSimpleFuncNonnegToLpNonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.denseRange_coeSimpleFuncNonnegToLpNonneg\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">denseRange_coeSimpleFuncNonnegToLpNonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_7)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Order/Lattice.html#NormedLatticeAddCommGroup\">NormedLatticeAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#DenseRange\">DenseRange</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeSimpleFuncNonnegToLpNonneg\">MeasureTheory.Lp.simpleFunc.coeSimpleFuncNonnegToLpNonneg</a> <span class=\"fn\">p</span> <span class=\"fn\">μ</span> <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L837-L838","name":"MeasureTheory.Lp.simpleFunc.coeSimpleFuncNonnegToLpNonneg","line":837,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeSimpleFuncNonnegToLpNonneg","doc":"Coercion from nonnegative simple functions of Lp to nonnegative functions of Lp. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeSimpleFuncNonnegToLpNonneg\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">coeSimpleFuncNonnegToLpNonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_7)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Order/Lattice.html#NormedLatticeAddCommGroup\">NormedLatticeAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">g</span> : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span> // <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">g</span></span> }</span> → <span class=\"fn\">{ <span class=\"fn\">g</span> : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Lp\">MeasureTheory.Lp</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span> // <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">g</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L826-L831","name":"MeasureTheory.Lp.simpleFunc.exists_simpleFunc_nonneg_ae_eq","line":826,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.exists_simpleFunc_nonneg_ae_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.exists_simpleFunc_nonneg_ae_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">exists_simpleFunc_nonneg_ae_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Order/Lattice.html#NormedLatticeAddCommGroup\">NormedLatticeAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (f' : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">G</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">f</span></span></span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">↑<span class=\"fn\">f'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L822-L823","name":"MeasureTheory.Lp.simpleFunc.coeFn_nonneg","line":822,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeFn_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeFn_nonneg\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">coeFn_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Order/Lattice.html#NormedLatticeAddCommGroup\">NormedLatticeAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">f</span></span></span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L816-L817","name":"MeasureTheory.Lp.simpleFunc.coeFn_zero","line":816,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeFn_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeFn_zero\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">coeFn_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_7)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Order/Lattice.html#NormedLatticeAddCommGroup\">NormedLatticeAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">0</span></span></span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L803-L811","name":"MeasureTheory.Lp.simpleFunc.instCovariantClassLE","line":803,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.instCovariantClassLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.instCovariantClassLE\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">instCovariantClassLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Order/Lattice.html#NormedLatticeAddCommGroup\">NormedLatticeAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/CovariantAndContravariant.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">(<span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>) =&gt;\n  <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L799-L800","name":"MeasureTheory.Lp.simpleFunc.coeFn_le","line":799,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeFn_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeFn_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">coeFn_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Order/Lattice.html#NormedLatticeAddCommGroup\">NormedLatticeAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">G</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">f</span></span></span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">g</span></span></span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L785-L788","name":"MeasureTheory.Lp.simpleFunc.coeToLp","line":785,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeToLp","doc":"The embedding of Lp simple functions into Lp functions, as a continuous linear map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coeToLp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">coeToLp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(𝕜 : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NormedRing\">NormedRing</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#BoundedSMul\">BoundedSMul</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">→L[</a><span class=\"fn\">𝕜</span><a href=\"./Mathlib/Topology/Algebra/Module/Basic.html#ContinuousLinearMap\">]</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Lp\">MeasureTheory.Lp</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L776-L778","name":"MeasureTheory.Lp.simpleFunc.denseRange","line":776,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.denseRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.denseRange\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">denseRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#DenseRange\">DenseRange</a> <span class=\"fn\">Subtype.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L771-L773","name":"MeasureTheory.Lp.simpleFunc.denseInducing","line":771,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.denseInducing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.denseInducing\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">denseInducing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/DenseEmbedding.html#DenseInducing\">DenseInducing</a> <span class=\"fn\">Subtype.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L752-L768","name":"MeasureTheory.Lp.simpleFunc.denseEmbedding","line":752,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.denseEmbedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.denseEmbedding\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">denseEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/DenseEmbedding.html#DenseEmbedding\">DenseEmbedding</a> <span class=\"fn\">Subtype.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L748-L749","name":"MeasureTheory.Lp.simpleFunc.uniformInducing","line":748,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.uniformInducing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.uniformInducing\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">uniformInducing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#UniformInducing\">UniformInducing</a> <span class=\"fn\">Subtype.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L744-L745","name":"MeasureTheory.Lp.simpleFunc.uniformEmbedding","line":744,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.uniformEmbedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.uniformEmbedding\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">uniformEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#UniformEmbedding\">UniformEmbedding</a> <span class=\"fn\">Subtype.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L740-L741","name":"MeasureTheory.Lp.simpleFunc.uniformContinuous","line":740,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.uniformContinuous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.uniformContinuous\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">uniformContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">Subtype.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L705-L731","name":"MeasureTheory.Lp.simpleFunc.induction","line":705,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.induction","doc":"To prove something for an arbitrary `Lp` simple function, with `0 < p < ∞`, it suffices to show\nthat the property holds for (multiples of) characteristic functions of finite-measure measurable\nsets and is closed under addition (of functions with disjoint support). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.induction\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_pos : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h_ind : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">E</span>) {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>} (<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>) (<span class=\"fn\">hμs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.indicatorConst\">MeasureTheory.Lp.simpleFunc.indicatorConst</a> <span class=\"fn\">p</span> <span class=\"fn\">hs</span> <span class=\"fn\">⋯</span> <span class=\"fn\">c</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_add : <span class=\"fn\">∀ ⦃<span class=\"fn\">f </span>g : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>⦄ (<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>) (<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">g</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">↑<span class=\"fn\">g</span></span></span>)</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span>)</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">g</span> <span class=\"fn\">hg</span></span>)</span></span> →\n        <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">g</span> <span class=\"fn\">hg</span></span></span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L695-L698","name":"MeasureTheory.Lp.simpleFunc.toSimpleFunc_indicatorConst","line":695,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc_indicatorConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc_indicatorConst\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toSimpleFunc_indicatorConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hμs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.indicatorConst\">MeasureTheory.Lp.simpleFunc.indicatorConst</a> <span class=\"fn\">p</span> <span class=\"fn\">hs</span> <span class=\"fn\">hμs</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.piecewise\">MeasureTheory.SimpleFunc.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">hs</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.const\">MeasureTheory.SimpleFunc.const</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.const\">MeasureTheory.SimpleFunc.const</a> <span class=\"fn\">α</span> <span class=\"fn\">0</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L690-L692","name":"MeasureTheory.Lp.simpleFunc.coe_indicatorConst","line":690,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coe_indicatorConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coe_indicatorConst\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">coe_indicatorConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hμs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.indicatorConst\">MeasureTheory.Lp.simpleFunc.indicatorConst</a> <span class=\"fn\">p</span> <span class=\"fn\">hs</span> <span class=\"fn\">hμs</span> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.indicatorConstLp\">MeasureTheory.indicatorConstLp</a> <span class=\"fn\">p</span> <span class=\"fn\">hs</span> <span class=\"fn\">hμs</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L681-L684","name":"MeasureTheory.Lp.simpleFunc.indicatorConst","line":681,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.indicatorConst","doc":"The characteristic function of a finite-measure measurable set `s`, as an `Lp` simple function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.indicatorConst\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">indicatorConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hμs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L668-L670","name":"MeasureTheory.Lp.simpleFunc.norm_toSimpleFunc","line":668,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.norm_toSimpleFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.norm_toSimpleFunc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">norm_toSimpleFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">f</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm\">MeasureTheory.snorm</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span>.toReal</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L660-L665","name":"MeasureTheory.Lp.simpleFunc.smul_toSimpleFunc","line":660,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.smul_toSimpleFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.smul_toSimpleFunc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">smul_toSimpleFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NormedRing\">NormedRing</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#BoundedSMul\">BoundedSMul</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">𝕜</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L650-L655","name":"MeasureTheory.Lp.simpleFunc.sub_toSimpleFunc","line":650,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.sub_toSimpleFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.sub_toSimpleFunc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">sub_toSimpleFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">g</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L643-L647","name":"MeasureTheory.Lp.simpleFunc.neg_toSimpleFunc","line":643,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.neg_toSimpleFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.neg_toSimpleFunc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">neg_toSimpleFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span></span>)</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L635-L640","name":"MeasureTheory.Lp.simpleFunc.add_toSimpleFunc","line":635,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.add_toSimpleFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.add_toSimpleFunc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">add_toSimpleFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">g</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L627-L630","name":"MeasureTheory.Lp.simpleFunc.zero_toSimpleFunc","line":627,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.zero_toSimpleFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.zero_toSimpleFunc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">zero_toSimpleFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">0</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L621-L622","name":"MeasureTheory.Lp.simpleFunc.toSimpleFunc_toLp","line":621,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc_toLp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc_toLp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toSimpleFunc_toLp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hfi : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hfi</span></span>)</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L616-L618","name":"MeasureTheory.Lp.simpleFunc.toLp_toSimpleFunc","line":616,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_toSimpleFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_toSimpleFunc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toLp_toSimpleFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L612-L613","name":"MeasureTheory.Lp.simpleFunc.memℒp","line":612,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.memℒp","doc":"`toSimpleFunc f` satisfies the predicate `Memℒp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.memℒp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">memℒp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L604-L608","name":"MeasureTheory.Lp.simpleFunc.toSimpleFunc_eq_toFun","line":604,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc_eq_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc_eq_toFun\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toSimpleFunc_eq_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">f</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L599-L601","name":"MeasureTheory.Lp.simpleFunc.aestronglyMeasurable","line":599,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.aestronglyMeasurable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.aestronglyMeasurable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">aestronglyMeasurable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.AEStronglyMeasurable\">MeasureTheory.AEStronglyMeasurable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L594-L596","name":"MeasureTheory.Lp.simpleFunc.aemeasurable","line":594,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.aemeasurable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.aemeasurable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">aemeasurable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#AEMeasurable\">AEMeasurable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L588-L590","name":"MeasureTheory.Lp.simpleFunc.stronglyMeasurable","line":588,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.stronglyMeasurable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.stronglyMeasurable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">stronglyMeasurable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.StronglyMeasurable\">MeasureTheory.StronglyMeasurable</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L583-L585","name":"MeasureTheory.Lp.simpleFunc.measurable","line":583,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.measurable","doc":"`(toSimpleFunc f)` is measurable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.measurable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">measurable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\">MeasureTheory.Lp.simpleFunc.toSimpleFunc</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L577-L578","name":"MeasureTheory.Lp.simpleFunc.toSimpleFunc","line":577,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc","doc":"Find a representative of a `Lp.simpleFunc`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toSimpleFunc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toSimpleFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L567-L569","name":"MeasureTheory.Lp.simpleFunc.norm_toLp","line":567,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.norm_toLp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.norm_toLp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">norm_toLp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm\">MeasureTheory.snorm</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span>.toReal</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L562-L564","name":"MeasureTheory.Lp.simpleFunc.toLp_smul","line":562,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_smul\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toLp_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NormedRing\">NormedRing</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#BoundedSMul\">BoundedSMul</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">𝕜</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L555-L557","name":"MeasureTheory.Lp.simpleFunc.toLp_sub","line":555,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_sub\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toLp_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">g</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">g</span> <span class=\"fn\">hg</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L551-L552","name":"MeasureTheory.Lp.simpleFunc.toLp_neg","line":551,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_neg\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toLp_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span></span>)</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L546-L548","name":"MeasureTheory.Lp.simpleFunc.toLp_add","line":546,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_add\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toLp_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">g</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">g</span> <span class=\"fn\">hg</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L542-L543","name":"MeasureTheory.Lp.simpleFunc.toLp_zero","line":542,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_zero\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toLp_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L537-L539","name":"MeasureTheory.Lp.simpleFunc.toLp_eq_mk","line":537,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_eq_mk\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toLp_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/AEEqFun.html#MeasureTheory.AEEqFun.mk\">MeasureTheory.AEEqFun.mk</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L533-L534","name":"MeasureTheory.Lp.simpleFunc.toLp_eq_toLp","line":533,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_eq_toLp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp_eq_toLp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toLp_eq_toLp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\">MeasureTheory.Lp.simpleFunc.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Memℒp.toLp\">MeasureTheory.Memℒp.toLp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">hf</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L529-L530","name":"MeasureTheory.Lp.simpleFunc.toLp","line":529,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp","doc":"Construct the equivalence class `[f]` of a simple function `f` satisfying `Memℒp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.toLp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">toLp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L516-L518","name":"MeasureTheory.Lp.simpleFunc.normedSpace","line":516,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.normedSpace","doc":"If `E` is a normed space, `Lp.simpleFunc E p μ` is a normed space. Not declared as an\ninstance as it is (as of writing) used only in the construction of the Bochner integral. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.normedSpace\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">normedSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NormedField\">NormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L508-L509","name":"MeasureTheory.Lp.simpleFunc.boundedSMul","line":508,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.boundedSMul","doc":"If `E` is a normed space, `Lp.simpleFunc E p μ` is a normed space. Not declared as an\ninstance as it is (as of writing) used only in the construction of the Bochner integral. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.boundedSMul\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">boundedSMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NormedRing\">NormedRing</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#BoundedSMul\">BoundedSMul</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#BoundedSMul\">BoundedSMul</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L495-L501","name":"MeasureTheory.Lp.simpleFunc.module","line":495,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.module","doc":"If `E` is a normed space, `Lp.simpleFunc E p μ` is a module. Not declared as an\ninstance as it is (as of writing) used only in the construction of the Bochner integral. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.module\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">module</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NormedRing\">NormedRing</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#BoundedSMul\">BoundedSMul</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L488-L490","name":"MeasureTheory.Lp.simpleFunc.coe_smul","line":488,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coe_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.coe_smul\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">coe_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NormedRing\">NormedRing</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#BoundedSMul\">BoundedSMul</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">𝕜</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L475-L482","name":"MeasureTheory.Lp.simpleFunc.smul","line":475,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.smul","doc":"If `E` is a normed space, `Lp.simpleFunc E p μ` is a `SMul`. Not declared as an\ninstance as it is (as of writing) used only in the construction of the Bochner integral. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.smul\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{𝕜 : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NormedRing\">NormedRing</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#BoundedSMul\">BoundedSMul</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L460-L461","name":"MeasureTheory.Lp.simpleFunc.eq'","line":460,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.eq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc.eq'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span>.<span class=\"name\">eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\">MeasureTheory.Lp.simpleFunc</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">g</span></span></span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L435-L446","name":"MeasureTheory.Lp.simpleFunc","line":435,"kind":"def","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc","doc":"`Lp.simpleFunc` is a subspace of Lp consisting of equivalence classes of an integrable simple\nfunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Lp.simpleFunc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Lp</span>.<span class=\"name\">simpleFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(E : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#AddSubgroup\">AddSubgroup</a> <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Lp\">MeasureTheory.Lp</a> <span class=\"fn\">E</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L407-L412","name":"MeasureTheory.SimpleFunc.measure_lt_top_of_memℒp_indicator","line":407,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_lt_top_of_memℒp_indicator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_lt_top_of_memℒp_indicator\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">measure_lt_top_of_memℒp_indicator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_pos : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a>\n  <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.piecewise\">MeasureTheory.SimpleFunc.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">hs</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.const\">MeasureTheory.SimpleFunc.const</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.const\">MeasureTheory.SimpleFunc.const</a> <span class=\"fn\">α</span> <span class=\"fn\">0</span></span>)</span></span>)</span></span>)</span>\n  <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L402-L404","name":"MeasureTheory.SimpleFunc.measure_support_lt_top_of_integrable","line":402,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_support_lt_top_of_integrable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_support_lt_top_of_integrable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">measure_support_lt_top_of_integrable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L397-L399","name":"MeasureTheory.SimpleFunc.measure_support_lt_top_of_memℒp","line":397,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_support_lt_top_of_memℒp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_support_lt_top_of_memℒp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">measure_support_lt_top_of_memℒp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_zero : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L389-L394","name":"MeasureTheory.SimpleFunc.measure_support_lt_top","line":389,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_support_lt_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_support_lt_top\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">measure_support_lt_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Support.html#Function.support\">Function.support</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L384-L386","name":"MeasureTheory.SimpleFunc.measure_preimage_lt_top_of_integrable","line":384,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_preimage_lt_top_of_integrable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_preimage_lt_top_of_integrable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">measure_preimage_lt_top_of_integrable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L380-L381","name":"MeasureTheory.SimpleFunc.integrable_of_isFiniteMeasure","line":380,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_of_isFiniteMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_of_isFiniteMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">integrable_of_isFiniteMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L374-L377","name":"MeasureTheory.SimpleFunc.memℒp_of_isFiniteMeasure","line":374,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_of_isFiniteMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_of_isFiniteMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">memℒp_of_isFiniteMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L369-L371","name":"MeasureTheory.SimpleFunc.integrable_pair","line":369,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_pair\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">integrable_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">μ</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">g</span></span>)</span> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.pair\">MeasureTheory.SimpleFunc.pair</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>)</span> <span class=\"fn\">μ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L365-L366","name":"MeasureTheory.SimpleFunc.FinMeasSupp.integrable","line":365,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.FinMeasSupp.integrable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.FinMeasSupp.integrable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">FinMeasSupp</span>.<span class=\"name\">integrable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.FinMeasSupp\">MeasureTheory.SimpleFunc.FinMeasSupp</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L361-L362","name":"MeasureTheory.SimpleFunc.integrable_iff_finMeasSupp","line":361,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_iff_finMeasSupp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_iff_finMeasSupp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">integrable_iff_finMeasSupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.FinMeasSupp\">MeasureTheory.SimpleFunc.FinMeasSupp</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L356-L358","name":"MeasureTheory.SimpleFunc.memℒp_iff_finMeasSupp","line":356,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_iff_finMeasSupp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_iff_finMeasSupp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">memℒp_iff_finMeasSupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_pos : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.FinMeasSupp\">MeasureTheory.SimpleFunc.FinMeasSupp</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L351-L353","name":"MeasureTheory.SimpleFunc.memℒp_iff_integrable","line":351,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_iff_integrable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_iff_integrable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">memℒp_iff_integrable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_pos : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L347-L348","name":"MeasureTheory.SimpleFunc.integrable_iff","line":347,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">integrable_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L341-L344","name":"MeasureTheory.SimpleFunc.memℒp_iff","line":341,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">memℒp_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_pos : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L326-L338","name":"MeasureTheory.SimpleFunc.memℒp_of_finite_measure_preimage","line":326,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_of_finite_measure_preimage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_of_finite_measure_preimage\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">memℒp_of_finite_measure_preimage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L297-L323","name":"MeasureTheory.SimpleFunc.measure_preimage_lt_top_of_memℒp","line":297,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_preimage_lt_top_of_memℒp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.measure_preimage_lt_top_of_memℒp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">measure_preimage_lt_top_of_memℒp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_pos : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy_ne : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L290-L294","name":"MeasureTheory.SimpleFunc.snorm'_eq","line":290,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.snorm'_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.snorm'_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">snorm'_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm'\">MeasureTheory.snorm'</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc.range\">MeasureTheory.SimpleFunc.range</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">y</span> : <span class=\"fn\">F</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span>)</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L285-L287","name":"MeasureTheory.SimpleFunc.memℒp_top","line":285,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_top\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">memℒp_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L281-L282","name":"MeasureTheory.SimpleFunc.memℒp_zero","line":281,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_zero\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">memℒp_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">f</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L277-L278","name":"MeasureTheory.SimpleFunc.exists_forall_norm_le","line":277,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.exists_forall_norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.exists_forall_norm_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">exists_forall_norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">α</span> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (C : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>), <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">f</span></span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L253-L256","name":"MeasureTheory.SimpleFunc.integrable_approxOn_range","line":253,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_approxOn_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_approxOn_range\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">integrable_approxOn_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fmeas : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">fmeas</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span> <span class=\"fn\">n</span></span>)</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L244-L250","name":"MeasureTheory.SimpleFunc.tendsto_approxOn_range_L1_nnnorm","line":244,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_range_L1_nnnorm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_range_L1_nnnorm\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">tendsto_approxOn_range_L1_nnnorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fmeas : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a>\n  <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">∫⁻ (x : <span class=\"fn\">β</span>), <span class=\"fn\">↑<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">fmeas</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span> <span class=\"fn\">n</span></span>)</span></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></span></span> ∂<span class=\"fn\">μ</span></span></span>)</span>\n  <span class=\"fn\">Filter.atTop</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L237-L241","name":"MeasureTheory.SimpleFunc.integrable_approxOn","line":237,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_approxOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.integrable_approxOn\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">integrable_approxOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fmeas : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">f</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₀ : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">y₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi₀ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">y₀</span></span>)</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.Integrable\">MeasureTheory.Integrable</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">fmeas</span> <span class=\"fn\">s</span> <span class=\"fn\">y₀</span> <span class=\"fn\">h₀</span> <span class=\"fn\">n</span></span>)</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L228-L234","name":"MeasureTheory.SimpleFunc.tendsto_approxOn_L1_nnnorm","line":228,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_L1_nnnorm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_L1_nnnorm\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">tendsto_approxOn_L1_nnnorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₀ : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">y₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hμ : <span class=\"fn\">∀ᵐ (x : <span class=\"fn\">β</span>) ∂<span class=\"fn\">μ</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space.html#MeasureTheory.HasFiniteIntegral\">MeasureTheory.HasFiniteIntegral</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y₀</span></span></span>)</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">∫⁻ (x : <span class=\"fn\">β</span>), <span class=\"fn\">↑<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span> <span class=\"fn\">s</span> <span class=\"fn\">y₀</span> <span class=\"fn\">h₀</span> <span class=\"fn\">n</span></span>)</span></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></span></span> ∂<span class=\"fn\">μ</span></span></span>)</span>\n  <span class=\"fn\">Filter.atTop</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L197-L215","name":"MeasureTheory.Memℒp.exists_simpleFunc_snorm_sub_lt","line":197,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Memℒp.exists_simpleFunc_snorm_sub_lt","doc":"Any function in `ℒp` can be approximated by a simple function if `p < ∞`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.Memℒp.exists_simpleFunc_snorm_sub_lt\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Memℒp</span>.<span class=\"name\">exists_simpleFunc_snorm_sub_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">ε</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (g : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFunc.html#MeasureTheory.SimpleFunc\">MeasureTheory.SimpleFunc</a> <span class=\"fn\">β</span> <span class=\"fn\">E</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm\">MeasureTheory.snorm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\">g</span></span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">g</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L185-L193","name":"MeasureTheory.SimpleFunc.tendsto_approxOn_range_Lp","line":185,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_range_Lp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_range_Lp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">tendsto_approxOn_range_Lp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hp : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fmeas : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a>\n  <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Memℒp.toLp\">MeasureTheory.Memℒp.toLp</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">fmeas</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span> <span class=\"fn\">n</span></span>)</span></span> <span class=\"fn\">⋯</span></span></span>)</span>\n  <span class=\"fn\">Filter.atTop</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSpace.html#MeasureTheory.Memℒp.toLp\">MeasureTheory.Memℒp.toLp</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L179-L182","name":"MeasureTheory.SimpleFunc.memℒp_approxOn_range","line":179,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_approxOn_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_approxOn_range\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">memℒp_approxOn_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fmeas : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">fmeas</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span> <span class=\"fn\">n</span></span>)</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L169-L176","name":"MeasureTheory.SimpleFunc.tendsto_approxOn_range_Lp_snorm","line":169,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_range_Lp_snorm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_range_Lp_snorm\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">tendsto_approxOn_range_Lp_snorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fmeas : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm\">MeasureTheory.snorm</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a>\n  <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm\">MeasureTheory.snorm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">fmeas</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">{<span class=\"fn\">0</span>}</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></span>)</span>\n  <span class=\"fn\">Filter.atTop</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L139-L166","name":"MeasureTheory.SimpleFunc.memℒp_approxOn","line":139,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_approxOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.memℒp_approxOn\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">memℒp_approxOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fmeas : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₀ : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">y₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi₀ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">y₀</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.Memℒp\">MeasureTheory.Memℒp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">fmeas</span> <span class=\"fn\">s</span> <span class=\"fn\">y₀</span> <span class=\"fn\">h₀</span> <span class=\"fn\">n</span></span>)</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L94-L136","name":"MeasureTheory.SimpleFunc.tendsto_approxOn_Lp_snorm","line":94,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_Lp_snorm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.tendsto_approxOn_Lp_snorm\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">tendsto_approxOn_Lp_snorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₀ : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">y₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp_ne_top : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hμ : <span class=\"fn\">∀ᵐ (x : <span class=\"fn\">β</span>) ∂<span class=\"fn\">μ</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#closure\">closure</a> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm\">MeasureTheory.snorm</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y₀</span></span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Basic.html#MeasureTheory.snorm\">MeasureTheory.snorm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span> <span class=\"fn\">s</span> <span class=\"fn\">y₀</span> <span class=\"fn\">h₀</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">μ</span></span></span>)</span>\n  <span class=\"fn\">Filter.atTop</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L86-L91","name":"MeasureTheory.SimpleFunc.norm_approxOn_zero_le","line":86,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.norm_approxOn_zero_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.norm_approxOn_zero_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">norm_approxOn_zero_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span> <span class=\"fn\">s</span> <span class=\"fn\">0</span> <span class=\"fn\">h₀</span> <span class=\"fn\">n</span></span>)</span></span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L78-L83","name":"MeasureTheory.SimpleFunc.norm_approxOn_y₀_le","line":78,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.norm_approxOn_y₀_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.norm_approxOn_y₀_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">norm_approxOn_y₀_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₀ : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">y₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span> <span class=\"fn\">s</span> <span class=\"fn\">y₀</span> <span class=\"fn\">h₀</span> <span class=\"fn\">n</span></span>)</span></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y₀</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y₀</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y₀</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean#L69-L75","name":"MeasureTheory.SimpleFunc.nnnorm_approxOn_le","line":69,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.nnnorm_approxOn_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.html#MeasureTheory.SimpleFunc.nnnorm_approxOn_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SimpleFunc</span>.<span class=\"name\">nnnorm_approxOn_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y₀ : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">y₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.SeparableSpace\">TopologicalSpace.SeparableSpace</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/SimpleFuncDense.html#MeasureTheory.SimpleFunc.approxOn\">MeasureTheory.SimpleFunc.approxOn</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span> <span class=\"fn\">s</span> <span class=\"fn\">y₀</span> <span class=\"fn\">h₀</span> <span class=\"fn\">n</span></span>)</span></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y₀</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></span></span></div></div>"}]}