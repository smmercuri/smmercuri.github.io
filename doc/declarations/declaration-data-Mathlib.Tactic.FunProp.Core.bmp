{"name":"Mathlib.Tactic.FunProp.Core","instances":[],"imports":["Init","Lean","Std.Tactic.Exact","Mathlib.Tactic.FunProp.Theorems","Mathlib.Tactic.FunProp.ToStd","Mathlib.Tactic.FunProp.Types","Mathlib.Lean.Expr.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L570-L594","name":"Mathlib.Meta.FunProp.funProp","line":570,"kind":"opaque","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.funProp","doc":"Main `funProp` function. Returns proof of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.funProp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">funProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L564-L566","name":"Mathlib.Meta.FunProp.cacheResult","line":564,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.cacheResult","doc":"Cache result if it does not have any subgoals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.cacheResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">cacheResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L523-L560","name":"Mathlib.Meta.FunProp.constAppCase","line":523,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.constAppCase","doc":"Prove function property of `fun x => f x₁ ... xₙ` where `f` is declared function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.constAppCase\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">constAppCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L487-L519","name":"Mathlib.Meta.FunProp.fvarAppCase","line":487,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.fvarAppCase","doc":"Prove function property of `fun x => f x₁ ... xₙ` where `f` is free variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.fvarAppCase\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">fvarAppCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L429-L484","name":"Mathlib.Meta.FunProp.tryTheorems","line":429,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheorems","doc":"Try to apply theorems `thms` to `e` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">tryTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thms : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Theorems.html#Mathlib.Meta.FunProp.FunctionTheorem\">Mathlib.Meta.FunProp.FunctionTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L379-L425","name":"Mathlib.Meta.FunProp.getLocalTheorems","line":379,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.getLocalTheorems","doc":"Get candidate theorems from the local context for function property `funPropDecl` and\nfunction `funName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.getLocalTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">getLocalTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funOrigin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mainArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(appliedArgs : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Theorems.html#Mathlib.Meta.FunProp.FunctionTheorem\">Mathlib.Meta.FunProp.FunctionTheorem</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L360-L375","name":"Mathlib.Meta.FunProp.getDeclTheorems","line":360,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.getDeclTheorems","doc":"Get candidate theorems from the environment for function property `funPropDecl` and\nfunction `funName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.getDeclTheorems\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">getDeclTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mainArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(appliedArgs : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Theorems.html#Mathlib.Meta.FunProp.FunctionTheorem\">Mathlib.Meta.FunProp.FunctionTheorem</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L347-L356","name":"Mathlib.Meta.FunProp.bvarAppCase","line":347,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.bvarAppCase","doc":"Prove function property of `fun f => f x₁ ... xₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.bvarAppCase\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">bvarAppCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L328-L343","name":"Mathlib.Meta.FunProp.removeArgRule","line":328,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.removeArgRule","doc":"Try to remove applied argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.removeArgRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">removeArgRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L307-L325","name":"Mathlib.Meta.FunProp.applyTransitionRules","line":307,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyTransitionRules","doc":"Prove function property of using \"transition theorems\" e.g. continuity from linearity.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyTransitionRules\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyTransitionRules</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L279-L304","name":"Mathlib.Meta.FunProp.applyMorRules","line":279,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyMorRules","doc":"Prove function property of using \"morphism theorems\" e.g. bundled linear map is linear map.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyMorRules\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyMorRules</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L237-L275","name":"Mathlib.Meta.FunProp.letCase","line":237,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.letCase","doc":"Prove function property of `fun x => let y := g x; f x y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.letCase\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">letCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L223-L233","name":"Mathlib.Meta.FunProp.applyPiRule","line":223,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyPiRule","doc":"Apply lambda calculus rule `∀ y, P (f · y) → P fun x y => f x y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyPiRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyPiRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L210-L220","name":"Mathlib.Meta.FunProp.applyCompRule","line":210,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyCompRule","doc":"Apply lambda calculus rule `P f → P g → P fun x => f (g x)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyCompRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyCompRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L186-L207","name":"Mathlib.Meta.FunProp.applyProjRule","line":186,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyProjRule","doc":"Apply lambda calculus rule P fun f => f i` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyProjRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyProjRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(XY : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L173-L183","name":"Mathlib.Meta.FunProp.applyConstRule","line":173,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyConstRule","doc":"Apply lambda calculus rule P fun x => y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyConstRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyConstRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L161-L170","name":"Mathlib.Meta.FunProp.applyIdRule","line":161,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyIdRule","doc":"Apply lambda calculus rule P fun x => x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.applyIdRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">applyIdRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funPropDecl : <a href=\"./Mathlib/Tactic/FunProp/Decl.html#Mathlib.Meta.FunProp.FunPropDecl\">Mathlib.Meta.FunProp.FunPropDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L155-L157","name":"Mathlib.Meta.FunProp.tryTheorem?","line":155,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheorem?","doc":"Try to apply a theorem "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheorem?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">tryTheorem?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmOrigin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newMCtxDepth : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L129-L151","name":"Mathlib.Meta.FunProp.tryTheoremWithHint?","line":129,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheoremWithHint?","doc":"Try to apply a theorem provided some of the theorem arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheoremWithHint?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">tryTheoremWithHint?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmOrigin : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hint : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newMCtxDepth : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L107-L125","name":"Mathlib.Meta.FunProp.tryTheoremCore","line":107,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheoremCore","doc":"Try to apply theorem - core function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.tryTheoremCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">tryTheoremCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bis : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L44-L103","name":"Mathlib.Meta.FunProp.synthesizeArgs","line":44,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.synthesizeArgs","doc":"Synthesize arguments `xs` either with typeclass synthesis, with funProp or with discharger. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.synthesizeArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">synthesizeArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bis : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funProp : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Result\">Mathlib.Meta.FunProp.Result</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.FunPropM\">Mathlib.Meta.FunProp.FunPropM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/Core.lean#L27-L40","name":"Mathlib.Meta.FunProp.synthesizeInstance","line":27,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.synthesizeInstance","doc":"Synthesize instance of type `type` and\n1. assign it to `x` if `x` is meta variable\n2. check it is equal to `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/Core.html#Mathlib.Meta.FunProp.synthesizeInstance\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">synthesizeInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Mathlib/Tactic/FunProp/Types.html#Mathlib.Meta.FunProp.Origin\">Mathlib.Meta.FunProp.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}