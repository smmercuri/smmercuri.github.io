{"name":"Mathlib.Tactic.FunProp.FunctionData","instances":[{"typeNames":["Mathlib.Meta.FunProp.MorApplication"],"name":"Mathlib.Meta.FunProp.instInhabitedMorApplication","className":"Inhabited"},{"typeNames":["Mathlib.Meta.FunProp.MorApplication"],"name":"Mathlib.Meta.FunProp.instBEqMorApplication","className":"BEq"}],"imports":["Init","Lean","Qq","Std.Lean.Expr","Mathlib.Tactic.FunProp.Mor"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L259-L282","name":"Mathlib.Meta.FunProp.FunctionData.decompositionOverArgs","line":259,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.decompositionOverArgs","doc":"Decompose function `fun x => f y₁ ... yₙ` over specified argument indices `#[i, j, ...]`.\n\nThe result is:\n```\n(fun (yᵢ',yⱼ',...) => f y₁ .. yᵢ' .. yⱼ' .. yₙ) ∘ (fun x => (yᵢ, yⱼ, ...))\n```\n\nThis is not possible if `yₗ` for `l ∉ #[i,j,...]` still contains `x`.\nIn such case `none` is returned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.decompositionOverArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">decompositionOverArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L202-L246","name":"Mathlib.Meta.FunProp.FunctionData.nontrivialDecomposition","line":202,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.nontrivialDecomposition","doc":"Decompose function `f = (← fData.toExpr)` into composition of two functions.\n\nReturns none if the decomposition would produce composition with identity function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.nontrivialDecomposition\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">nontrivialDecomposition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L178-L196","name":"Mathlib.Meta.FunProp.FunctionData.peeloffArgDecomposition","line":178,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.peeloffArgDecomposition","doc":"Decomposes `fun x => f y₁ ... yₙ` into `(fun g => g yₙ) ∘ (fun x y => f y₁ ... yₙ₋₁ y)`\n\nReturns none if:\n- `n=0`\n- `yₙ` contains `x`\n- `n=1` and `(fun x y => f y)` is identity function i.e. `x=f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.peeloffArgDecomposition\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">peeloffArgDecomposition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L151-L169","name":"Mathlib.Meta.FunProp.FunctionData.isMorApplication","line":151,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isMorApplication","doc":"Is function body of `f` a morphism application? What kind? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isMorApplication\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">isMorApplication</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">Mathlib.Meta.FunProp.MorApplication</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L148-L148","name":"Mathlib.Meta.FunProp.instBEqMorApplication","line":148,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instBEqMorApplication","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instBEqMorApplication\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instBEqMorApplication</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">Mathlib.Meta.FunProp.MorApplication</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L148-L148","name":"Mathlib.Meta.FunProp.instInhabitedMorApplication","line":148,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instInhabitedMorApplication","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instInhabitedMorApplication\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instInhabitedMorApplication</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">Mathlib.Meta.FunProp.MorApplication</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L146-L147","name":"Mathlib.Meta.FunProp.MorApplication.none","line":146,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.none","doc":"Not a morphism application. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.none\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">Mathlib.Meta.FunProp.MorApplication</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L144-L145","name":"Mathlib.Meta.FunProp.MorApplication.overApplied","line":144,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.overApplied","doc":"Of the form `⇑f x y ...` i.e. additional applied arguments `y ...`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.overApplied\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span>.<span class=\"name\">overApplied</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">Mathlib.Meta.FunProp.MorApplication</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L142-L143","name":"Mathlib.Meta.FunProp.MorApplication.exact","line":142,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.exact","doc":"Of the form `⇑f x` i.e. morphism and one argument is provided. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.exact\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">Mathlib.Meta.FunProp.MorApplication</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L140-L141","name":"Mathlib.Meta.FunProp.MorApplication.underApplied","line":140,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.underApplied","doc":"Of the form `⇑f` i.e. missing argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.underApplied\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span>.<span class=\"name\">underApplied</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">Mathlib.Meta.FunProp.MorApplication</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L139-L148","name":"Mathlib.Meta.FunProp.MorApplication","line":139,"kind":"inductive","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication","doc":"Type of morphism application. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L131-L136","name":"Mathlib.Meta.FunProp.FunctionData.unfoldHeadFVar?","line":131,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.unfoldHeadFVar?","doc":"If head function is a let-fvar unfold it and return resulting function.\nReturn `none` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.unfoldHeadFVar?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">unfoldHeadFVar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L110-L127","name":"Mathlib.Meta.FunProp.getFunctionData?","line":110,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.getFunctionData?","doc":"Get `FunctionData` for `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.getFunctionData?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">getFunctionData?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unfoldPred : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">zetaDelta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">Mathlib.Meta.FunProp.MaybeFunctionData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L104-L107","name":"Mathlib.Meta.FunProp.MaybeFunctionData.get","line":104,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.get","doc":"Turn `MaybeFunctionData` to the function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.get\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">Mathlib.Meta.FunProp.MaybeFunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L100-L101","name":"Mathlib.Meta.FunProp.MaybeFunctionData.data","line":100,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.data","doc":"Function data has been successfully generated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.data\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span>.<span class=\"name\">data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fData : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">Mathlib.Meta.FunProp.MaybeFunctionData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L98-L99","name":"Mathlib.Meta.FunProp.MaybeFunctionData.lam","line":98,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.lam","doc":"Can't generate function data as function body has lambda binder. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.lam\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span>.<span class=\"name\">lam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">Mathlib.Meta.FunProp.MaybeFunctionData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L96-L97","name":"Mathlib.Meta.FunProp.MaybeFunctionData.letE","line":96,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.letE","doc":"Can't generate function data as function body has let binder. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.letE\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span>.<span class=\"name\">letE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">Mathlib.Meta.FunProp.MaybeFunctionData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L95-L101","name":"Mathlib.Meta.FunProp.MaybeFunctionData","line":95,"kind":"inductive","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData","doc":"Result of `getFunctionData?`. It returns function data if the function is in the form\n`fun x => f y₁ ... yₙ`. Two other cases are `fun x => let y := ...` or `fun x y => ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L73-L91","name":"Mathlib.Meta.FunProp.getFunctionData","line":73,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.getFunctionData","doc":"Get `FunctionData` for `f`. Throws if `f` can't be put into funProp-normal form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.getFunctionData\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">getFunctionData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L61-L69","name":"Mathlib.Meta.FunProp.FunctionData.getFnConstName?","line":61,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.getFnConstName?","doc":"Is head function of `f` a constant?\n\nIf the head of `f` is a projection return the name of corresponding projection function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.getFnConstName?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">getFnConstName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L54-L56","name":"Mathlib.Meta.FunProp.FunctionData.domainType","line":54,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.domainType","doc":"Domain type of `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.domainType\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">domainType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L50-L51","name":"Mathlib.Meta.FunProp.FunctionData.isConstantFun","line":50,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isConstantFun","doc":"Is `f` a constant function? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isConstantFun\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">isConstantFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L46-L47","name":"Mathlib.Meta.FunProp.FunctionData.isIdentityFun","line":46,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isIdentityFun","doc":"Is `f` an indentity function? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isIdentityFun\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">isIdentityFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L40-L43","name":"Mathlib.Meta.FunProp.FunctionData.toExpr","line":40,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.toExpr","doc":"Turn function data back to expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.toExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L37-L37","name":"Mathlib.Meta.FunProp.FunctionData.mainArgs","line":37,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mainArgs","doc":"indices of `args` that contain `mainVars` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mainArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">mainArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L35-L35","name":"Mathlib.Meta.FunProp.FunctionData.mainVar","line":35,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mainVar","doc":"main variable "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mainVar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">mainVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L33-L33","name":"Mathlib.Meta.FunProp.FunctionData.args","line":33,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.args","doc":"applied function arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.args\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L31-L31","name":"Mathlib.Meta.FunProp.FunctionData.fn","line":31,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.fn","doc":"main function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.fn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">fn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L29-L29","name":"Mathlib.Meta.FunProp.FunctionData.insts","line":29,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.insts","doc":"local instances "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.insts\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">insts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L27-L27","name":"Mathlib.Meta.FunProp.FunctionData.lctx","line":27,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.lctx","doc":"local context where `mainVar` exists "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.lctx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L25-L25","name":"Mathlib.Meta.FunProp.FunctionData.mk","line":25,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(insts : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mathlib.Meta.FunProp.Mor.Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mainVar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mainArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">Mathlib.Meta.FunProp.FunctionData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/FunProp/FunctionData.lean#L25-L37","name":"Mathlib.Meta.FunProp.FunctionData","line":25,"kind":"structure","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData","doc":"Structure storing parts of a function in funProp-normal form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}