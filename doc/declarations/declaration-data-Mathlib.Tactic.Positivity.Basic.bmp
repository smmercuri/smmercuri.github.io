{"name":"Mathlib.Tactic.Positivity.Basic","instances":[],"imports":["Init","Mathlib.Data.Int.CharZero","Mathlib.Data.Int.Order.Basic","Mathlib.Data.Nat.Factorial.Basic","Mathlib.Data.Rat.Order","Mathlib.Tactic.Positivity.Core","Qq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L442-L447","name":"Mathlib.Meta.Positivity.evalRatDen","line":442,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatDen","doc":"The `positivity` extension which identifies expressions of the form `Rat.den a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatDen\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalRatDen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L427-L438","name":"Mathlib.Meta.Positivity.evalRatNum","line":427,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatNum","doc":"The `positivity` extension which identifies expressions of the form `Rat.num a`,\nsuch that `positivity` successfully recognises `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatNum\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalRatNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L411-L416","name":"Mathlib.Meta.Positivity.evalAscFactorial","line":411,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAscFactorial","doc":"Extension for Nat.ascFactorial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAscFactorial\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalAscFactorial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L402-L407","name":"Mathlib.Meta.Positivity.evalFactorial","line":402,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalFactorial","doc":"Extension for Nat.factorial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalFactorial\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalFactorial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L393-L398","name":"Mathlib.Meta.Positivity.evalNatSucc","line":393,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatSucc","doc":"Extension for Nat.succ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatSucc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatSucc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L367-L389","name":"Mathlib.Meta.Positivity.evalIntCast","line":367,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntCast\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIntCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L353-L364","name":"Mathlib.Meta.Positivity.evalNatCast","line":353,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatCast\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L333-L350","name":"Mathlib.Meta.Positivity.evalNatAbs","line":333,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatAbs","doc":"Extension for the `positivity` tactic: `Int.natAbs` is positive when its input is.\nSince the output type of `Int.natAbs` is `ℕ`, the nonnegative case is handled by the default\n`positivity` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatAbs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatAbs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L310-L323","name":"Mathlib.Meta.Positivity.evalAbs","line":310,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAbs","doc":"The `positivity` extension which identifies expressions of the form `|a|`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAbs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalAbs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L267-L303","name":"Mathlib.Meta.Positivity.evalPow","line":267,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPow","doc":"The `positivity` extension which identifies expressions of the form `a ^ (b : ℕ)`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L257-L261","name":"Mathlib.Meta.Positivity.evalPowZeroNat","line":257,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPowZeroNat","doc":"The `positivity` extension which identifies expressions of the form `a ^ (0:ℕ)`.\nThis extension is run in addition to the general `a ^ b` extension (they are overlapping). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPowZeroNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPowZeroNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L230-L249","name":"Mathlib.Meta.Positivity.evalIntDiv","line":230,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntDiv","doc":"The `positivity` extension which identifies expressions of the form `a / b`,\nwhere `a` and `b` are integers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntDiv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIntDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L191-L213","name":"Mathlib.Meta.Positivity.evalMul","line":191,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMul","doc":"The `positivity` extension which identifies expressions of the form `a * b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L150-L171","name":"Mathlib.Meta.Positivity.evalAdd","line":150,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAdd","doc":"The `positivity` extension which identifies expressions of the form `a + b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAdd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L121-L146","name":"Mathlib.Meta.Positivity.evalMax","line":121,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMax","doc":"Extension for the `max` operator. The `max` of two numbers is nonnegative if at least one\nis nonnegative, strictly positive if at least one is positive, and nonzero if both are nonzero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L102-L117","name":"Mathlib.Meta.Positivity.evalMin","line":102,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMin","doc":"The `positivity` extension which identifies expressions of the form `min a b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/eaede86aa7777630a3826cd8f3fbf0cbaafa53e6/Mathlib/Tactic/Positivity/Basic.lean#L53-L82","name":"Mathlib.Meta.Positivity.evalIte","line":53,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIte","doc":"The `positivity` extension which identifies expressions of the form `ite p a b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIte\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIte</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">Mathlib.Meta.Positivity.PositivityExt</a></div></div>"}]}