{"name":"Std.Classes.Order","instances":[{"typeNames":["Ordering.byKey"],"name":"Ordering.instOrientedCmpByKey","className":"Std.OrientedCmp"},{"typeNames":["Ordering.byKey"],"name":"Ordering.instTransCmpByKey","className":"Std.TransCmp"},{"typeNames":["Ordering.byKey"],"name":"Ordering.instTransCmpByKey_1","className":"Std.TransCmp"}],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L106-L107","name":"Ordering.instTransCmpByKey_1","line":106,"kind":"instance","docLink":"./Std/Classes/Order.html#Ordering.instTransCmpByKey_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Ordering.instTransCmpByKey_1\"><span class=\"name\">Ordering</span>.<span class=\"name\">instTransCmpByKey_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Ordering.byKey\">Ordering.byKey</a> <span class=\"fn\">f</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L103-L104","name":"Ordering.instTransCmpByKey","line":103,"kind":"instance","docLink":"./Std/Classes/Order.html#Ordering.instTransCmpByKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Ordering.instTransCmpByKey\"><span class=\"name\">Ordering</span>.<span class=\"name\">instTransCmpByKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Ordering.byKey\">Ordering.byKey</a> <span class=\"fn\">f</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L100-L101","name":"Ordering.instOrientedCmpByKey","line":100,"kind":"instance","docLink":"./Std/Classes/Order.html#Ordering.instOrientedCmpByKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Ordering.instOrientedCmpByKey\"><span class=\"name\">Ordering</span>.<span class=\"name\">instOrientedCmpByKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Ordering.byKey\">Ordering.byKey</a> <span class=\"fn\">f</span> <span class=\"fn\">cmp</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L98-L98","name":"Ordering.byKey","line":98,"kind":"def","docLink":"./Std/Classes/Order.html#Ordering.byKey","doc":"Pull back a comparator by a function `f`, by applying the comparator to both arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Ordering.byKey\"><span class=\"name\">Ordering</span>.<span class=\"name\">byKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L86-L87","name":"Std.TransCmp.cmp_congr_right","line":86,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.cmp_congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.cmp_congr_right\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">cmp_congr_right</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">y </span>z x_1 : <span class=\"fn\">x</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>],\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L83-L84","name":"Std.TransCmp.cmp_congr_left'","line":83,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.cmp_congr_left'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.cmp_congr_left'\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">cmp_congr_left'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] {<span class=\"fn\">x_1 </span>y : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L74-L81","name":"Std.TransCmp.cmp_congr_left","line":74,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.cmp_congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.cmp_congr_left\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">cmp_congr_left</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] {<span class=\"fn\">x_1 </span>y z : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L71-L72","name":"Std.TransCmp.gt_trans","line":71,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.gt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.gt_trans\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">gt_trans</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] {<span class=\"fn\">x_1 </span>y z : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L68-L69","name":"Std.TransCmp.lt_trans","line":68,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.lt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.lt_trans\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">lt_trans</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] {<span class=\"fn\">x_1 </span>y z : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L65-L66","name":"Std.TransCmp.lt_le_trans","line":65,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.lt_le_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.lt_le_trans\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">lt_le_trans</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] {<span class=\"fn\">x_1 </span>y z : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L62-L63","name":"Std.TransCmp.le_lt_trans","line":62,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.le_lt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.le_lt_trans\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">le_lt_trans</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] {<span class=\"fn\">x_1 </span>y z : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L59-L60","name":"Std.TransCmp.gt_asymm","line":59,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.gt_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.gt_asymm\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">gt_asymm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] {<span class=\"fn\">x_1 </span>y : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x_1</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L56-L57","name":"Std.TransCmp.lt_asymm","line":56,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.lt_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.lt_asymm\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">lt_asymm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] {<span class=\"fn\">x_1 </span>y : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x_1</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L52-L54","name":"Std.TransCmp.ge_trans","line":52,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.TransCmp.ge_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.ge_trans\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">ge_trans</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">x</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>] {<span class=\"fn\">x_1 </span>y z : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L46-L46","name":"Std.TransCmp.le_trans","line":46,"kind":"def","docLink":"./Std/Classes/Order.html#Std.TransCmp.le_trans","doc":"The comparator operation is transitive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.le_trans\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">le_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L44-L44","name":"Std.TransCmp.mk","line":44,"kind":"ctor","docLink":"./Std/Classes/Order.html#Std.TransCmp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp.mk\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toOrientedCmp : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le_trans : <span class=\"fn\">∀ {<span class=\"fn\">x </span>y z : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L44-L46","name":"Std.TransCmp","line":44,"kind":"class","docLink":"./Std/Classes/Order.html#Std.TransCmp","doc":"`TransCmp cmp` asserts that `cmp` induces a transitive relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TransCmp\"><span class=\"name\">Std</span>.<span class=\"name\">TransCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.OrientedCmp\"><span class=\"name\">Std</span>.<span class=\"name\">OrientedCmp</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L35-L39","name":"Std.OrientedCmp.cmp_refl","line":35,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.OrientedCmp.cmp_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.OrientedCmp.cmp_refl\"><span class=\"name\">Std</span>.<span class=\"name\">OrientedCmp</span>.<span class=\"name\">cmp_refl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L32-L33","name":"Std.OrientedCmp.cmp_eq_eq_symm","line":32,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.OrientedCmp.cmp_eq_eq_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.OrientedCmp.cmp_eq_eq_symm\"><span class=\"name\">Std</span>.<span class=\"name\">OrientedCmp</span>.<span class=\"name\">cmp_eq_eq_symm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>],\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L29-L30","name":"Std.OrientedCmp.cmp_eq_gt","line":29,"kind":"theorem","docLink":"./Std/Classes/Order.html#Std.OrientedCmp.cmp_eq_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.OrientedCmp.cmp_eq_gt\"><span class=\"name\">Std</span>.<span class=\"name\">OrientedCmp</span>.<span class=\"name\">cmp_eq_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>],\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L25-L25","name":"Std.OrientedCmp.symm","line":25,"kind":"def","docLink":"./Std/Classes/Order.html#Std.OrientedCmp.symm","doc":"The comparator operation is symmetric, in the sense that if `cmp x y` equals `.lt` then\n`cmp y x = .gt` and vice versa. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.OrientedCmp.symm\"><span class=\"name\">Std</span>.<span class=\"name\">OrientedCmp</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.swap\">Ordering.swap</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L22-L22","name":"Std.OrientedCmp.mk","line":22,"kind":"ctor","docLink":"./Std/Classes/Order.html#Std.OrientedCmp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.OrientedCmp.mk\"><span class=\"name\">Std</span>.<span class=\"name\">OrientedCmp</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(symm : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.swap\">Ordering.swap</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L22-L25","name":"Std.OrientedCmp","line":22,"kind":"class","docLink":"./Std/Classes/Order.html#Std.OrientedCmp","doc":"`OrientedCmp cmp` asserts that `cmp` is determined by the relation `cmp x y = .lt`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.OrientedCmp\"><span class=\"name\">Std</span>.<span class=\"name\">OrientedCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L19-L19","name":"Std.TotalBLE.total","line":19,"kind":"def","docLink":"./Std/Classes/Order.html#Std.TotalBLE.total","doc":"`le` is total: either `le a b` or `le b a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TotalBLE.total\"><span class=\"name\">Std</span>.<span class=\"name\">TotalBLE</span>.<span class=\"name\">total</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TotalBLE\">Std.TotalBLE</a> <span class=\"fn\">le</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">le</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L17-L17","name":"Std.TotalBLE.mk","line":17,"kind":"ctor","docLink":"./Std/Classes/Order.html#Std.TotalBLE.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TotalBLE.mk\"><span class=\"name\">Std</span>.<span class=\"name\">TotalBLE</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(total : <span class=\"fn\">∀ {<span class=\"fn\">a </span>b : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">le</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TotalBLE\">Std.TotalBLE</a> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L17-L19","name":"Std.TotalBLE","line":17,"kind":"class","docLink":"./Std/Classes/Order.html#Std.TotalBLE","doc":"`TotalBLE le` asserts that `le` has a total order, that is, `le a b ∨ le b a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Std.TotalBLE\"><span class=\"name\">Std</span>.<span class=\"name\">TotalBLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L11-L12","name":"Ordering.swap_inj","line":11,"kind":"theorem","docLink":"./Std/Classes/Order.html#Ordering.swap_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Ordering.swap_inj\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₁ : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₂ : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.swap\">Ordering.swap</a> <span class=\"fn\">o₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.swap\">Ordering.swap</a> <span class=\"fn\">o₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/Classes/Order.lean#L9-L9","name":"Ordering.swap_swap","line":9,"kind":"theorem","docLink":"./Std/Classes/Order.html#Ordering.swap_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Classes/Order.html#Ordering.swap_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.swap\">Ordering.swap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.swap\">Ordering.swap</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></span></div></div>"}]}