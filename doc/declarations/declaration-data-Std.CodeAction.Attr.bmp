{"name":"Std.CodeAction.Attr","instances":[{"typeNames":["Std.CodeAction.TacticCodeActionEntry"],"name":"Std.CodeAction.instInhabitedTacticCodeActionEntry","className":"Inhabited"},{"typeNames":["Std.CodeAction.TacticCodeActions"],"name":"Std.CodeAction.instInhabitedTacticCodeActions","className":"Inhabited"}],"imports":["Init","Lean.Server.CodeActions"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L93-L108","name":"Std.CodeAction.tactic_code_action","line":93,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.tactic_code_action","doc":"This attribute marks a code action, which is used to suggest new tactics or replace existing ones.\n\n* `@[tactic_code_action]`: This is a code action which applies to the spaces between tactics,\nto suggest a new tactic to change the goal state.\n\n* `@[tactic_code_action kind]`: This is a code action which applies to applications of the tactic\n`kind` (a tactic syntax kind), which can replace the tactic or insert things before or after it.\n\n* `@[tactic_code_action kind₁ kind₂]`: shorthand for\n`@[tactic_code_action kind₁, tactic_code_action kind₂]`.\n\n* `@[tactic_code_action *]`: This is a tactic code action that applies to all tactics.\nUse sparingly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.tactic_code_action\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">tactic_code_action</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L80-L91","name":"Std.CodeAction.tacticCodeActionExt","line":80,"kind":"opaque","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.tacticCodeActionExt","doc":"An extension which collects all the tactic code actions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.tacticCodeActionExt\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">tacticCodeActionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L68-L78","name":"Std.CodeAction.tacticSeqCodeActionExt","line":68,"kind":"opaque","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.tacticSeqCodeActionExt","doc":"An extension which collects all the tactic code actions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.tacticSeqCodeActionExt\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">tacticSeqCodeActionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction\">Std.CodeAction.TacticSeqCodeAction</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction\">Std.CodeAction.TacticSeqCodeAction</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L60-L66","name":"Std.CodeAction.TacticCodeActions.insert","line":60,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.insert","doc":"Insert a tactic code action entry into the `TacticCodeActions` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.insert\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tacticKinds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(action : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L57-L57","name":"Std.CodeAction.instInhabitedTacticCodeActions","line":57,"kind":"instance","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedTacticCodeActions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedTacticCodeActions\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">instInhabitedTacticCodeActions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L56-L56","name":"Std.CodeAction.TacticCodeActions.onTactic","line":56,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.onTactic","doc":"The list of tactic code actions to apply when a particular tactic kind is highlighted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.onTactic\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span>.<span class=\"name\">onTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L54-L54","name":"Std.CodeAction.TacticCodeActions.onAnyTactic","line":54,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.onAnyTactic","doc":"The list of tactic code actions to apply on any tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.onAnyTactic\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span>.<span class=\"name\">onAnyTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L52-L52","name":"Std.CodeAction.TacticCodeActions.mk","line":52,"kind":"ctor","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.mk\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(onAnyTactic : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(onTactic : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L52-L57","name":"Std.CodeAction.TacticCodeActions","line":52,"kind":"structure","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions","doc":"The state of the tactic code actions extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L49-L49","name":"Std.CodeAction.instInhabitedTacticCodeActionEntry","line":49,"kind":"instance","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedTacticCodeActionEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedTacticCodeActionEntry\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">instInhabitedTacticCodeActionEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L48-L48","name":"Std.CodeAction.TacticCodeActionEntry.tacticKinds","line":48,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.tacticKinds","doc":"The tactic kinds that this extension supports. If empty it is called on all tactic kinds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.tacticKinds\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActionEntry</span>.<span class=\"name\">tacticKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L46-L46","name":"Std.CodeAction.TacticCodeActionEntry.declName","line":46,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.declName","doc":"The declaration to tag "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.declName\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActionEntry</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L44-L44","name":"Std.CodeAction.TacticCodeActionEntry.mk","line":44,"kind":"ctor","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.mk\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActionEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tacticKinds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L44-L49","name":"Std.CodeAction.TacticCodeActionEntry","line":44,"kind":"structure","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry","doc":"An entry in the tactic code actions extension, containing the attribute arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActionEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L39-L41","name":"Std.CodeAction.mkTacticSeqCodeAction","line":39,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.mkTacticSeqCodeAction","doc":"Read a tacticSeq code action from a declaration of the right type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.mkTacticSeqCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">mkTacticSeqCodeAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction\">Std.CodeAction.TacticSeqCodeAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L34-L36","name":"Std.CodeAction.mkTacticCodeAction","line":34,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.mkTacticCodeAction","doc":"Read a tactic code action from a declaration of the right type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.mkTacticCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">mkTacticCodeAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L28-L31","name":"Std.CodeAction.TacticSeqCodeAction","line":28,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction","doc":"A tactic code action extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticSeqCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/e5306c3b0edefe722370b7387ee9bcd4631d6c17/Std/CodeAction/Attr.lean#L22-L25","name":"Std.CodeAction.TacticCodeAction","line":22,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction","doc":"A tactic code action extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}